{"version":3,"file":"static/js/3336.ae96fa4c.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/update.js","views/app-views/web-configs/event-type/form.js","views/app-views/web-configs/event-type/table.js","views/app-views/web-configs/event-type/index.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from '@apollo/client'\r\n\r\nexport const UPDATE_SUBJECT = gql `\r\n    mutation updateSubject ($credit: String, $part: String, $id: ID, $school: Int, $subSchool: Int, $subject: String, $subjectCode: String, $subjectMgl: String) {\r\n        updateSubject (credit: $credit id: $id, part: $part, school: $school, subSchool: $subSchool, subject: $subject, subjectCode: $subjectCode, subjectMgl: $subjectMgl) {\r\n            subject {\r\n                subject\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_SCHOOL = gql `\r\n    mutation updateSchool($id: ID, $name: String, $nameMgl: String){\r\n        updateSchool (id: $id, name: $name, nameMgl: $nameMgl){\r\n            school {\r\n                name\r\n                nameMgl\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_SUB_SCHOOL = gql `\r\n    mutation updateSubSchool($id: ID, $name: String, $nameMgl: String, $school: Int) {\r\n        updateSubSchool (id: $id, name: $name, nameMgl: $nameMgl, school: $school) {\r\n            subSchool {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_PROGRAM = gql `\r\n    mutation updateProgram ($id: ID, $program: String, $programMgl: String, $programNumeric: String, $status: String, $maxStudentNum: Int, $degree: Int, \r\n                            $school: Int, $subSchool: Int) {\r\n        updateProgram (id: $id, program: $program, programMgl: $programMgl, programNumeric: $programNumeric, status: $status, maxStudentNum: $maxStudentNum, \r\n                        degree: $degree, school: $school, subSchool: $subSchool) {\r\n            program {\r\n                program\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_CLASSES = gql `\r\n    mutation updateClasses($id: ID, $activity: Int, $classes: String, $classesMgl: String, $classesNumeric: String, $course: String, $degree: Int, $endCourse: String,\r\n                          $maxStudentNum: Int, $program: Int, $school: Int, $status: String, $subSchool: Int, $teacher: Int) {\r\n        updateClasses(id: $id, activity: $activity, classes: $classes, classesMgl: $classesMgl, classesNumeric: $classesNumeric, course: $course, degree: $degree,\r\n                    endCourse: $endCourse, maxStudentNum: $maxStudentNum, program: $program, school: $school, status: $status, subSchool: $subSchool, teacher: $teacher) {\r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_SECTION = gql `\r\n    mutation updateSection($id: ID, $classes: Int, $program: Int, $school: Int, $subSchool: Int, $section: String) {\r\n        updateSection (id: $id, classes: $classes, program: $program, school: $school, subSchool: $subSchool, section: $section) {\r\n            section {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_TEACHER = gql `\r\n    mutation updateTeacher ($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, \r\n                            $familyName: String, $id: ID!, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String, $registerNo: String, \r\n                            $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String, $username: String, $email: String) {\r\n        updateTeacher (address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate,\r\n                        familyName: $familyName, id: $id, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \r\n                        registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \r\n                        teacherCode: $teacherCode, username: $username, email: $email) {\r\n            teacher {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_EMPLOYEES = gql `\r\n    mutation updateEmployee ($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $employeeCode: String, $sex: String, $status: Int, \r\n                             $familyName: String, $group: Int, $id: Int, $name: String, $phone: String, $phone2: String, $registerNo: String, $compartment: Int,\r\n                             $username: String, $email: String) {\r\n        updateEmployee (address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, employeeCode: $employeeCode, sex: $sex, status: $status,\r\n                        familyName: $familyName, group: $group, id: $id, name: $name, phone: $phone, phone2: $phone2, registerNo: $registerNo, compartment: $compartment,\r\n                        username: $username, email: $email) {\r\n                            employee{\r\n                                id\r\n                            }\r\n                        }\r\n                    }\r\n`\r\n\r\nexport const UPDATE_PARENT = gql `\r\n    mutation updateParent ($address: String, $addressLive: String, $familyName: String, $id: ID, $name: String, $phone: String, $profession: String, $student: Int) {\r\n        updateParent (address: $address, addressLive: $addressLive, familyName: $familyName, id: $id, name: $name, phone: $phone, profession: $profession, student: $student) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TRANSFER_STUDENT = gql `\r\n    mutation transferStudent ($activity: Int, $classes: Int, $classtime: Int, $description: String, $docDate: String, $docNum: String, $program: Int, $school: Int, \r\n                                $section: Int, $status: Int, $statusExtra: Int, $student: Int) {\r\n        transferStudent (activity: $activity, classes: $classes, classtime: $classtime, description: $description, docDate: $docDate, docNum: $docNum, program: $program, \r\n                        school: $school, section: $section, status: $status, statusExtra: $statusExtra, student: $student) {\r\n            transfer {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_STUDENT = gql `\r\n    mutation updateStudent (\r\n        $address: String\r\n        $birthCity: Int\r\n        $birthDistrict: Int\r\n        $birthdate: String\r\n        $degree: Int\r\n        $email: String\r\n        $familyName: String\r\n        $id: ID\r\n        $joinBefore: String\r\n        $joinDate: String\r\n        $joinSchoolyear: String\r\n        $name: String\r\n        $phone: String\r\n        $phone2: String\r\n        $registerNo: String\r\n        $sex: String\r\n        $studentCode: String\r\n        $username: String\r\n    ) {\r\n        updateStudent (\r\n            address: $address\r\n            birthCity: $birthCity\r\n            birthDistrict: $birthDistrict\r\n            birthdate: $birthdate\r\n            degree: $degree\r\n            email: $email\r\n            familyName: $familyName\r\n            id: $id\r\n            joinBefore: $joinBefore\r\n            joinDate: $joinDate\r\n            joinSchoolyear: $joinSchoolyear\r\n            name: $name\r\n            phone: $phone\r\n            phone2: $phone2\r\n            registerNo: $registerNo\r\n            sex: $sex\r\n            studentCode: $studentCode\r\n            username: $username\r\n        ) {\r\n            student {\r\n                id\r\n            }\r\n        }    \r\n    }\r\n`;\r\n\r\nexport const UPDATE_EVENT_TYPE = gql `\r\n    mutation updateEventType ($color: String, $id: ID, $name: String) {\r\n        updateEventType (color: $color, id: $id, name: $name) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_EVENT = gql `\r\n    mutation updateEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $id: ID, $startAt: String, $title: String) {\r\n        updateEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, id: $id, startAt: $startAt, title: $title) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, message, Spin } from 'antd';\r\nimport { useMutation } from '@apollo/client';\r\nimport { BlockPicker } from 'react-color';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { CREATE_EVENT_TYPE } from 'graphql/create';\r\nimport { UPDATE_EVENT_TYPE } from 'graphql/update';\r\n\r\nfunction DegreeForm ({formType, editData, setIsModalVisible, refetch}) {\r\n\r\n    const [selectedColor, setSelectedColor] = useState('#22194d');\r\n    const [isPickerVisible, setIsPickerVisible] = useState(false);\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [create, { loading: createLoading }] = useMutation(CREATE_EVENT_TYPE, {\r\n\t\tonCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n\t\t}\r\n\t});\r\n\r\n    const [update, { loading: updateLoading }] = useMutation(UPDATE_EVENT_TYPE, {\r\n        onCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        if(formType === \"edit\") {\r\n            form.setFieldsValue(editData);\r\n        } else if(formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [editData, form, formType]);\r\n\r\n    \r\n\r\n    const onFinish = values => {\r\n        if (formType === \"edit\") {\r\n            values.id = editData.id;\r\n            update({ variables: values });\r\n            form.resetFields();\r\n        } else {\r\n            create({ variables: values });\r\n            form.resetFields();\r\n        }\r\n    };\r\n\r\n    const popover = {\r\n        position: 'absolute',\r\n        zIndex: '2',\r\n    }\r\n\r\n    const cover = {\r\n        position: 'fixed',\r\n        top: '0px',\r\n        right: '0px',\r\n        bottom: '0px',\r\n        left: '0px',\r\n    }\r\n    \r\n    const handleClick = () => {\r\n        setIsPickerVisible(!isPickerVisible);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setIsPickerVisible(false);\r\n    }\r\n\r\n    const handleChangeComplete = (color, event) => {\r\n        setSelectedColor(color.hex);\r\n        form.setFieldsValue({ color: color.hex });\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\r\n                <Form\r\n                    id=\"DegreeForm\"\r\n                    layout={'vertical'}\r\n                    form={form}\r\n                    name=\"control-hooks\" \r\n                    onFinish={onFinish}\r\n                >\r\n                    <Form.Item \r\n                        name=\"name\" \r\n                        label={<IntlMessage id=\"name\" />} \r\n                        rules={[\r\n                            { \r\n                                required: true,\r\n                                message: \"Хоосон орхих боломжгүй\"\r\n                            }\r\n                        ]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n                    <Form.Item \r\n                        name=\"color\" \r\n                        label={<IntlMessage id=\"color\" />} \r\n                        rules={[\r\n                            { \r\n                                required: true,\r\n                                message: \"Хоосон орхих боломжгүй\"\r\n                            }\r\n                        ]}\r\n                    >\r\n                        <Input onClick={handleClick} />\r\n                    </Form.Item>\r\n                </Form>\r\n            </Spin>\r\n            { isPickerVisible &&\r\n                <div style={popover}>\r\n                    <div style={cover} onClick={handleClose} />\r\n                    <BlockPicker\r\n                        color={selectedColor}\r\n                        onChangeComplete={handleChangeComplete} \r\n                    />\r\n                </div>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DegreeForm","import React, { useState, useEffect } from 'react'\r\nimport { Card, Table, Input, Modal, message, Button, Badge } from 'antd';\r\nimport { DeleteTwoTone, SearchOutlined, EditTwoTone, PlusCircleOutlined } from '@ant-design/icons';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport utils from 'utils'\r\nimport DegreeForm from './form'\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { ALL_EVENT_TYPES } from 'graphql/all';\r\nimport { DELETE_EVENT_TYPE } from 'graphql/delete';\r\n\r\nfunction  DegreeTable (props) {\r\n\r\n\tconst { loading, data, refetch } = useQuery(ALL_EVENT_TYPES, {\r\n\t});\r\n    \r\n\tconst [list, setList] = useState([])\r\n\r\n    useEffect(() => {\r\n        if(loading === false && data){\r\n            setList(data.allEventTypes);\r\n        }\r\n    }, [loading, data])\r\n\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\tconst [editData, setEditData] = useState([]);\r\n\tconst [formType, setFormType] = useState(\"\");\r\n\r\n    const showModal = () => {\r\n\t\tsetFormType(\"create\");\r\n      \tsetIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n      \tsetIsModalVisible(false);\r\n    };\r\n\r\n\tconst editRow = row => {\r\n\t\tsetFormType(\"edit\");\r\n\t\tsetEditData(row);\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n\tconst { confirm } = Modal;\r\n\r\n\tconst [deleteDegree, { loading: loadingDelete }] = useMutation(DELETE_EVENT_TYPE, {\r\n\t\tonCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\t\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n\t\t  title: 'Устгах уу?',\r\n\t\t  okText: 'Устгах',\r\n\t\t  okType: 'danger',\r\n\t\t  cancelText: 'Болих',\r\n\t\t  onOk() {\r\n\t\t\tdeleteDegree({ variables: { id: row.id, name: row.name} }); \r\n\t\t  },\r\n\t\t});\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'name',\r\n\t\t\ttitle: <IntlMessage id=\"name\" />,\r\n\t\t\tdataIndex: 'name',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'name')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'color',\r\n\t\t\ttitle: <IntlMessage id=\"color\" />,\r\n\t\t\tdataIndex: 'color',\r\n            render: text => (\r\n                <Badge color={text} text={text} />\r\n            )\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'actions',\r\n\t\t\ttitle: <IntlMessage id=\"main.action\" />,\r\n\t\t\twidth: `20vw`,\r\n\t\t\tdataIndex: 'actions',\r\n\t\t\trender: (_, elm) => (\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t{ props.permissions.edit === true &&\r\n\t\t\t\t\t\t<Button size='small' type='text' key=\"2\" onClick={() => editRow(elm)}>\r\n\t\t\t\t\t\t\t<EditTwoTone twoToneColor=\"#ffdb00\"/>\r\n\t\t\t\t\t\t\t<span className=\"ml-2\"> <IntlMessage id=\"edit\" /></span>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{ props.permissions.destroy === true &&\r\n\t\t\t\t\t\t<Button size='small' type='text' key=\"3\" onClick={() => deleteRow(elm)}>\r\n\t\t\t\t\t\t\t<DeleteTwoTone twoToneColor=\"#f42f2f\"/>\r\n\t\t\t\t\t\t\t<span className=\"ml-2\"> <IntlMessage id=\"delete\" /></span>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t];\r\n\r\n    \r\n\r\n\tconst onSearch = e => {\r\n\t\tconst value = e.currentTarget.value\r\n\t\tconst searchArray = e.currentTarget.value? list : data?.allEventTypes\r\n\t\tconst datas = utils.wildCardSearch(searchArray, value)\r\n\t\tsetList(datas)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Modal\r\n                visible={isModalVisible} \r\n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\r\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tokButtonProps={{form:'DegreeForm', key: 'submit', htmlType: 'submit'}}\r\n            >\r\n                <DegreeForm editData={editData} formType={formType} setIsModalVisible={setIsModalVisible} refetch={refetch} />\r\n            </Modal>\r\n\t\t\t<Card>\r\n\t\t\t\t<Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n\t\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Flex>\r\n\t\t\t\t\t{ props.permissions.create === true && \r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Flex>\r\n\t\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t\t<Table \r\n\t\t\t\t\t\tcolumns={tableColumns} \r\n\t\t\t\t\t\tdataSource={list}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t\trowKey='id'  \r\n\t\t\t\t\t\tbordered\r\n                        loading={loading || loadingDelete}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</Card>\r\n\t\t</>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default DegreeTable\r\n","import React from \"react\";\r\nimport DegreeTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nconst Index = () => {\r\n\r\n    const create = CheckPer('add_degree');\r\n    const edit = CheckPer('change_degree');\r\n    const destroy = CheckPer('delete_degree');\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    return (\r\n        <DegreeTable permissions={permissions} />\r\n    )\r\n}\r\n\r\nexport default Index;\r\n"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","UPDATE_SUBJECT","gql","UPDATE_SCHOOL","UPDATE_SUB_SCHOOL","UPDATE_PROGRAM","UPDATE_CLASSES","UPDATE_SECTION","UPDATE_TEACHER","UPDATE_EMPLOYEES","UPDATE_PARENT","TRANSFER_STUDENT","UPDATE_STUDENT","UPDATE_EVENT_TYPE","UPDATE_EVENT","formType","editData","setIsModalVisible","refetch","useState","selectedColor","setSelectedColor","isPickerVisible","setIsPickerVisible","Form","form","useMutation","CREATE_EVENT_TYPE","onCompleted","data","message","create","createLoading","loading","update","updateLoading","useEffect","setFieldsValue","resetFields","spinning","tip","id","layout","name","onFinish","values","variables","label","IntlMessage","rules","required","onClick","style","position","zIndex","top","right","bottom","left","color","onChangeComplete","event","hex","useQuery","ALL_EVENT_TYPES","list","setList","allEventTypes","isModalVisible","setEditData","setFormType","confirm","Modal","DELETE_EVENT_TYPE","deleteDegree","loadingDelete","tableColumns","key","title","dataIndex","sorter","a","b","utils","render","text","width","_","elm","permissions","edit","size","type","row","EditTwoTone","twoToneColor","destroy","okText","okType","cancelText","onOk","DeleteTwoTone","visible","onCancel","okButtonProps","htmlType","placeholder","prefix","SearchOutlined","onChange","e","value","currentTarget","searchArray","datas","onSearch","icon","PlusCircleOutlined","block","columns","dataSource","rowKey","bordered","CheckPer","Object","indexOf","Loading","cover"],"sourceRoot":""}