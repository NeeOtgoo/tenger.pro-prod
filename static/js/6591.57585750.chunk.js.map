{"version":3,"file":"static/js/6591.57585750.chunk.js","mappings":"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","sources":["constants/Url.js","graphql/report.js","graphql/select.js","views/app-views/student-report/print.js","views/app-views/student-report/index.js"],"sourcesContent":["// Emind\r\nexport const REPORT_IMAGE_URL = 'http://66.181.175.235:8001';\r\n\r\n// Dhis\r\n// export const REPORT_IMAGE_URL = 'http://103.10.20.132:8001';\r\n\r\n// Dev\r\n// export const REPORT_IMAGE_URL = 'http://192.168.1.6:8000';","import { gql } from \"@apollo/client\";\r\n\r\nexport const STUDENT_REPORT = gql `\r\n    query studentReport ($studentCode: String) {\r\n        studentReport (studentCode: $studentCode) {\r\n            school\r\n            textTop\r\n            textMid\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_REPORT_SECTION = gql `\r\n    query studentReportSection ($section: Int) {\r\n        studentReportSection (section: $section) {\r\n            school\r\n            textTop\r\n            textMid\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql `\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK_REPORT = gql `\r\n    query studentMarkReport ($studentCode: String) {\r\n        studentMarkReport (studentCode: $studentCode) {\r\n            school\r\n            textTop\r\n            textMid0\r\n            textMid1\r\n            textMid2\r\n            textMid3\r\n            textMid4\r\n            textMid5\r\n            textMid6\r\n            textMid7\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK_REPORT_SECTION = gql `\r\n    query studentMarkReportSection ($section: Int) {\r\n        studentMarkReportSection (section: $section) {\r\n            school\r\n            textTop\r\n            textMid0\r\n            textMid1\r\n            textMid2\r\n            textMid3\r\n            textMid4\r\n            textMid5\r\n            textMid6\r\n            textMid7\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_SCHOOL_YEAR = gql `\r\n    query studentSchoolyear ($student: Int) {\r\n        studentSchoolyear (student: $student) {\r\n            id\r\n            schoolyear\r\n            season\r\n            semesterCode\r\n            startDate\r\n            endDate\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK = gql`\r\n    query studentMark ($student: Int, $schoolyear: Int, $part: String) {\r\n        studentMark (student: $student, schoolyear: $schoolyear, part: $part) {\r\n            id\r\n            markBoard {\r\n                subject {\r\n                    subject \r\n                    subjectCode\r\n                    credit\r\n                }\r\n            }\r\n            markRelSet {\r\n                markSetting {\r\n                    name\r\n                }\r\n                markVal\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_MARK_REL = gql `\r\n    query studentMarkRel ($student: Int, $schoolyear: Int) {\r\n        studentMarkRel (student: $student, schoolyear: $schoolyear) {\r\n            id\r\n            mark {\r\n                student {\r\n                    studentCode \r\n                }\r\n                markBoard {\r\n                    subject {\r\n                        id\r\n                        subject\r\n                        subjectCode\r\n                        credit\r\n                    }\r\n                    schoolyear {\r\n                        schoolyear \r\n                        season\r\n                    }\r\n                }\r\n            }\r\n            markSetting {\r\n                name\r\n                percentage\r\n            }\r\n            markVal\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_PERCENTAGE = gql `\r\n    query markPercentage ($percentage: Int) {\r\n        markPercentage (percentage: $percentage) {\r\n            type\r\n            percentage\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON = gql `\r\n    query markCon ($subject: Int!, $schoolyear: Int!, $student: Int!) {\r\n        markCon (subject: $subject, schoolyear: $schoolyear, student: $student) {\r\n            percentage\r\n            markRel {\r\n                markVal\r\n                markSetting\r\n            }\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_SUBJECT = gql `\r\n    query markconSubject ($schoolyear: Int!, $section: Int!, $part: String!) {\r\n        markconSubject (schoolyear: $schoolyear, section: $section, part: $part) {\r\n            subjectId\r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_STUDENT = gql `\r\n    query markconStudent ($section: Int!) {\r\n        markconStudent (section: $section) {\r\n            studentId\r\n            familyName\r\n            name\r\n            studentCode\r\n            registerNo\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_QUERY = gql`\r\n    query markConQuery ($section: Int!, $schoolyear: Int!) {\r\n        markconSubjectA: markconSubject (schoolyear: $schoolyear, section: $section, part: \"A\") {\r\n            subjectId \r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n        markconSubjectB: markconSubject (schoolyear: $schoolyear, section: $section, part: \"B\") {\r\n            subjectId \r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n        markconSubjectC: markconSubject (schoolyear: $schoolyear, section: $section, part: \"C\") {\r\n            subjectId \r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n        markconStudent (section: $section) {\r\n            studentId\r\n            familyName\r\n            name\r\n            studentCode\r\n            registerNo\r\n        }\r\n    },\r\n`;\r\n\r\nexport const ALL_STUDENTS_REPORT = gql`\r\n    query allStudentsReport {\r\n        allStudentsReport {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            studentCode\r\n            surname\r\n            familyName\r\n            familyNameMgl\r\n            name\r\n            nameMgl\r\n            religion\r\n            registerNo\r\n            nationality\r\n            state\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            citizen\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            joinDate\r\n            joinBefore\r\n            sex\r\n            birthdate\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            joinSchoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n            classesNumeric\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql `\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject \r\n            subjectCode\r\n            credit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n            programNumeric\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;","import { Card, Col, Divider, Image, Row } from 'antd';\r\nimport { REPORT_IMAGE_URL } from 'constants/Url';\r\nimport useDomain from 'hooks/useDomain';\r\nimport React, { Component } from 'react'\r\n\r\nclass PrintCard extends Component {\r\n\r\n    render() {\r\n\r\n        const printingPages = [];\r\n\r\n        this.props.datas.map(function (item, index) {\r\n\r\n            const { domainData } = useDomain();\r\n\r\n            const page = (\r\n                <div key={index} className=\"page-break\" >\r\n                    <Card\r\n                        style={{ fontFamily: 'Times New Roman', lineHeight: `17px`, color: 'black' }}\r\n                        className=\"aaa\"\r\n                        bordered={false}\r\n                    >\r\n                        <div className='flex flex-row items-center justify-around'>\r\n                            <img\r\n                                className='w-24'\r\n                                src={domainData.logo}\r\n                                alt={item.studentCode}\r\n                            />\r\n                            <div className='text-center' >\r\n                                <p className='text-3xl font-bold text-[#1a6991]' >{item.school}</p>\r\n                                <div className='text-center mt-3 text-xs text-[#1a6991]' dangerouslySetInnerHTML={{ __html: item.textTop }} />\r\n                            </div>\r\n                            <img\r\n                                className='w-24'\r\n                                src={REPORT_IMAGE_URL + item.studentPhoto}\r\n                                alt={item.studentPhoto}\r\n                            />\r\n                        </div>\r\n                        <Divider />\r\n                        <Row>\r\n                            <Col span={24} className='text-center' >\r\n                                <b className='text-[#1a6991]'>Суралцагчийн тодорхойлолт</b>\r\n                                <div className='text-[#1a6991]' style={{ fontSize: '15px' }} dangerouslySetInnerHTML={{ __html: item.textMid }} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Divider />\r\n                        <Row gutter={[16, 16]}>\r\n                            <Col span={24}>\r\n                                <div className='text-center text-[#1a6991]' dangerouslySetInnerHTML={{ __html: item.textBottom }} />\r\n                            </Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col span={24} className='text-center'>\r\n                                <Image\r\n                                    src={`https://chart.googleapis.com/chart?chs=177x177&cht=qr&chl=http%3A%2F%2F${window.location.hostname}%2Freport/student-report%2F${item.studentCode}&chld=H&choe=UTF-8`}\r\n                                    preview={false}\r\n                                />\r\n                            </Col>\r\n                        </Row>\r\n                    </Card>\r\n                </div>\r\n            )\r\n            return printingPages.push(page);\r\n        })\r\n        return (\r\n            <div>\r\n                {printingPages}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PrintCard","import React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport { useLazyQuery, useQuery } from \"@apollo/client\";\r\nimport { Button, Card, Col, Empty, Form, Row, Select, Skeleton } from 'antd';\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport { STUDENT_REPORT, STUDENT_REPORT_SECTION } from 'graphql/report';\r\nimport { PrinterOutlined } from '@ant-design/icons';\r\nimport PrintCard from './print';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { UserContext } from 'hooks/UserContextProvider';\r\nimport { SECTIONS_BY_PROGRAM, SELECT_PROGRAM, SELECT_STUDENT } from 'graphql/select';\r\nimport Loading from 'components/shared-components/Loading';\r\n\r\nconst { Option } = Select;\r\n\r\nconst Index = () => {\r\n\r\n    const [datas, setDatas] = useState();\r\n    \r\n    const contextData = useContext(UserContext)\r\n    const [user] = useState(contextData.user);\r\n\r\n    const [formSection] = Form.useForm();\r\n    const [formStudent] = Form.useForm();\r\n\r\n    const [programs, setPrograms] = useState([]);\r\n    const [sections, setSections] = useState([]);\r\n    const [students, setStudents] = useState([]);\r\n\r\n    const { loading: programLoading } = useQuery(SELECT_PROGRAM, {\r\n        onCompleted: data => {\r\n            setPrograms(data.allPrograms);\r\n        }\r\n    })\r\n\r\n    const [fetchSection, { loading: sectionLoading}] = useLazyQuery(SECTIONS_BY_PROGRAM, {\r\n        onCompleted: data => {\r\n            setSections(data.sectionsByProgram);\r\n        }\r\n    })\r\n\r\n    const [fetchStudent, { loading: studentLoading }] = useLazyQuery(SELECT_STUDENT, {\r\n        onCompleted: data => {\r\n            setStudents(data.allStudents)\r\n        }\r\n    })\r\n\r\n    const [getReport, { loading: getReportLoading }] = useLazyQuery(STUDENT_REPORT, {\r\n        onError: error => {\r\n            setDatas();\r\n        },\r\n        onCompleted: data => {\r\n            setDatas([data.studentReport]);\r\n        }\r\n    });\r\n    const [getSectionReport, { loading: getSectionReportLoading }] = useLazyQuery(STUDENT_REPORT_SECTION, {\r\n        onError: error => {\r\n            setDatas();\r\n        },\r\n        onCompleted: data => {\r\n            setDatas(data.studentReportSection);\r\n        }\r\n    });\r\n\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n\r\n    const onFinish = (values) => {\r\n        if (!values.hasOwnProperty(\"studentCode\")) {\r\n            getSectionReport({ variables: { section: values.section } })\r\n        } else {\r\n            getReport({ variables: { studentCode: values.studentCode } })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n      \r\n        if (user.isStudent === true) {\r\n            getReport({ variables: { studentCode: user.student.studentCode } })\r\n        }\r\n        \r\n    }, [getReport, user]);\r\n\r\n    const onProgramSelect = (program) => {\r\n        formSection.setFieldsValue({\r\n            section: \"\",\r\n        });\r\n        fetchSection({ variables: { program: program } })\r\n    }\r\n\r\n    const onStudentSearch = (value) => {\r\n        if (value === '') {\r\n            setStudents([]);\r\n        } else {\r\n            fetchStudent({ variables: { offset: 0, limit: 99999999, filter: value } });\r\n        }\r\n    }\r\n    \r\n\r\n    return (\r\n        <div>\r\n            { user.isStudent === false &&\r\n                <Skeleton active loading={programLoading} >\r\n                    <Row gutter={16}>\r\n                        <Col xs={24} xl={12}>\r\n                            <Card \r\n                                className='mt-4'\r\n                                title={<IntlMessage id=\"by-section\" />}\r\n                            >\r\n                                <Form  \r\n                                    id=\"section\"\r\n                                    layout={'vertical'}\r\n                                    form={formSection}\r\n                                    name=\"control-hooks\" \r\n                                    onFinish={onFinish}\r\n                                >\r\n                                    <Form.Item \r\n                                        name=\"program\" \r\n                                        label={<IntlMessage id=\"program\" />} \r\n                                        rules={[\r\n                                            { \r\n                                                required: true,\r\n                                                message: <IntlMessage id=\"form.required\" /> \r\n                                            }\r\n                                        ]}\r\n                                    >\r\n                                        <Select\r\n                                            onSelect={onProgramSelect}\r\n                                            allowClear\r\n                                            showSearch\r\n                                            optionFilterProp=\"children\"\r\n                                            filterOption={(input, option) =>\r\n                                                option.children.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                            }\r\n                                        >\r\n                                            { programs.map((program, index) => (\r\n                                                <Option value={program.id} key={index}>{program.program} / {program.programNumeric}</Option>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item \r\n                                        name=\"section\" \r\n                                        label={<IntlMessage id=\"section\" />} \r\n                                        rules={[\r\n                                            { \r\n                                                required: true,\r\n                                                message: <IntlMessage id=\"form.required\" /> \r\n                                            }\r\n                                        ]}\r\n                                    >\r\n                                        <Select\r\n                                            allowClear\r\n                                            notFoundContent={\r\n                                                sectionLoading ? <Loading cover='content' /> \r\n                                                : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                                            }\r\n                                        >\r\n                                            { sections.map((section, index) => (\r\n                                                <Option value={section.id} key={index}>{section.classes.classes} / {section.section}</Option>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item className='text-right'>\r\n                                        <Button className=\"mr-2\" type=\"primary\" htmlType=\"submit\" loading={getSectionReportLoading}>\r\n                                            Сонгох\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col xs={24} xl={12}>\r\n                            <Card \r\n                                className='mt-4'\r\n                                title={<IntlMessage id=\"by-student-code\" />}\r\n                            >\r\n                                <Form  \r\n                                    id=\"student\"\r\n                                    layout={'vertical'}\r\n                                    form={formStudent}\r\n                                    name=\"control-hooks\" \r\n                                    onFinish={onFinish}\r\n                                >\r\n                                    <Form.Item \r\n                                        name=\"studentCode\" \r\n                                        label={<IntlMessage id=\"studentCode\" />} \r\n                                        rules={[\r\n                                            { \r\n                                                required: true,\r\n                                                message: <IntlMessage id=\"form.required\" /> \r\n                                            }\r\n                                        ]}\r\n                                    >\r\n                                        <Select\r\n                                            showSearch\r\n                                            filterOption={false}\r\n                                            notFoundContent={\r\n                                                studentLoading ? <Loading cover='content' /> \r\n                                                : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                                            }\r\n                                            onSearch={onStudentSearch}\r\n                                        >\r\n                                            { students.map((student, index) => (\r\n                                                <Option value={student.studentCode} key={index}> {student.familyName} {student.name} / {student.studentCode}</Option>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item className='text-right'>\r\n                                        <Button className=\"mr-2\" type=\"primary\" htmlType=\"submit\" loading={getReportLoading}>\r\n                                            Сонгох\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Skeleton>\r\n            }\r\n            { datas &&\r\n                    <>\r\n                        <div className='text-right'>\r\n                            <Button onClick={handlePrint} type=\"primary\" icon={<PrinterOutlined />} > <IntlMessage id=\"print\" /></Button>\r\n                        </div>\r\n                        <PrintCard ref={componentRef} datas={datas} />\r\n                    </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Index\r\n"],"names":["REPORT_IMAGE_URL","STUDENT_REPORT","gql","STUDENT_REPORT_SECTION","STUDENT_MARK_REPORT","STUDENT_MARK_REPORT_SECTION","STUDENT_SCHOOL_YEAR","STUDENT_MARK","MARK_CON","MARK_CON_QUERY","ALL_STUDENTS_REPORT","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","PrintCard","printingPages","this","props","datas","map","item","index","domainData","useDomain","page","className","style","fontFamily","lineHeight","color","bordered","src","logo","alt","studentCode","school","dangerouslySetInnerHTML","__html","textTop","studentPhoto","span","fontSize","textMid","gutter","textBottom","window","location","hostname","preview","push","Component","Option","Select","useState","setDatas","contextData","useContext","UserContext","user","Form","formSection","formStudent","programs","setPrograms","sections","setSections","students","setStudents","programLoading","useQuery","onCompleted","data","allPrograms","loading","useLazyQuery","sectionsByProgram","fetchSection","sectionLoading","allStudents","fetchStudent","studentLoading","onError","error","studentReport","getReport","getReportLoading","studentReportSection","getSectionReport","getSectionReportLoading","componentRef","useRef","handlePrint","useReactToPrint","content","current","onFinish","values","hasOwnProperty","variables","section","useEffect","isStudent","student","active","xs","xl","title","IntlMessage","id","layout","form","name","label","rules","required","message","onSelect","program","setFieldsValue","allowClear","showSearch","optionFilterProp","filterOption","input","option","children","toString","toLowerCase","indexOf","value","programNumeric","notFoundContent","Loading","cover","image","Empty","classes","type","htmlType","onSearch","offset","limit","filter","familyName","onClick","icon","PrinterOutlined","ref"],"sourceRoot":""}