{"version":3,"file":"static/js/5772.b9a2693d.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/core.js","graphql/update.js","views/app-views/programs/form.js","views/app-views/programs/table.js","views/app-views/programs/index.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const ALL_DEGREES = gql`\r\n  \tquery allDegrees {\r\n        allDegrees {\r\n            id\r\n            name\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const CREATE_DEGREE = gql `\r\n    mutation createDegree($name: String) {\r\n      createDegree(name: $name) {\r\n        degree {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_DEGREE  = gql `\r\n    mutation updateDegree ($id: ID, $name: String) {\r\n        updateDegree (id: $id, name: $name) {\r\n            degree {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_DEGREE = gql `\r\n    mutation deleteDegree($id: ID!){\r\n        deleteDegree(id: $id){\r\n            degree{\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_ACTIVITY = gql`\r\n  \tquery allActivitys {\r\n        allActivitys {\r\n            id\r\n            name\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const CREATE_ACTIVITY = gql `\r\n    mutation createActivity($name: String) {\r\n      createActivity(name: $name) {\r\n        activity {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ACTIVITY  = gql `\r\n    mutation updateActivity ($id: ID, $name: String) {\r\n        updateActivity (id: $id, name: $name) {\r\n            activity {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ACTIVITY = gql `\r\n    mutation deleteActivity($id: ID!){\r\n        deleteActivity(id: $id){\r\n            activity{\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_STUDENT_STATUS = gql `\r\n    query allStudentStatuss {\r\n        allStudentStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_STUDENT_STATUS = gql `\r\n    mutation createStudentStatus($name: String) {\r\n        createStudentStatus(name: $name) {\r\n            studentStatus {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_STUDENT_STATUS = gql `\r\n    mutation updateStudentStatus ($id: ID, $name: String) {\r\n        updateStudentStatus (id: $id, name: $name) {\r\n            studentStatus {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_STUDENET_STATUS = gql `\r\n    mutation deleteStudentStatus ($id: ID) {\r\n        deleteStudentStatus (id: $id) {\r\n            studentStatus {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_STUDENT_STATUS_EXTRA = gql `\r\n    query allStudentStatusExtras {\r\n        allStudentStatusExtras {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_STUDENT_STATUS_EXTRA = gql `\r\n    mutation createStudentStatusExtra($name: String) {\r\n        createStudentStatusExtra(name: $name) {\r\n            studentStatusExtra {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_STUDENT_STATUS_EXTRA = gql `\r\n    mutation updateStudentStatusExtra ($id: ID, $name: String) {\r\n        updateStudentStatusExtra (id: $id, name: $name) {\r\n            studentStatusExtra {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_STUDENET_STATUS_EXTRA = gql `\r\n    mutation deleteStudentStatusExtra ($id: ID) {\r\n        deleteStudentStatusExtra (id: $id) {\r\n            studentStatusExtra {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport const ALL_TEACHER_STATUS = gql `\r\n    query allTeacherStatuss {\r\n        allTeacherStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_TEACHER_STATUS = gql `\r\n    mutation createTeacherStatus($name: String) {\r\n        createTeacherStatus(name: $name) {\r\n            teacherStatus {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_TEACHER_STATUS = gql `\r\n    mutation updateTeacherStatus ($id: ID, $name: String) {\r\n        updateTeacherStatus (id: $id, name: $name) {\r\n            teacherStatus {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_STEACHER_STATUS = gql `\r\n    mutation deleteTeacherStatus ($id: ID) {\r\n        deleteTeacherStatus (id: $id) {\r\n            teacherStatus {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_CLASSTIME = gql `\r\n    query allClasstimes {\r\n        allClasstimes {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_CLASSTIME = gql `\r\n    mutation createClasstime($name: String) {\r\n        createClasstime(name: $name) {\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_CLASSTIME = gql `\r\n    mutation updateClasstime ($id: ID, $name: String) {\r\n        updateClasstime (id: $id, name: $name) {\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_SCLASSTIME = gql `\r\n    mutation deleteClasstime ($id: ID) {\r\n        deleteClasstime (id: $id) {\r\n            classtime {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_ROUTINE = gql `\r\n    mutation createRoutine ($classes: Int, $endDate: Date, $program: Int, $room: String, $schoolyear: Int, $section: Int, $startDate: Date, \r\n                            $subject: Int, $teacher: Int, $time: Int, $type: String, $weekly: Int) {\r\n        createRoutine (classes: $classes, endDate: $endDate, program: $program, room: $room, schoolyear: $schoolyear, section: $section, \r\n                        startDate: $startDate, subject: $subject, teacher: $teacher, time: $time, type: $type, weekly: $weekly) {\r\n            routine {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_MENUS = gql `\r\n    query allMenus{\r\n        allMenus {\r\n            priority\r\n            key\r\n            path\r\n            title\r\n            icon\r\n            breadcrumb\r\n            subMenu\r\n            menuSet {\r\n                priority\r\n                key\r\n                path\r\n                title\r\n                icon\r\n                breadcrumb\r\n                subMenu\r\n            }\r\n        }\r\n    }\r\n`; \r\n\r\nexport const UPDATE_MENU = gql `\r\n    mutation updateMenu($breadcrumb: Boolean, $icon: String, $id: ID, $priority: Int, $status: String, $submenu: Int) {\r\n        updateMenu (breadcrumb: $breadcrumb, icon: $icon, id: $id, priority: $priority, status: $status, submenu: $submenu) {\r\n            menu {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SCHOOLYEAR = gql `\r\n    query allSchoolyears {\r\n        allSchoolyears {\r\n            id\r\n            schoolyear\r\n            season\r\n            semesterCode\r\n            startDate\r\n            endDate\r\n            isCurrent\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SCHOOLYEAR = gql `\r\n    mutation createSchoolyear ($endDate: String, $schoolyear: String, $season: String, $semesterCode: String, $startDate: String, $isCurrent: Boolean) {\r\n        createSchoolyear (endDate: $endDate, schoolyear: $schoolyear, season: $season, semesterCode: $semesterCode, startDate: $startDate, isCurrent: $isCurrent) {\r\n            schoolyear {\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_SCHOOLYEAR = gql `\r\n    mutation updateSchoolyear ($endDate: String, $id: ID, $schoolyear: String, $season: String, $semesterCode: String, $startDate: String, $isCurrent: Boolean) {\r\n        updateSchoolyear (endDate: $endDate, id: $id, schoolyear: $schoolyear, season: $season, semesterCode: $semesterCode, startDate: $startDate, isCurrent: $isCurrent) {\r\n            schoolyear {\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_SCHOOLYEAR = gql `\r\n    mutation deleteSchoolyear ($id: ID) {\r\n        deleteSchoolyear (id: $id) {\r\n            schoolyear {\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client'\r\n\r\nexport const UPDATE_SUBJECT = gql `\r\n    mutation updateSubject ($credit: String, $part: String, $id: ID, $school: Int, $subSchool: Int, $subject: String, $subjectCode: String, $subjectMgl: String) {\r\n        updateSubject (credit: $credit id: $id, part: $part, school: $school, subSchool: $subSchool, subject: $subject, subjectCode: $subjectCode, subjectMgl: $subjectMgl) {\r\n            subject {\r\n                subject\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_SCHOOL = gql `\r\n    mutation updateSchool($id: ID, $name: String, $nameMgl: String){\r\n        updateSchool (id: $id, name: $name, nameMgl: $nameMgl){\r\n            school {\r\n                name\r\n                nameMgl\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_SUB_SCHOOL = gql `\r\n    mutation updateSubSchool($id: ID, $name: String, $nameMgl: String, $school: Int) {\r\n        updateSubSchool (id: $id, name: $name, nameMgl: $nameMgl, school: $school) {\r\n            subSchool {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_PROGRAM = gql `\r\n    mutation updateProgram ($id: ID, $program: String, $programMgl: String, $programNumeric: String, $status: String, $maxStudentNum: Int, $degree: Int, \r\n                            $school: Int, $subSchool: Int) {\r\n        updateProgram (id: $id, program: $program, programMgl: $programMgl, programNumeric: $programNumeric, status: $status, maxStudentNum: $maxStudentNum, \r\n                        degree: $degree, school: $school, subSchool: $subSchool) {\r\n            program {\r\n                program\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_CLASSES = gql `\r\n    mutation updateClasses($id: ID, $activity: Int, $classes: String, $classesMgl: String, $classesNumeric: String, $course: String, $degree: Int, $endCourse: String,\r\n                          $maxStudentNum: Int, $program: Int, $school: Int, $status: String, $subSchool: Int, $teacher: Int) {\r\n        updateClasses(id: $id, activity: $activity, classes: $classes, classesMgl: $classesMgl, classesNumeric: $classesNumeric, course: $course, degree: $degree,\r\n                    endCourse: $endCourse, maxStudentNum: $maxStudentNum, program: $program, school: $school, status: $status, subSchool: $subSchool, teacher: $teacher) {\r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_SECTION = gql `\r\n    mutation updateSection($id: ID, $classes: Int, $program: Int, $school: Int, $subSchool: Int, $section: String) {\r\n        updateSection (id: $id, classes: $classes, program: $program, school: $school, subSchool: $subSchool, section: $section) {\r\n            section {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_TEACHER = gql `\r\n    mutation updateTeacher ($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, \r\n                            $familyName: String, $id: ID!, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String, $registerNo: String, \r\n                            $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String, $username: String, $email: String) {\r\n        updateTeacher (address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate,\r\n                        familyName: $familyName, id: $id, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \r\n                        registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \r\n                        teacherCode: $teacherCode, username: $username, email: $email) {\r\n            teacher {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_EMPLOYEES = gql `\r\n    mutation updateEmployee ($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $employeeCode: String, $sex: String, $status: Int, \r\n                             $familyName: String, $group: Int, $id: Int, $name: String, $phone: String, $phone2: String, $registerNo: String, $compartment: Int,\r\n                             $username: String, $email: String) {\r\n        updateEmployee (address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, employeeCode: $employeeCode, sex: $sex, status: $status,\r\n                        familyName: $familyName, group: $group, id: $id, name: $name, phone: $phone, phone2: $phone2, registerNo: $registerNo, compartment: $compartment,\r\n                        username: $username, email: $email) {\r\n                            employee{\r\n                                id\r\n                            }\r\n                        }\r\n                    }\r\n`\r\n\r\nexport const UPDATE_PARENT = gql `\r\n    mutation updateParent ($address: String, $addressLive: String, $familyName: String, $id: ID, $name: String, $phone: String, $profession: String, $student: Int) {\r\n        updateParent (address: $address, addressLive: $addressLive, familyName: $familyName, id: $id, name: $name, phone: $phone, profession: $profession, student: $student) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TRANSFER_STUDENT = gql `\r\n    mutation transferStudent ($activity: Int, $classes: Int, $classtime: Int, $description: String, $docDate: String, $docNum: String, $program: Int, $school: Int, \r\n                                $section: Int, $status: Int, $statusExtra: Int, $student: Int) {\r\n        transferStudent (activity: $activity, classes: $classes, classtime: $classtime, description: $description, docDate: $docDate, docNum: $docNum, program: $program, \r\n                        school: $school, section: $section, status: $status, statusExtra: $statusExtra, student: $student) {\r\n            transfer {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_STUDENT = gql `\r\n    mutation updateStudent (\r\n        $address: String\r\n        $birthCity: Int\r\n        $birthDistrict: Int\r\n        $birthdate: String\r\n        $degree: Int\r\n        $email: String\r\n        $familyName: String\r\n        $id: ID\r\n        $joinBefore: String\r\n        $joinDate: String\r\n        $joinSchoolyear: String\r\n        $name: String\r\n        $phone: String\r\n        $phone2: String\r\n        $registerNo: String\r\n        $sex: String\r\n        $studentCode: String\r\n        $username: String\r\n    ) {\r\n        updateStudent (\r\n            address: $address\r\n            birthCity: $birthCity\r\n            birthDistrict: $birthDistrict\r\n            birthdate: $birthdate\r\n            degree: $degree\r\n            email: $email\r\n            familyName: $familyName\r\n            id: $id\r\n            joinBefore: $joinBefore\r\n            joinDate: $joinDate\r\n            joinSchoolyear: $joinSchoolyear\r\n            name: $name\r\n            phone: $phone\r\n            phone2: $phone2\r\n            registerNo: $registerNo\r\n            sex: $sex\r\n            studentCode: $studentCode\r\n            username: $username\r\n        ) {\r\n            student {\r\n                id\r\n            }\r\n        }    \r\n    }\r\n`;\r\n\r\nexport const UPDATE_EVENT_TYPE = gql `\r\n    mutation updateEventType ($color: String, $id: ID, $name: String) {\r\n        updateEventType (color: $color, id: $id, name: $name) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_EVENT = gql `\r\n    mutation updateEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $id: ID, $startAt: String, $title: String) {\r\n        updateEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, id: $id, startAt: $startAt, title: $title) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, message, Spin, Select, InputNumber } from 'antd';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { ALL_PROGRAMS, ALL_SCHOOLS, ALL_SUB_SCHOOLS } from 'graphql/all'\r\nimport { ALL_DEGREES } from 'graphql/core'\r\nimport { CREATE_PROGRAM } from 'graphql/create'\r\nimport { UPDATE_PROGRAM } from 'graphql/update'\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\n\r\nconst { Option } = Select;\r\n\r\nfunction ProgramForm({ formType, editData, setIsModalVisible }) {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [createSchool, { loading }] = useMutation(CREATE_PROGRAM, {\r\n        refetchQueries: [ALL_PROGRAMS,\r\n            'allPrograms'\r\n        ],\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n        }\r\n    });\r\n\r\n    const [updateProgram, { loading: updateLoading }] = useMutation(UPDATE_PROGRAM, {\r\n        refetchQueries: [ALL_PROGRAMS,\r\n            'allPrograms'\r\n        ],\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n        }\r\n    })\r\n\r\n    const { data: schoolsData } = useQuery(ALL_SCHOOLS, {\r\n    });\r\n\r\n    const { data: degreesData } = useQuery(ALL_DEGREES, {\r\n    });\r\n\r\n    const { data: subSchoolsData, loading: subSchoolsLoading } = useQuery(ALL_SUB_SCHOOLS, {\r\n    });\r\n\r\n    const [subSchoolList, setSubSchoolList] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        if (subSchoolsLoading === false && subSchoolsData) {\r\n            setSubSchoolList(subSchoolsData.allSubSchools);\r\n        }\r\n    }, [subSchoolList, subSchoolsData, subSchoolsLoading])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (formType === \"edit\") {\r\n            const newData = {\r\n                program: editData.program,\r\n                programMgl: editData.programMgl,\r\n                programNumeric: editData.programNumeric,\r\n                degree: editData.degree.id,\r\n                maxStudentNum: editData.maxStudentNum,\r\n                school: editData.school.id,\r\n                subSchool: editData.subSchool.id,\r\n                status: editData.status,\r\n                key: editData.id,\r\n            }\r\n            form.setFieldsValue(newData);\r\n            setSelected(form.getFieldValue('school'));\r\n        } else if (formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [editData, form, formType]);\r\n\r\n    const onFinish = values => {\r\n        if (formType === \"edit\") {\r\n            values.id = editData.id;\r\n            updateProgram({ variables: values });\r\n        } else {\r\n            createSchool({ variables: values });\r\n        }\r\n    };\r\n\r\n    const [selected, setSelected] = useState(\"\");\r\n\r\n    const onSchoolChange = (value) => {\r\n        setSelected(value);\r\n    };\r\n\r\n    let type = null;\r\n\r\n    let options = null;\r\n\r\n    if (selected) {\r\n        type = selected;\r\n    }\r\n\r\n    if (type) {\r\n        options = subSchoolList?.filter(Subschool => Subschool.school.id === type).map(filteredSubSchool => (\r\n            <Option key={filteredSubSchool.id} value={filteredSubSchool.id}>{filteredSubSchool.name}</Option>\r\n        ))\r\n    }\r\n\r\n    return (\r\n        <Spin spinning={loading || updateLoading} tip=\"Ачааллаж байна...\">\r\n            <Form\r\n                id=\"ProgramForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item name=\"program\" label={<IntlMessage id=\"name\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name=\"programMgl\" label={<IntlMessage id=\"nameMgl\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name=\"programNumeric\" label={<IntlMessage id=\"programNumeric\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name=\"school\" label={<IntlMessage id=\"school\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Select\r\n                        onChange={onSchoolChange}\r\n                    >\r\n                        {schoolsData?.allSchools.map((school, index) => (\r\n                            <Option key={index} value={school.id}>{school.name}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name=\"subSchool\" label={<IntlMessage id=\"sub-school\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Select\r\n                        placeholder=\"Тэнхим сонгох\"\r\n                    >\r\n                        {options}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name=\"maxStudentNum\" label={<IntlMessage id=\"maxStudentNum\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <InputNumber />\r\n                </Form.Item>\r\n                <Form.Item name=\"degree\" label={<IntlMessage id=\"degree\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Select\r\n                        placeholder={<IntlMessage id=\"degree\" />}\r\n                    >\r\n                        {degreesData?.allDegrees.map((degrees, index) => (\r\n                            <Option key={index} value={degrees.id}>{degrees.name}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name=\"status\" label={<IntlMessage id=\"status\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Select\r\n                        placeholder={<IntlMessage id=\"status\" />}\r\n                    >\r\n                        <Option key=\"1\" value=\"OPEN\">Нээлттэй</Option>\r\n                        <Option key=\"2\" value=\"CLOSED\">Хаалттай</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default ProgramForm","import React, { useState, useEffect } from 'react'\r\nimport { Card, Table, Input, Spin, Modal, message, Button } from 'antd';\r\nimport { DeleteTwoTone, SearchOutlined, EditTwoTone, PlusCircleOutlined, EyeTwoTone } from '@ant-design/icons';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport utils from 'utils';\r\nimport ProgramForm from './form';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { ALL_PROGRAMS } from 'graphql/all';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { DELETE_PROGRAM } from 'graphql/delete';\r\nimport { APP_PREFIX_PATH } from 'configs/AppConfig';\r\n\r\nfunction  ProgramsTable (props) {\r\n\r\n\tconst { loading, data: dataPrograms } = useQuery(ALL_PROGRAMS, {\r\n\t});\r\n\tconst history = useHistory();\r\n    \r\n\tconst [list, setList] = useState(undefined)\r\n    const [reFill, setReFill] = useState(true)\r\n\tconst [tableLoading, setTableLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n\t\tfunction fillList () {\r\n            setList(dataPrograms.allPrograms);\r\n\t\t\tsetReFill(false);\r\n\t\t\tsetTableLoading(false);\r\n\t\t}\r\n        if(loading === false && dataPrograms){\r\n\t\t\tfillList()\r\n        }\r\n    }, [loading, dataPrograms, reFill])\r\n\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\tconst [editData, setEditData] = useState([]);\r\n\tconst [formType, setFormType] = useState(\"\");\r\n\r\n    const showModal = () => {\r\n\t\tsetFormType(\"create\");\r\n      \tsetIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n      \tsetIsModalVisible(false);\r\n    };\r\n\r\n\tconst editRow = row => {\r\n\t\tsetFormType(\"edit\");\r\n\t\tsetEditData(row);\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n\tconst { confirm } = Modal;\r\n\r\n\tvar nf = Intl.NumberFormat();\r\n\r\n\tconst [deleteProgram] = useMutation(DELETE_PROGRAM, {\r\n\t\trefetchQueries: [ALL_PROGRAMS,\r\n\t\t\t'allPrograms'\r\n\t\t],\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n\t\t  title: 'Устгах уу?',\r\n\t\t  okText: 'Устгах',\r\n\t\t  okType: 'danger',\r\n\t\t  cancelText: 'Болих',\r\n\t\t  onOk() {\r\n\t\t\tdeleteProgram({ variables: { id: row.id } }); \r\n\t\t  },\r\n\t\t});\r\n\t}\r\n\r\n\tconst showRow = (row) => {\r\n\t\thistory.push(`${APP_PREFIX_PATH}/programs/${row.id}`);\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'program',\r\n\t\t\ttitle: <IntlMessage id=\"name\" />,\r\n\t\t\tdataIndex: 'program',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'program')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'programMgl',\r\n            title: <IntlMessage id=\"nameMgl\" />,\r\n            dataIndex: 'programMgl', \r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'programMgl')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'programNumeric',\r\n\t\t\ttitle: <IntlMessage id=\"programNumeric\" />,\r\n\t\t\tdataIndex: 'programNumeric',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'programNumeric')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'school',\r\n\t\t\ttitle: <IntlMessage id=\"school\" />,\r\n\t\t\tdataIndex: ['school', 'name'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'school')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'subSchool',\r\n\t\t\ttitle: <IntlMessage id=\"sub-school\" />,\r\n\t\t\tdataIndex: ['subSchool', 'name'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subSchool')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'degree',\r\n\t\t\ttitle: <IntlMessage id=\"degree\" />,\r\n\t\t\tdataIndex: ['degree', 'name'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'degree')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'maxStudentNum',\r\n\t\t\ttitle: <IntlMessage id=\"maxStudentNum\" />,\r\n\t\t\tdataIndex: 'maxStudentNum',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'maxStudentNum'),\r\n\t\t\trender: text => <span>{nf.format(text)}</span>\r\n\t\t}\r\n\t];\r\n\r\n\tif (props.permissions.edit === true || props.permissions.destroy === true) {\r\n\t\ttableColumns.push(\r\n\t\t\t{\r\n\t\t\t\tkey: 'actions',\r\n\t\t\t\ttitle: <IntlMessage id=\"main.action\" />,\r\n\t\t\t\tdataIndex: 'actions',\r\n\t\t\t\twidth: '20vw',\r\n\t\t\t\trender: (_, elm) => (\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t<Button size=\"small\" onClick={() => showRow(elm)} type=\"text\" icon={<EyeTwoTone/>} > <IntlMessage id=\"show\" /></Button>\r\n\t\t\t\t\t\t{ props.permissions.edit === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{ props.permissions.destroy === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /> </Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\tconst onSearch = e => {\r\n\t\tconst value = e.currentTarget.value\r\n\t\tif (!value) {\r\n\t\t\tsetReFill(true)\r\n\t\t}\r\n\t\tconst searchArray = list\r\n\t\tconst data = utils.wildCardSearch(searchArray, value)\r\n\t\tsetList(data)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Modal \r\n                title={formType === 'edit' ? <IntlMessage id=\"edit\" /> : <IntlMessage id=\"add_new\" /> } \r\n                visible={isModalVisible} \r\n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\r\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tokButtonProps={{form:'ProgramForm', key: 'submit', htmlType: 'submit'}}\r\n            >\r\n                <ProgramForm \r\n\t\t\t\t\tsetTableLoading={setTableLoading} \r\n\t\t\t\t\tsetReFill={setReFill} \r\n\t\t\t\t\tformType={formType} \r\n\t\t\t\t\teditData={editData} \r\n\t\t\t\t\tsetIsModalVisible={setIsModalVisible} \r\n\t\t\t\t/>\r\n            </Modal>\r\n\t\t\t<Card>\r\n\t\t\t\t<Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n\t\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Input placeholder={\"Хайх\"} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Flex>\r\n\t\t\t\t\t{ props.permissions.create === true &&\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Flex>\r\n\t\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t\t<Spin spinning={tableLoading}>\r\n\t\t\t\t\t\t<Table \r\n\t\t\t\t\t\t\tcolumns={tableColumns} \r\n\t\t\t\t\t\t\tsize=\"small\"\r\n\t\t\t\t\t\t\tdataSource={list}\r\n\t\t\t\t\t\t\trowKey='id' \r\n\t\t\t\t\t\t\tbordered\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Spin>\r\n\t\t\t\t</div>\r\n\t\t\t</Card>\r\n\t\t</>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default ProgramsTable\r\n","import React from \"react\";\r\nimport ProgramsTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nconst Index = (props) => {\r\n    \r\n    const create = CheckPer('add_program');\r\n    const edit = CheckPer('change_program');\r\n    const destroy = CheckPer('delete_program');\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy\r\n    }\r\n    \r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    return (\r\n        <ProgramsTable title={props.title} permissions={permissions} />\r\n    )\r\n}\r\n\r\nexport default Index;\r\n"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","ALL_DEGREES","gql","CREATE_DEGREE","UPDATE_DEGREE","DELETE_DEGREE","ALL_ACTIVITY","CREATE_ACTIVITY","UPDATE_ACTIVITY","DELETE_ACTIVITY","ALL_STUDENT_STATUS","CREATE_STUDENT_STATUS","UPDATE_STUDENT_STATUS","DELETE_STUDENET_STATUS","ALL_STUDENT_STATUS_EXTRA","CREATE_STUDENT_STATUS_EXTRA","UPDATE_STUDENT_STATUS_EXTRA","DELETE_STUDENET_STATUS_EXTRA","ALL_TEACHER_STATUS","CREATE_TEACHER_STATUS","UPDATE_TEACHER_STATUS","DELETE_STEACHER_STATUS","ALL_CLASSTIME","CREATE_CLASSTIME","UPDATE_CLASSTIME","DELETE_SCLASSTIME","CREATE_ROUTINE","ALL_SCHOOLYEAR","CREATE_SCHOOLYEAR","UPDATE_SCHOOLYEAR","DELETE_SCHOOLYEAR","UPDATE_SUBJECT","UPDATE_SCHOOL","UPDATE_SUB_SCHOOL","UPDATE_PROGRAM","UPDATE_CLASSES","UPDATE_SECTION","UPDATE_TEACHER","UPDATE_EMPLOYEES","UPDATE_PARENT","TRANSFER_STUDENT","UPDATE_STUDENT","UPDATE_EVENT_TYPE","UPDATE_EVENT","Option","Select","formType","editData","setIsModalVisible","Form","form","useMutation","CREATE_PROGRAM","refetchQueries","ALL_PROGRAMS","onCompleted","data","message","createSchool","loading","updateProgram","updateLoading","schoolsData","useQuery","ALL_SCHOOLS","degreesData","ALL_SUB_SCHOOLS","subSchoolsData","subSchoolsLoading","useState","undefined","subSchoolList","setSubSchoolList","useEffect","allSubSchools","newData","program","programMgl","programNumeric","degree","id","maxStudentNum","school","subSchool","status","key","setFieldsValue","setSelected","getFieldValue","resetFields","selected","type","options","filter","Subschool","map","filteredSubSchool","value","name","spinning","tip","layout","onFinish","values","variables","label","IntlMessage","rules","required","onChange","allSchools","index","placeholder","allDegrees","degrees","dataPrograms","history","useHistory","list","setList","reFill","setReFill","tableLoading","setTableLoading","allPrograms","isModalVisible","setEditData","setFormType","confirm","Modal","nf","Intl","NumberFormat","DELETE_PROGRAM","deleteProgram","tableColumns","title","dataIndex","sorter","a","b","utils","render","text","format","permissions","edit","destroy","push","width","_","elm","size","onClick","row","APP_PREFIX_PATH","icon","EyeTwoTone","EditTwoTone","twoToneColor","okText","okType","cancelText","onOk","DeleteTwoTone","visible","onCancel","okButtonProps","htmlType","prefix","SearchOutlined","e","currentTarget","searchArray","onSearch","create","PlusCircleOutlined","block","columns","dataSource","rowKey","bordered","CheckPer","Object","indexOf","Loading","cover"],"sourceRoot":""}