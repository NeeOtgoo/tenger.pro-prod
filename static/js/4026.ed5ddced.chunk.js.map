{"version":3,"file":"static/js/4026.ed5ddced.chunk.js","mappings":"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","sources":["components/shared-components/AsyncTable/index.js","components/shared-components/Flex/index.js","graphql/update.js","views/app-views/subject/form.js","views/app-views/subject/table.js","views/app-views/subject/index.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Card, Input, Pagination, Table } from 'antd'\r\nimport { PlusCircleOutlined, SearchOutlined } from '@ant-design/icons';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport Flex from '../Flex';\r\n\r\nconst AsyncTable = ({ fetchData, loading, columns, data, permissions, showModal }) => {\r\n\r\n    const [filter, setFilter] = useState('');\r\n\r\n    const triggerFetch = (page, pageSize) => {\r\n        var start = 0;\r\n        var end = pageSize;\r\n        if (page !== 1) {\r\n            start = (page * pageSize) - pageSize\r\n            end = pageSize * page\r\n        }\r\n        fetchData({ variables: { offset: start, limit: end, filter: filter, program: 0 } })\r\n    }\r\n\r\n    const onPageChange = (page, pageSize) => {\r\n        triggerFetch(page, pageSize);\r\n    }\r\n\r\n    const onSearch = e => {\r\n        const value = e.currentTarget.value\r\n        fetchData({ variables: { offset: 0, limit: 10000000, filter: value, program: 0 } })\r\n        setFilter(value)\r\n    }\r\n\r\n    return (\r\n\t\t<Card>\r\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n                <Flex className=\"mb-1\" mobileFlex={false}>\r\n                    <div className=\"mr-md-3 mb-3\">\r\n                        <Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n                    </div>\r\n                </Flex>\r\n                { permissions.create === true &&\r\n                    <div className=\"mr-md-3 mb-3\">\r\n                        <Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\r\n                    </div>\r\n                }\r\n            </Flex>\r\n            <div className=\"table-responsive\">\r\n                <Table \r\n                    // pagination={false}\r\n                    size=\"small\"\r\n                    columns={columns} \r\n                    dataSource={data}\r\n                    rowKey='id' \r\n                    bordered\r\n                    loading={loading}\r\n                />\r\n                {/* <Pagination \r\n                    className='text-right mt-4' \r\n                    total={count} \r\n                    onChange={onPageChange}\r\n                /> */}\r\n            </div>\r\n        </Card>    \r\n    )\r\n}\r\n\r\nexport default AsyncTable","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from '@apollo/client'\r\n\r\nexport const UPDATE_SUBJECT = gql `\r\n    mutation updateSubject ($credit: String, $part: String, $id: ID, $school: Int, $subSchool: Int, $subject: String, $subjectCode: String, $subjectMgl: String) {\r\n        updateSubject (credit: $credit id: $id, part: $part, school: $school, subSchool: $subSchool, subject: $subject, subjectCode: $subjectCode, subjectMgl: $subjectMgl) {\r\n            subject {\r\n                subject\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_SCHOOL = gql `\r\n    mutation updateSchool($id: ID, $name: String, $nameMgl: String){\r\n        updateSchool (id: $id, name: $name, nameMgl: $nameMgl){\r\n            school {\r\n                name\r\n                nameMgl\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_SUB_SCHOOL = gql `\r\n    mutation updateSubSchool($id: ID, $name: String, $nameMgl: String, $school: Int) {\r\n        updateSubSchool (id: $id, name: $name, nameMgl: $nameMgl, school: $school) {\r\n            subSchool {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_PROGRAM = gql `\r\n    mutation updateProgram ($id: ID, $program: String, $programMgl: String, $programNumeric: String, $status: String, $maxStudentNum: Int, $degree: Int, \r\n                            $school: Int, $subSchool: Int) {\r\n        updateProgram (id: $id, program: $program, programMgl: $programMgl, programNumeric: $programNumeric, status: $status, maxStudentNum: $maxStudentNum, \r\n                        degree: $degree, school: $school, subSchool: $subSchool) {\r\n            program {\r\n                program\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_CLASSES = gql `\r\n    mutation updateClasses($id: ID, $activity: Int, $classes: String, $classesMgl: String, $classesNumeric: String, $course: String, $degree: Int, $endCourse: String,\r\n                          $maxStudentNum: Int, $program: Int, $school: Int, $status: String, $subSchool: Int, $teacher: Int) {\r\n        updateClasses(id: $id, activity: $activity, classes: $classes, classesMgl: $classesMgl, classesNumeric: $classesNumeric, course: $course, degree: $degree,\r\n                    endCourse: $endCourse, maxStudentNum: $maxStudentNum, program: $program, school: $school, status: $status, subSchool: $subSchool, teacher: $teacher) {\r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_SECTION = gql `\r\n    mutation updateSection($id: ID, $classes: Int, $program: Int, $school: Int, $subSchool: Int, $section: String) {\r\n        updateSection (id: $id, classes: $classes, program: $program, school: $school, subSchool: $subSchool, section: $section) {\r\n            section {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_TEACHER = gql `\r\n    mutation updateTeacher ($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, \r\n                            $familyName: String, $id: ID!, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String, $registerNo: String, \r\n                            $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String, $username: String, $email: String) {\r\n        updateTeacher (address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate,\r\n                        familyName: $familyName, id: $id, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \r\n                        registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \r\n                        teacherCode: $teacherCode, username: $username, email: $email) {\r\n            teacher {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_EMPLOYEES = gql `\r\n    mutation updateEmployee ($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $employeeCode: String, $sex: String, $status: Int, \r\n                             $familyName: String, $group: Int, $id: Int, $name: String, $phone: String, $phone2: String, $registerNo: String, $compartment: Int,\r\n                             $username: String, $email: String) {\r\n        updateEmployee (address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, employeeCode: $employeeCode, sex: $sex, status: $status,\r\n                        familyName: $familyName, group: $group, id: $id, name: $name, phone: $phone, phone2: $phone2, registerNo: $registerNo, compartment: $compartment,\r\n                        username: $username, email: $email) {\r\n                            employee{\r\n                                id\r\n                            }\r\n                        }\r\n                    }\r\n`\r\n\r\nexport const UPDATE_PARENT = gql `\r\n    mutation updateParent ($address: String, $addressLive: String, $familyName: String, $id: ID, $name: String, $phone: String, $profession: String, $student: Int) {\r\n        updateParent (address: $address, addressLive: $addressLive, familyName: $familyName, id: $id, name: $name, phone: $phone, profession: $profession, student: $student) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TRANSFER_STUDENT = gql `\r\n    mutation transferStudent ($activity: Int, $classes: Int, $classtime: Int, $description: String, $docDate: String, $docNum: String, $program: Int, $school: Int, \r\n                                $section: Int, $status: Int, $statusExtra: Int, $student: Int) {\r\n        transferStudent (activity: $activity, classes: $classes, classtime: $classtime, description: $description, docDate: $docDate, docNum: $docNum, program: $program, \r\n                        school: $school, section: $section, status: $status, statusExtra: $statusExtra, student: $student) {\r\n            transfer {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_STUDENT = gql `\r\n    mutation updateStudent (\r\n        $address: String\r\n        $birthCity: Int\r\n        $birthDistrict: Int\r\n        $birthdate: String\r\n        $degree: Int\r\n        $email: String\r\n        $familyName: String\r\n        $id: ID\r\n        $joinBefore: String\r\n        $joinDate: String\r\n        $joinSchoolyear: String\r\n        $name: String\r\n        $phone: String\r\n        $phone2: String\r\n        $registerNo: String\r\n        $sex: String\r\n        $studentCode: String\r\n        $username: String\r\n    ) {\r\n        updateStudent (\r\n            address: $address\r\n            birthCity: $birthCity\r\n            birthDistrict: $birthDistrict\r\n            birthdate: $birthdate\r\n            degree: $degree\r\n            email: $email\r\n            familyName: $familyName\r\n            id: $id\r\n            joinBefore: $joinBefore\r\n            joinDate: $joinDate\r\n            joinSchoolyear: $joinSchoolyear\r\n            name: $name\r\n            phone: $phone\r\n            phone2: $phone2\r\n            registerNo: $registerNo\r\n            sex: $sex\r\n            studentCode: $studentCode\r\n            username: $username\r\n        ) {\r\n            student {\r\n                id\r\n            }\r\n        }    \r\n    }\r\n`;\r\n\r\nexport const UPDATE_EVENT_TYPE = gql `\r\n    mutation updateEventType ($color: String, $id: ID, $name: String) {\r\n        updateEventType (color: $color, id: $id, name: $name) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_EVENT = gql `\r\n    mutation updateEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $id: ID, $startAt: String, $title: String) {\r\n        updateEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, id: $id, startAt: $startAt, title: $title) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, message, Spin, Select, InputNumber } from 'antd';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { ALL_SUB_SCHOOLS, ALL_SCHOOLS, ALL_SUBJECTS } from 'graphql/all'\r\nimport { CREATE_SUBJECT } from 'graphql/create'\r\nimport { UPDATE_SUBJECT } from 'graphql/update'\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\n\r\nconst { Option } = Select;\r\n\r\nfunction SubjectForm ({editData, formType, setIsModalVisible, refetch}) {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [createSubject, { loading: createLoading }] = useMutation(CREATE_SUBJECT, {\r\n\t\trefetchQueries: [ALL_SUBJECTS,\r\n\t\t\t'allSubjects'\r\n\t\t],\r\n\t\tonCompleted: createData => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            refetch();\r\n            setIsModalVisible(false);\r\n            form.resetFields();\r\n\t\t}\r\n\t});\r\n\r\n    const [updateSubject, { loading: updateLoading }] = useMutation(UPDATE_SUBJECT, {\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            refetch();\r\n            setIsModalVisible(false);\r\n            form.resetFields();\r\n        }\r\n    })\r\n\r\n    const { data: schoolData } = useQuery(ALL_SCHOOLS, {\r\n    });\r\n\r\n    const { data: subSchoolData } = useQuery(ALL_SUB_SCHOOLS, {\r\n    });\r\n    \r\n    const [school, setSchool] = useState(\"\");\r\n\r\n    function schoolOnChange (value) {\r\n        setSchool(value);\r\n        form.setFieldsValue({subSchool: null});\r\n    }\r\n    \r\n    let schoolID = null;\r\n    \r\n    let subSchoolOption = null;\r\n    \r\n    if (school) {\r\n        schoolID = school;\r\n    }\r\n    \r\n    if (schoolID) {\r\n        subSchoolOption = subSchoolData?.allSubSchools.filter(Subschool => Subschool.school.id === schoolID).map(filteredSubSchool => (\r\n            <Option key={filteredSubSchool.id} value={filteredSubSchool.id}>{filteredSubSchool.name}</Option>\r\n        ))\r\n    }\r\n\r\n    \r\n    \r\n    useEffect(() => {\r\n        if(formType === \"edit\") {\r\n            const newData = {\r\n                subject: editData.subject,\r\n\t\t\t\tsubjectMgl: editData.subjectMgl,\r\n\t\t\t\tschool: editData.school.id,\r\n\t\t\t\tsubSchool: editData.subSchool.id,\r\n\t\t\t\tsubjectCode: editData.subjectCode,\r\n\t\t\t\tcredit: editData.credit,\r\n\t\t\t\tkey: editData.id, \r\n                part: editData.part,\r\n\t\t\t}\r\n            form.setFieldsValue(newData);\r\n            setSchool(form.getFieldValue('school'));\r\n        } else if(formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [editData, form, formType]);\r\n\r\n    const onFinish = values => {\r\n        if (formType === \"edit\") {\r\n            values.id = editData.id\r\n            updateSubject({ variables: values });\r\n        } else {\r\n            createSubject({ variables: values });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\r\n            <Form  \r\n                id=\"SubjectForm\"\r\n                                layout={'vertical'}\r\n                form={form}\r\n                name=\"control-hooks\" \r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item name=\"subject\" label={<IntlMessage id=\"subject\" />} rules={[\r\n                    { \r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name=\"subjectMgl\" label={<IntlMessage id=\"subjectMgl\" />} rules={[\r\n                    { \r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name=\"school\" label={<IntlMessage id=\"school\" />} rules={[\r\n                    { \r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n                    <Select\r\n                        onChange={schoolOnChange}\r\n                    >\r\n                        {schoolData?.allSchools.map((school, index) => (  \r\n                            <Option key={index} value={school.id}>{school.name}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name=\"subSchool\" label={<IntlMessage id=\"sub-school\" />} rules={[\r\n                    { \r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n                    <Select\r\n                        placeholder=\"Тэнхим\"\r\n                    >\r\n                        {subSchoolOption}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item name=\"subjectCode\" label={<IntlMessage id=\"subjectCode\" />} rules={[\r\n                    { \r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name=\"credit\" label={<IntlMessage id=\"credit\" />} rules={[\r\n                    { \r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n                    <InputNumber className='w-full' />\r\n                </Form.Item>\r\n                <Form.Item name=\"part\" label={<IntlMessage id=\"subjectPart\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />  \r\n                    }\r\n                ]}>\r\n                     <Select>\r\n                        <Option value=\"A\" >Мэргэшүүлэх</Option>\r\n                        <Option value=\"B\" >Тусгай</Option>\r\n                    </Select>\r\n                </Form.Item>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default SubjectForm","import React, { useState, useEffect } from 'react'\r\nimport { Modal, message, Button } from 'antd';\r\nimport { DeleteTwoTone, EditTwoTone } from '@ant-design/icons';\r\nimport utils from 'utils'\r\nimport SubjectForm from './form'\r\nimport { useMutation, useLazyQuery } from '@apollo/client';\r\nimport { ALL_SUBJECTS } from 'graphql/all';\r\nimport { DELETE_SUBJECT } from 'graphql/delete'\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport AsyncTable from 'components/shared-components/AsyncTable';\r\n\r\nfunction  SubjectTable (props) {\r\n    \r\n\tconst [list, setList] = useState([]);\r\n\r\n\tconst [fetchData, { loading, refetch }] = useLazyQuery(ALL_SUBJECTS, {\r\n        fetchPolicy: 'network-only',\r\n        onCompleted: data => {\r\n            setList(data.allSubjects);\r\n        }\r\n\t});\r\n\r\n    useEffect(() => {\r\n        fetchData({ variables: { offset: 0, limit: 10, filter: \"\" } })\r\n    }, [fetchData])\r\n\r\n\tconst [editData, setEditData] = useState([]);\r\n\tconst [formType, setFormType] = useState(\"\");\r\n\r\n\tconst editRow = row => {\r\n\t\tsetEditData(row);\r\n\t\tsetFormType(\"edit\")\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n\tconst { confirm } = Modal;\r\n\r\n\tconst [deleteSubSchool] = useMutation(DELETE_SUBJECT, {\r\n\t\tonCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\t\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n            title: 'Устгах уу?',\r\n            okText: 'Устгах',\r\n            okType: 'danger',\r\n            cancelText: 'Болих',\r\n            onOk() {\r\n                deleteSubSchool({ variables: { id: row.id } }); \r\n            },\r\n\t\t});\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\ttitle: <IntlMessage id=\"subject\" />,\r\n\t\t\tkey: 'subject',\r\n\t\t\tdataIndex: 'subject',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subject')\r\n\t\t},\r\n\t\t{\r\n            title: <IntlMessage id=\"subjectMgl\" />,\r\n\t\t\tkey: 'subjectMgl',\r\n            dataIndex: 'subjectMgl', \r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subjectMgl')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: <IntlMessage id=\"subjectCode\" />,\r\n\t\t\tdataIndex: 'subjectCode',\r\n\t\t\tkey: 'subjectCode',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subjectCode')\r\n\t\t},\r\n\t\t{\r\n            title: <IntlMessage id=\"school\" />,\r\n            dataIndex: ['school', 'name'], \r\n\t\t\tkey: 'school',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'school')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: <IntlMessage id=\"sub-school\" />,\r\n            dataIndex: ['subSchool', 'name'], \r\n\t\t\tkey: 'subSchool',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subSchool')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: <IntlMessage id=\"subjectPart\" />,\r\n            dataIndex: 'part', \r\n\t\t\tkey: 'subjectPart',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subjectPart'),\r\n            render(elm) {\r\n\r\n\t\t\t\tfunction getPartName (part) {\r\n\t\t\t\t\tconst names = {\r\n\t\t\t\t\t\tA: 'Мэргэшүүлэх',\r\n\t\t\t\t\t\tB: 'Тусгай'\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn names[part]\r\n\t\t\t\t}\r\n\r\n                return (\r\n                     <span>{getPartName(elm)}</span>\r\n                );\r\n            },\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: <IntlMessage id=\"credit\" />,\r\n\t\t\tdataIndex: 'credit',\r\n\t\t\tkey: 'credit',\r\n\t\t\trender: (elm) => (\r\n\t\t\t\t<span>{parseFloat(elm).toString()}</span>\r\n\t\t\t),\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'credit')\r\n\t\t},\r\n\t];\r\n\tif (props.permissions.edit === true || props.permissions.destroy === true) {\r\n\t\ttableColumns.push(\r\n\t\t\t{\r\n\t\t\t\ttitle: <IntlMessage id=\"main.action\" />,\r\n\t\t\t\tkey: 'actions',\r\n\t\t\t\tdataIndex: 'actions',\r\n\t\t\t\twidth: '15vw',\r\n\t\t\t\trender: (_, elm) => (\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{ props.permissions.edit === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{ props.permissions.destroy === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\t\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n    const showModal = () => {\r\n\t\tsetFormType(\"create\")\r\n      \tsetIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n      \tsetIsModalVisible(false);\r\n    };\r\n\r\n\treturn (\r\n\t\t<>\r\n            <AsyncTable \r\n                fetchData={fetchData}\r\n                loading={loading}\r\n                columns={tableColumns}\r\n                data={list}\r\n                permissions={props.permissions}\r\n                showModal={showModal}\r\n           />\r\n            <Modal \r\n                forceRender \r\n                title={editData ? <IntlMessage id=\"edit\" /> : <IntlMessage id=\"add_new\" /> }\r\n                visible={isModalVisible} \r\n                okText={<IntlMessage id=\"main.okText\" />}\r\n                cancelText={<IntlMessage id=\"main.cancelText\" />}\r\n                onCancel={handleCancel}\r\n                okButtonProps={{form:'SubjectForm', key: 'submit', htmlType: 'submit'}}\r\n                >\r\n                    <SubjectForm\r\n                        refetch={refetch} \r\n                        editData={editData} \r\n                        formType={formType} \r\n                        setIsModalVisible={setIsModalVisible}\r\n                    />\r\n            </Modal>\r\n\t\t</>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default SubjectTable\r\n","import React from \"react\";\r\nimport SubjectTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nconst Index = () => {\r\n\r\n    const create = CheckPer('add_subject');\r\n    const edit = CheckPer('change_subject');\r\n    const destroy = CheckPer('delete_subject');\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    return (\r\n        <SubjectTable permissions={permissions} />\r\n    )\r\n}\r\n\r\nexport default Index;\r\n"],"names":["fetchData","loading","columns","data","permissions","showModal","useState","setFilter","alignItems","justifyContent","mobileFlex","className","placeholder","prefix","onChange","e","value","currentTarget","variables","offset","limit","filter","program","onSearch","create","onClick","type","icon","block","id","size","dataSource","rowKey","bordered","Flex","props","children","flexDirection","defaultProps","UPDATE_SUBJECT","gql","UPDATE_SCHOOL","UPDATE_SUB_SCHOOL","UPDATE_PROGRAM","UPDATE_CLASSES","UPDATE_SECTION","UPDATE_TEACHER","UPDATE_EMPLOYEES","UPDATE_PARENT","TRANSFER_STUDENT","UPDATE_STUDENT","UPDATE_EVENT_TYPE","UPDATE_EVENT","Option","Select","editData","formType","setIsModalVisible","refetch","Form","form","useMutation","CREATE_SUBJECT","refetchQueries","ALL_SUBJECTS","onCompleted","createData","message","resetFields","createSubject","createLoading","updateSubject","updateLoading","schoolData","useQuery","ALL_SCHOOLS","subSchoolData","ALL_SUB_SCHOOLS","school","setSchool","schoolID","subSchoolOption","allSubSchools","Subschool","map","filteredSubSchool","name","useEffect","newData","subject","subjectMgl","subSchool","subjectCode","credit","key","part","setFieldsValue","getFieldValue","spinning","tip","layout","onFinish","values","label","IntlMessage","rules","required","allSchools","index","list","setList","useLazyQuery","fetchPolicy","allSubjects","setEditData","setFormType","confirm","Modal","DELETE_SUBJECT","deleteSubSchool","tableColumns","title","dataIndex","sorter","a","b","utils","render","elm","A","B","parseFloat","toString","edit","destroy","push","width","_","EditTwoTone","twoToneColor","row","okText","okType","cancelText","onOk","DeleteTwoTone","isModalVisible","AsyncTable","forceRender","visible","onCancel","okButtonProps","htmlType","CheckPer","Object","indexOf","Loading","cover"],"sourceRoot":""}