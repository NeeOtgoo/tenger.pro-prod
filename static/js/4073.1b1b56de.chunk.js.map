{"version":3,"file":"static/js/4073.1b1b56de.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/all.js","graphql/core.js","graphql/select.js","graphql/update.js","views/app-views/transfer-student/form.js","views/app-views/transfer-student/table.js","views/app-views/transfer-student/index.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const ALL_SUBJECTS = gql `\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            part\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            subject \r\n            subjectMgl\r\n            subjectCode\r\n            credit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TEACHER_STATUS = gql `\r\n    query allTeacherStatuss {\r\n        allTeacherStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_STATUS = gql `\r\n    query allStudentStatuss {\r\n        allStudentStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_STATUS_EXTRA = gql `\r\n    query allStudentStatusExtras {\r\n        allStudentStatusExtras {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_USERS = gql `\r\n    query allUsers {\r\n        allUsers {\r\n            id\r\n            username\r\n            email\r\n        }\r\n    }\r\n`;\r\n\r\nexport const USER_BY_USERNAME = gql `\r\n    query userByUsername($username: String!) {\r\n        userByUsername(username: $username) {\r\n            id\r\n            username\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EMPLOYEES_ATTANDANCE_BY_RANGE = gql`\r\n    query employeesAttandanceByRange ($startDate: DateTime!, $endDate: DateTime!) {\r\n        employeesAttandanceByRange (startDate: $startDate, endDate: $endDate) {\r\n            id\r\n            isIn\r\n            isOut\r\n            timeIn\r\n            timeOut\r\n            user {\r\n                id\r\n                isTeacher\r\n                isEmployee\r\n                teacher {\r\n                    familyName\r\n                    name\r\n                    teacherCode\r\n                }\r\n                employee {\r\n                    familyName\r\n                    name\r\n                    employeeCode\r\n                }\r\n                groups {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_TEACHER_AND_EMPLOYESS = gql`\r\n    query allAttendaceEmployees {\r\n        allAttendaceEmployees {\r\n            username\r\n            email\r\n            isTeacher\r\n            isEmployee\r\n            teacher {\r\n                teacherCode\r\n                familyName\r\n                name\r\n            }\r\n            employee {\r\n                employeeCode\r\n                familyName\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EMPLOYEES_COMPARTMENT = gql`\r\n    query allEmployeesCompartment {\r\n        allEmployeesCompartment {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_EMPLOYEES = gql`\r\n    query allEmployees ($filter: String) {\r\n        allEmployees (filter: $filter) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n                groups {\r\n                    name\r\n                }\r\n            }\r\n            compartment {\r\n                id\r\n                name\r\n            }\r\n            employeeCode\r\n            familyName\r\n            name\r\n            registerNo\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            sex\r\n            birthdate\r\n            birthCity {\r\n                id\r\n            }\r\n            birthDistrict {\r\n                id\r\n            }\r\n            status {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_TEACHERS = gql`\r\n  \tquery allTeachers ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allTeachers (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            teacherCode\r\n            familyName\r\n            name\r\n            registerNo\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            joinDate\r\n            joinBefore\r\n            sex\r\n            birthdate\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_STUDENTS = gql`\r\n  \tquery allStudents ($filter: String, $program: Int, $classes: Int) {\r\n        allStudents (filter: $filter, program: $program, classes: $classes) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            studentCode\r\n            familyName\r\n            name\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            registerNo\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            joinDate\r\n            joinBefore\r\n            sex\r\n            birthdate\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            joinSchoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_CITYS = gql`\r\n  \tquery allCitys{\r\n        allCitys {\r\n            id\r\n            name\r\n            code\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_DISTRICTS = gql `\r\n    query allDistricts {\r\n        allDistricts {\r\n            id\r\n            code\r\n            name\r\n            cityID {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_PROGRAMS = gql`\r\n  \tquery allPrograms{\r\n        allPrograms {\r\n            id\r\n            program\r\n            programMgl\r\n            programNumeric\r\n            maxStudentNum\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            status\r\n            createdAt\r\n            updatedAt\r\n        }\r\n\t  }\r\n`;\r\n\r\nexport const ALL_SCHOOLS = gql`\r\n  \tquery allSchools {\r\n        allSchools {\r\n            id\r\n            name\r\n            nameMgl\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_SUB_SCHOOLS = gql`\r\n  \tquery allSubSchools{\r\n        allSubSchools {\r\n            id\r\n            name\r\n            nameMgl\r\n            school {\r\n                id\r\n                name\r\n            }\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql `\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_CLASSESS = gql `\r\n    query allClassess ($program: Int!, $offset: Int!, $limit: Int!, $filter: String) {\r\n        allClassess (program: $program, offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            classes\r\n            classesMgl\r\n            classesNumeric\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            maxStudentNum\r\n            teacher {\r\n                id\r\n                name\r\n                teacherCode\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            status\r\n            course\r\n            endCourse\r\n            sectionSet {\r\n                id\r\n                section\r\n                classes {\r\n                    id\r\n                    classes\r\n                }\r\n                program {\r\n                    id\r\n                    program\r\n                }\r\n                subSchool {\r\n                    id\r\n                    name\r\n                }\r\n                school {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const ALL_CLASSTIME = gql `\r\n    query allClasstimes {\r\n        allClasstimes {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\nexport const ALL_SCHOOL_YEAR = gql `\r\n    query allSchoolyears {\r\n        allSchoolyears {\r\n            id\r\n            schoolyear\r\n            season\r\n            semesterCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_PARENTS = gql `\r\n    query allParents ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allParents (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            user {\r\n                username\r\n                email\r\n            }\r\n            familyName\r\n            name\r\n            photo\r\n            profession\r\n            phone\r\n            address\r\n            addressLive\r\n            student {\r\n                id\r\n                studentCode\r\n                familyName\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTION_BY_CLASSES = gql `\r\n    query sectionsByClasses ($classes: Int!) {\r\n        sectionsByClasses (classes: $classes) {\r\n            id\r\n            section\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TRANSFER_BY_STUDENT = gql`\r\n    query transfersByStudent ($student: Int!) {\r\n        transfersByStudent (student: $student) {\r\n            id\r\n            student {\r\n                familyName\r\n                name\r\n                photo\r\n                studentCode\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            docDate\r\n            docNum\r\n            description\r\n            oldData\r\n        }\r\n    }\r\n`;  \r\n\r\nexport const ALL_EVENT_TYPES = gql`\r\n    query allEventTypes {\r\n        allEventTypes {\r\n            id\r\n            name\r\n            color\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EVENTS = gql `\r\n    query allEvents {\r\n        allEvents {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType {\r\n                id\r\n                name\r\n                color\r\n            }\r\n        }\r\n    } \r\n`;\r\n\r\nexport const ALL_EVENTS_BY_DATE = gql `\r\n    query allEventsByDate ($date: Date) {\r\n        allEventsByDate (date: $date) {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType {\r\n                id\r\n                name\r\n                color\r\n            }\r\n        }\r\n    } \r\n`;\r\n\r\nexport const ALL_EVENTS_BY_TYPE = gql`\r\n    query allEventsByType ($id: Int!) {\r\n        allEventsByType (id: $id) {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType\r\n        }\r\n    }\r\n`;","import { gql } from \"@apollo/client\";\r\n\r\nexport const ALL_DEGREES = gql`\r\n  \tquery allDegrees {\r\n        allDegrees {\r\n            id\r\n            name\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const CREATE_DEGREE = gql `\r\n    mutation createDegree($name: String) {\r\n      createDegree(name: $name) {\r\n        degree {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_DEGREE  = gql `\r\n    mutation updateDegree ($id: ID, $name: String) {\r\n        updateDegree (id: $id, name: $name) {\r\n            degree {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_DEGREE = gql `\r\n    mutation deleteDegree($id: ID!){\r\n        deleteDegree(id: $id){\r\n            degree{\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_ACTIVITY = gql`\r\n  \tquery allActivitys {\r\n        allActivitys {\r\n            id\r\n            name\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const CREATE_ACTIVITY = gql `\r\n    mutation createActivity($name: String) {\r\n      createActivity(name: $name) {\r\n        activity {\r\n          id\r\n          name\r\n        }\r\n      }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ACTIVITY  = gql `\r\n    mutation updateActivity ($id: ID, $name: String) {\r\n        updateActivity (id: $id, name: $name) {\r\n            activity {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ACTIVITY = gql `\r\n    mutation deleteActivity($id: ID!){\r\n        deleteActivity(id: $id){\r\n            activity{\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_STUDENT_STATUS = gql `\r\n    query allStudentStatuss {\r\n        allStudentStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_STUDENT_STATUS = gql `\r\n    mutation createStudentStatus($name: String) {\r\n        createStudentStatus(name: $name) {\r\n            studentStatus {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_STUDENT_STATUS = gql `\r\n    mutation updateStudentStatus ($id: ID, $name: String) {\r\n        updateStudentStatus (id: $id, name: $name) {\r\n            studentStatus {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_STUDENET_STATUS = gql `\r\n    mutation deleteStudentStatus ($id: ID) {\r\n        deleteStudentStatus (id: $id) {\r\n            studentStatus {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_STUDENT_STATUS_EXTRA = gql `\r\n    query allStudentStatusExtras {\r\n        allStudentStatusExtras {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_STUDENT_STATUS_EXTRA = gql `\r\n    mutation createStudentStatusExtra($name: String) {\r\n        createStudentStatusExtra(name: $name) {\r\n            studentStatusExtra {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_STUDENT_STATUS_EXTRA = gql `\r\n    mutation updateStudentStatusExtra ($id: ID, $name: String) {\r\n        updateStudentStatusExtra (id: $id, name: $name) {\r\n            studentStatusExtra {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_STUDENET_STATUS_EXTRA = gql `\r\n    mutation deleteStudentStatusExtra ($id: ID) {\r\n        deleteStudentStatusExtra (id: $id) {\r\n            studentStatusExtra {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nexport const ALL_TEACHER_STATUS = gql `\r\n    query allTeacherStatuss {\r\n        allTeacherStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_TEACHER_STATUS = gql `\r\n    mutation createTeacherStatus($name: String) {\r\n        createTeacherStatus(name: $name) {\r\n            teacherStatus {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_TEACHER_STATUS = gql `\r\n    mutation updateTeacherStatus ($id: ID, $name: String) {\r\n        updateTeacherStatus (id: $id, name: $name) {\r\n            teacherStatus {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_STEACHER_STATUS = gql `\r\n    mutation deleteTeacherStatus ($id: ID) {\r\n        deleteTeacherStatus (id: $id) {\r\n            teacherStatus {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_CLASSTIME = gql `\r\n    query allClasstimes {\r\n        allClasstimes {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_CLASSTIME = gql `\r\n    mutation createClasstime($name: String) {\r\n        createClasstime(name: $name) {\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_CLASSTIME = gql `\r\n    mutation updateClasstime ($id: ID, $name: String) {\r\n        updateClasstime (id: $id, name: $name) {\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_SCLASSTIME = gql `\r\n    mutation deleteClasstime ($id: ID) {\r\n        deleteClasstime (id: $id) {\r\n            classtime {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_ROUTINE = gql `\r\n    mutation createRoutine ($classes: Int, $endDate: Date, $program: Int, $room: String, $schoolyear: Int, $section: Int, $startDate: Date, \r\n                            $subject: Int, $teacher: Int, $time: Int, $type: String, $weekly: Int) {\r\n        createRoutine (classes: $classes, endDate: $endDate, program: $program, room: $room, schoolyear: $schoolyear, section: $section, \r\n                        startDate: $startDate, subject: $subject, teacher: $teacher, time: $time, type: $type, weekly: $weekly) {\r\n            routine {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_MENUS = gql `\r\n    query allMenus{\r\n        allMenus {\r\n            priority\r\n            key\r\n            path\r\n            title\r\n            icon\r\n            breadcrumb\r\n            subMenu\r\n            menuSet {\r\n                priority\r\n                key\r\n                path\r\n                title\r\n                icon\r\n                breadcrumb\r\n                subMenu\r\n            }\r\n        }\r\n    }\r\n`; \r\n\r\nexport const UPDATE_MENU = gql `\r\n    mutation updateMenu($breadcrumb: Boolean, $icon: String, $id: ID, $priority: Int, $status: String, $submenu: Int) {\r\n        updateMenu (breadcrumb: $breadcrumb, icon: $icon, id: $id, priority: $priority, status: $status, submenu: $submenu) {\r\n            menu {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SCHOOLYEAR = gql `\r\n    query allSchoolyears {\r\n        allSchoolyears {\r\n            id\r\n            schoolyear\r\n            season\r\n            semesterCode\r\n            startDate\r\n            endDate\r\n            isCurrent\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SCHOOLYEAR = gql `\r\n    mutation createSchoolyear ($endDate: String, $schoolyear: String, $season: String, $semesterCode: String, $startDate: String, $isCurrent: Boolean) {\r\n        createSchoolyear (endDate: $endDate, schoolyear: $schoolyear, season: $season, semesterCode: $semesterCode, startDate: $startDate, isCurrent: $isCurrent) {\r\n            schoolyear {\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_SCHOOLYEAR = gql `\r\n    mutation updateSchoolyear ($endDate: String, $id: ID, $schoolyear: String, $season: String, $semesterCode: String, $startDate: String, $isCurrent: Boolean) {\r\n        updateSchoolyear (endDate: $endDate, id: $id, schoolyear: $schoolyear, season: $season, semesterCode: $semesterCode, startDate: $startDate, isCurrent: $isCurrent) {\r\n            schoolyear {\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_SCHOOLYEAR = gql `\r\n    mutation deleteSchoolyear ($id: ID) {\r\n        deleteSchoolyear (id: $id) {\r\n            schoolyear {\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n            classesNumeric\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql `\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject \r\n            subjectCode\r\n            credit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n            programNumeric\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client'\r\n\r\nexport const UPDATE_SUBJECT = gql `\r\n    mutation updateSubject ($credit: String, $part: String, $id: ID, $school: Int, $subSchool: Int, $subject: String, $subjectCode: String, $subjectMgl: String) {\r\n        updateSubject (credit: $credit id: $id, part: $part, school: $school, subSchool: $subSchool, subject: $subject, subjectCode: $subjectCode, subjectMgl: $subjectMgl) {\r\n            subject {\r\n                subject\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_SCHOOL = gql `\r\n    mutation updateSchool($id: ID, $name: String, $nameMgl: String){\r\n        updateSchool (id: $id, name: $name, nameMgl: $nameMgl){\r\n            school {\r\n                name\r\n                nameMgl\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_SUB_SCHOOL = gql `\r\n    mutation updateSubSchool($id: ID, $name: String, $nameMgl: String, $school: Int) {\r\n        updateSubSchool (id: $id, name: $name, nameMgl: $nameMgl, school: $school) {\r\n            subSchool {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_PROGRAM = gql `\r\n    mutation updateProgram ($id: ID, $program: String, $programMgl: String, $programNumeric: String, $status: String, $maxStudentNum: Int, $degree: Int, \r\n                            $school: Int, $subSchool: Int) {\r\n        updateProgram (id: $id, program: $program, programMgl: $programMgl, programNumeric: $programNumeric, status: $status, maxStudentNum: $maxStudentNum, \r\n                        degree: $degree, school: $school, subSchool: $subSchool) {\r\n            program {\r\n                program\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_CLASSES = gql `\r\n    mutation updateClasses($id: ID, $activity: Int, $classes: String, $classesMgl: String, $classesNumeric: String, $course: String, $degree: Int, $endCourse: String,\r\n                          $maxStudentNum: Int, $program: Int, $school: Int, $status: String, $subSchool: Int, $teacher: Int) {\r\n        updateClasses(id: $id, activity: $activity, classes: $classes, classesMgl: $classesMgl, classesNumeric: $classesNumeric, course: $course, degree: $degree,\r\n                    endCourse: $endCourse, maxStudentNum: $maxStudentNum, program: $program, school: $school, status: $status, subSchool: $subSchool, teacher: $teacher) {\r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_SECTION = gql `\r\n    mutation updateSection($id: ID, $classes: Int, $program: Int, $school: Int, $subSchool: Int, $section: String) {\r\n        updateSection (id: $id, classes: $classes, program: $program, school: $school, subSchool: $subSchool, section: $section) {\r\n            section {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_TEACHER = gql `\r\n    mutation updateTeacher ($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, \r\n                            $familyName: String, $id: ID!, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String, $registerNo: String, \r\n                            $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String, $username: String, $email: String) {\r\n        updateTeacher (address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate,\r\n                        familyName: $familyName, id: $id, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \r\n                        registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \r\n                        teacherCode: $teacherCode, username: $username, email: $email) {\r\n            teacher {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_EMPLOYEES = gql `\r\n    mutation updateEmployee ($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $employeeCode: String, $sex: String, $status: Int, \r\n                             $familyName: String, $group: Int, $id: Int, $name: String, $phone: String, $phone2: String, $registerNo: String, $compartment: Int,\r\n                             $username: String, $email: String) {\r\n        updateEmployee (address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, employeeCode: $employeeCode, sex: $sex, status: $status,\r\n                        familyName: $familyName, group: $group, id: $id, name: $name, phone: $phone, phone2: $phone2, registerNo: $registerNo, compartment: $compartment,\r\n                        username: $username, email: $email) {\r\n                            employee{\r\n                                id\r\n                            }\r\n                        }\r\n                    }\r\n`\r\n\r\nexport const UPDATE_PARENT = gql `\r\n    mutation updateParent ($address: String, $addressLive: String, $familyName: String, $id: ID, $name: String, $phone: String, $profession: String, $student: Int) {\r\n        updateParent (address: $address, addressLive: $addressLive, familyName: $familyName, id: $id, name: $name, phone: $phone, profession: $profession, student: $student) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TRANSFER_STUDENT = gql `\r\n    mutation transferStudent ($activity: Int, $classes: Int, $classtime: Int, $description: String, $docDate: String, $docNum: String, $program: Int, $school: Int, \r\n                                $section: Int, $status: Int, $statusExtra: Int, $student: Int) {\r\n        transferStudent (activity: $activity, classes: $classes, classtime: $classtime, description: $description, docDate: $docDate, docNum: $docNum, program: $program, \r\n                        school: $school, section: $section, status: $status, statusExtra: $statusExtra, student: $student) {\r\n            transfer {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_STUDENT = gql `\r\n    mutation updateStudent (\r\n        $address: String\r\n        $birthCity: Int\r\n        $birthDistrict: Int\r\n        $birthdate: String\r\n        $degree: Int\r\n        $email: String\r\n        $familyName: String\r\n        $id: ID\r\n        $joinBefore: String\r\n        $joinDate: String\r\n        $joinSchoolyear: String\r\n        $name: String\r\n        $phone: String\r\n        $phone2: String\r\n        $registerNo: String\r\n        $sex: String\r\n        $studentCode: String\r\n        $username: String\r\n    ) {\r\n        updateStudent (\r\n            address: $address\r\n            birthCity: $birthCity\r\n            birthDistrict: $birthDistrict\r\n            birthdate: $birthdate\r\n            degree: $degree\r\n            email: $email\r\n            familyName: $familyName\r\n            id: $id\r\n            joinBefore: $joinBefore\r\n            joinDate: $joinDate\r\n            joinSchoolyear: $joinSchoolyear\r\n            name: $name\r\n            phone: $phone\r\n            phone2: $phone2\r\n            registerNo: $registerNo\r\n            sex: $sex\r\n            studentCode: $studentCode\r\n            username: $username\r\n        ) {\r\n            student {\r\n                id\r\n            }\r\n        }    \r\n    }\r\n`;\r\n\r\nexport const UPDATE_EVENT_TYPE = gql `\r\n    mutation updateEventType ($color: String, $id: ID, $name: String) {\r\n        updateEventType (color: $color, id: $id, name: $name) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_EVENT = gql `\r\n    mutation updateEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $id: ID, $startAt: String, $title: String) {\r\n        updateEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, id: $id, startAt: $startAt, title: $title) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport { Button, Col, DatePicker, Form, Input, message, Row, Select, Spin } from 'antd';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { ALL_CLASSTIME, ALL_SCHOOLS, ALL_PROGRAMS, ALL_STUDENTS, TRANSFER_BY_STUDENT } from 'graphql/all';\r\nimport { TRANSFER_STUDENT } from 'graphql/update';\r\nimport { SECTION_BY_CLASSES } from 'graphql/all';\r\nimport { ALL_STUDENT_STATUS, ALL_STUDENT_STATUS_EXTRA, ALL_ACTIVITY } from 'graphql/core';\r\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\r\nimport { SELECT_CLASSES } from 'graphql/select';\r\n\r\nconst { Option } = Select;\r\nconst { TextArea } = Input;\r\n\r\nconst TransferForm = ({student}) => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const { data: schoolData, loading: schoolLoading } = useQuery(ALL_SCHOOLS);\r\n    const { data: programData, loading: programLoading } = useQuery(ALL_PROGRAMS);\r\n    const { data: classtimeData, loading: classtimeLoading } = useQuery(ALL_CLASSTIME);\r\n    const { data: statusData, loading: statusLoading } = useQuery(ALL_STUDENT_STATUS);\r\n    const { data: activityData, loading: activityLoading } = useQuery(ALL_ACTIVITY);\r\n    const { data: statusExtraData, loading: statusExtraLoading } = useQuery(ALL_STUDENT_STATUS_EXTRA);\r\n    const [fetchClasses, { data: classesData, loading: classesLoading }] = useLazyQuery(SELECT_CLASSES);\r\n    const [fetchSections, { data: sectionsData, sectionsLoading }] = useLazyQuery(SECTION_BY_CLASSES);\r\n\r\n    const [update, { loading: updateLoading }] = useMutation(TRANSFER_STUDENT, {\r\n        refetchQueries: [\r\n            {\r\n                query: ALL_STUDENTS\r\n            },\r\n            {\r\n                query: TRANSFER_BY_STUDENT,\r\n                variables: { student:  student.id }\r\n            }\r\n        ],\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            form.resetFields();\r\n\t\t}\r\n    })\r\n\r\n    const onFinish = values => {\r\n        values.student = student.id\r\n        update({ variables: values })\r\n    };\r\n\r\n    return (\r\n        <Spin \r\n            spinning={\r\n                schoolLoading || \r\n                programLoading || \r\n                classtimeLoading || \r\n                classesLoading || \r\n                sectionsLoading || \r\n                statusLoading || \r\n                statusExtraLoading ||\r\n                activityLoading ||\r\n                updateLoading\r\n            } \r\n            tip=\"Ачааллаж байна...\"\r\n        >\r\n            <Form  \r\n                id=\"TransferForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"transfer\" \r\n                onFinish={onFinish}\r\n            >\r\n                <Row gutter={24}>\r\n                    <Col span={24}>\r\n                        <Form.Item name=\"school\" label={<IntlMessage id=\"school\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                { schoolData?.allSchools.map((school, index) => (\r\n                                    <Option value={school.id} key={index} >{school.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"program\" label={<IntlMessage id=\"program\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select\r\n                                onChange={(e) => fetchClasses({ variables: { program: e, offset: 0, limit: 0, filter: '', } })}\r\n                            >\r\n                                { programData?.allPrograms.map((program, index) => (\r\n                                    <Option value={program.id} key={index} >{program.program}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"classes\" label={<IntlMessage id=\"classes\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select\r\n                                onChange={(e) => fetchSections({ variables: { classes: e } })}\r\n                            >\r\n                                { classesData?.allClassess.map((classes, index) => (\r\n                                    <Option key={index} value={classes.id} >{classes.classes}</Option>\r\n                                ))}\r\n                                <Option>aa</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"section\" label={<IntlMessage id=\"section\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                { sectionsData?.sectionsByClasses.map((section, index) => (\r\n                                    <Option key={index} value={section.id} >{section.section}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"classtime\" label={<IntlMessage id=\"classtime\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                { classtimeData?.allClasstimes.map((classtime, index) => (\r\n                                    <Option value={classtime.id} key={index} >{classtime.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"activity\" label={<IntlMessage id=\"activity\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                { activityData?.allActivitys.map((activity, index) => (\r\n                                    <Option value={activity.id} key={index} >{activity.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"docNum\" label={<IntlMessage id=\"docNum\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"docDate\" label={<IntlMessage id=\"docDate\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <DatePicker style={{ width: \"100%\" }} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"description\" label={<IntlMessage id=\"description\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <TextArea rows={4} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"status\" label={<IntlMessage id=\"status\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                { statusData?.allStudentStatuss.map((status, index) => (\r\n                                    <Option value={status.id} key={index} >{status.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"statusExtra\" label={<IntlMessage id=\"student-status-extra\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                { statusExtraData?.allStudentStatusExtras.map((statusExtra, index) => (\r\n                                    <Option value={statusExtra.id} key={index} >{statusExtra.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col span={24} style={{ textAlign: 'right' }}>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            <IntlMessage id=\"main.okText\" />\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default TransferForm","import React, { useState } from 'react'\r\nimport { Card, Table, Input, Descriptions, Row, Col, Image, Space, Button } from 'antd';\r\nimport { SearchOutlined, RollbackOutlined } from '@ant-design/icons';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport utils from 'utils'\r\nimport TransferForm from './form';\r\nimport IntlMessage from \"components/util-components/IntlMessage\";\r\nimport { BASE_SERVER_URL } from 'configs/AppConfig';\r\nimport { useHistory } from 'react-router-dom';\r\nimport moment from 'moment';\r\n\r\nfunction  AllSchoolTable ({ data, student }) {\r\n    \r\n\tconst [list, setList] = useState(data)\r\n    \r\n    const history = useHistory();\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'school',\r\n\t\t\ttitle: <IntlMessage id=\"school\" />,\r\n\t\t\tdataIndex: ['school', 'name'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'school')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'program',\r\n\t\t\ttitle: <IntlMessage id=\"program\" />,\r\n\t\t\tdataIndex: ['program', 'program'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'program')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'description',\r\n            title: <IntlMessage id=\"description\" />,\r\n            dataIndex: 'description', \r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'description')\r\n\t\t},\r\n        {\r\n\t\t\tkey: 'docDate',\r\n            title: <IntlMessage id=\"docDate\" />,\r\n            dataIndex: 'docDate', \r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'docDate'),\r\n            render: text => <span>{moment(text).format('YYYY-MM-DD')}</span>\r\n        },\r\n\t\t{\r\n\t\t\tkey: 'status',\r\n\t\t\ttitle: <IntlMessage id=\"status\" />,\r\n\t\t\tdataIndex: ['status', 'name'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'status')\r\n\t\t},\r\n\t];\r\n\r\n\tconst onSearch = e => {\r\n\t\tconst value = e.currentTarget.value\r\n\t\tconst searchArray = e.currentTarget.value? list : data\r\n\t\tconst datas = utils.wildCardSearch(searchArray, value)\r\n\t\tsetList(datas)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n                <Flex mobileFlex={false}>\r\n                    <div className='text-right' >\r\n                        <Button onClick={() => history.goBack()} type=\"default\" icon={<RollbackOutlined />} block> <IntlMessage id=\"back\" /></Button>\r\n                    </div>\r\n                </Flex>\r\n            </Flex>\r\n            <Row gutter={[16, 16]} className='mt-4'>\r\n                <Col xs={24} sm={24} md={24} lg={12} xl={12} >\r\n                    <Card\r\n                        title={<IntlMessage id=\"transfer-student\" />}\r\n                    >\r\n                        <TransferForm student={student} />\r\n                    </Card>\r\n                </Col>\r\n                <Col xs={24} sm={24} md={24} lg={12} xl={12} >\r\n                    <Card\r\n                        title={<IntlMessage id=\"student-information\" />}\r\n                    >\r\n                        <Row>\r\n                            <Col xs={24} sm={6} md={6} lg={6} xl={6}>\r\n                                <Space direction=\"horizontal\" style={{width: '100%', justifyContent: 'center'}}>\r\n                                    <Image preview={false} alt={student.photo} src={BASE_SERVER_URL+student.photo} />\r\n                                </Space>\r\n                            </Col>\r\n                            <Col xs={24} sm={18} md={18} lg={18} xl={18}>\r\n                                <Descriptions layout=\"vertical\" bordered >\r\n                                    <Descriptions.Item label={<IntlMessage id=\"familyName\" />}>\r\n                                        {student.familyName}\r\n                                    </Descriptions.Item>\r\n                                    <Descriptions.Item label={<IntlMessage id=\"name\" />}>\r\n                                        {student.name}\r\n                                    </Descriptions.Item>\r\n                                    <Descriptions.Item label={<IntlMessage id=\"studentCode\" />}>\r\n                                        {student.studentCode}\r\n                                    </Descriptions.Item>\r\n                                </Descriptions>\r\n                            </Col>\r\n                        </Row>\r\n                    </Card>\r\n                    <Card    \r\n                        title={<IntlMessage id=\"transfer-history\" />}\r\n                    >\r\n                        <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n                            <Flex className=\"mb-1\" mobileFlex={false}>\r\n                                <div className=\"mr-md-3 mb-3\">\r\n                                    <Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n                                </div>\r\n                            </Flex>\r\n                        </Flex>\r\n                        <div className=\"table-responsive\">\r\n                            <Table \r\n                                columns={tableColumns} \r\n                                pagination={false}\r\n                                size=\"small\"\r\n                                dataSource={list}\r\n                                rowKey='id'  \r\n                                bordered\r\n                            />\r\n                        </div>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n\t\t</>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default AllSchoolTable\r\n","import React from \"react\";\r\nimport AllSchoolTable from './table';\r\nimport Loading from \"components/shared-components/Loading\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { TRANSFER_BY_STUDENT } from \"graphql/all\";\r\n\r\nconst Index = (props) => {\r\n\r\n    const { data, error, loading } = useQuery(TRANSFER_BY_STUDENT, {\r\n        variables: { student: props.location.state?.student.id },\r\n    })\r\n\r\n    if (error) {\r\n        return null\r\n    }\r\n\r\n    if (loading) {\r\n        return (<Loading cover=\"content\" />)\r\n    }\r\n\r\n    return (\r\n        <AllSchoolTable title={props.title} student={props.location.state.student} data={data.transfersByStudent} />\r\n    )\r\n}\r\n\r\nexport default Index;\r\n"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","ALL_SUBJECTS","gql","ALL_USERS","ALL_EMPLOYEES_ATTANDANCE_BY_RANGE","ALL_EMPLOYEES_COMPARTMENT","ALL_EMPLOYEES","ALL_TEACHERS","ALL_STUDENTS","ALL_CITYS","ALL_DISTRICTS","ALL_PROGRAMS","ALL_SCHOOLS","ALL_SUB_SCHOOLS","ALL_SECTIONS","ALL_CLASSESS","ALL_CLASSTIME","ALL_SCHOOL_YEAR","ALL_PARENTS","SECTION_BY_CLASSES","TRANSFER_BY_STUDENT","ALL_EVENT_TYPES","ALL_EVENTS","ALL_EVENTS_BY_DATE","ALL_DEGREES","CREATE_DEGREE","UPDATE_DEGREE","DELETE_DEGREE","ALL_ACTIVITY","CREATE_ACTIVITY","UPDATE_ACTIVITY","DELETE_ACTIVITY","ALL_STUDENT_STATUS","CREATE_STUDENT_STATUS","UPDATE_STUDENT_STATUS","DELETE_STUDENET_STATUS","ALL_STUDENT_STATUS_EXTRA","CREATE_STUDENT_STATUS_EXTRA","UPDATE_STUDENT_STATUS_EXTRA","DELETE_STUDENET_STATUS_EXTRA","ALL_TEACHER_STATUS","CREATE_TEACHER_STATUS","UPDATE_TEACHER_STATUS","DELETE_STEACHER_STATUS","CREATE_CLASSTIME","UPDATE_CLASSTIME","DELETE_SCLASSTIME","CREATE_ROUTINE","ALL_SCHOOLYEAR","CREATE_SCHOOLYEAR","UPDATE_SCHOOLYEAR","DELETE_SCHOOLYEAR","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","UPDATE_SUBJECT","UPDATE_SCHOOL","UPDATE_SUB_SCHOOL","UPDATE_PROGRAM","UPDATE_CLASSES","UPDATE_SECTION","UPDATE_TEACHER","UPDATE_EMPLOYEES","UPDATE_PARENT","TRANSFER_STUDENT","UPDATE_STUDENT","UPDATE_EVENT_TYPE","UPDATE_EVENT","Option","Select","TextArea","Input","student","Form","form","useQuery","schoolData","data","schoolLoading","loading","programData","programLoading","classtimeData","classtimeLoading","statusData","statusLoading","activityData","activityLoading","statusExtraData","statusExtraLoading","useLazyQuery","fetchClasses","classesData","classesLoading","fetchSections","sectionsData","sectionsLoading","useMutation","refetchQueries","query","variables","id","onCompleted","message","resetFields","update","updateLoading","spinning","tip","layout","name","onFinish","values","gutter","span","label","IntlMessage","rules","required","allSchools","map","school","index","value","onChange","e","program","offset","limit","filter","allPrograms","classes","allClassess","sectionsByClasses","section","allClasstimes","classtime","allActivitys","activity","style","width","rows","allStudentStatuss","status","allStudentStatusExtras","statusExtra","textAlign","type","htmlType","useState","list","setList","history","useHistory","tableColumns","key","title","dataIndex","sorter","a","b","utils","render","text","moment","format","onClick","goBack","icon","RollbackOutlined","block","xs","sm","md","lg","xl","direction","preview","alt","photo","src","BASE_SERVER_URL","bordered","familyName","studentCode","placeholder","prefix","SearchOutlined","currentTarget","searchArray","datas","onSearch","columns","pagination","size","dataSource","rowKey","location","state","error","Loading","cover","transfersByStudent"],"sourceRoot":""}