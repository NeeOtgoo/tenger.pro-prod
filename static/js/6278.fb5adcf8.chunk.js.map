{"version":3,"file":"static/js/6278.fb5adcf8.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/select.js","graphql/test.js","views/app-views/online-test-library/form.js","views/app-views/online-test-library/table.js","views/app-views/online-test-library/index.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n            classesNumeric\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql `\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject \r\n            subjectCode\r\n            credit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n            programNumeric\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;","import { gql } from \"@apollo/client\";\r\n\r\nexport const ALL_ONLINE_TESTS = gql `\r\n    query allOnlineTests {\r\n        allOnlineTests {\r\n            id\r\n            title\r\n            description\r\n            subject {\r\n                id\r\n                subject\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_ONLINE_TEST = gql `\r\n    mutation createOnlineTest ($description: String, $subject: Int, $title: String) {\r\n        createOnlineTest (description: $description, subject: $subject, title: $title) {\r\n            onlineTest {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ONLINE_TEST = gql `\r\n    mutation updateOnlineTest ($description: String, $id: ID, $subject: Int, $title: String) {\r\n        updateOnlineTest (description: $description, id: $id, subject: $subject, title: $title) {\r\n            OnlineTest {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ONLINE_TEST = gql `\r\n    mutation deleteOnlineTest ($id: ID) {\r\n        deleteOnlineTest (id: $id) {\r\n            onlineTest {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_QUESTION_LEVELS = gql `\r\n    query allQuestionLevels {\r\n        allQuestionLevels {\r\n            level\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_QUESTION_LEVEL = gql `\r\n    mutation createQuestionLevel ($level: String) {\r\n        createQuestionLevel (level: $level) {\r\n            questionLevel {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_QUESTION_LEVEL = gql `\r\n    mutation updateQuestionLevel ($level: String, $id: ID) {\r\n        updateQuestionLevel (level: $level, id: $id) {\r\n            questionLevel {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_QUESTION_LEVEL = gql `\r\n    mutation deleteQuestionLevel ($id: ID) {\r\n        deleteQuestionLevel (id: $id) {\r\n            questionLevel {\r\n                level\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_QUESTIONS_BY_TEST = gql `\r\n    query allQuestionsByTest ($id: Int!) {\r\n        allQuestionsByTest (id: $id) {\r\n            id\r\n            question\r\n            hint\r\n            image\r\n            answerType\r\n            questionLevel {\r\n                id\r\n                level\r\n            }\r\n            questionChoiceSet {\r\n                id\r\n                answer\r\n                score\r\n            }\r\n        }\r\n    }\r\n`; \r\n\r\nexport const CREATE_QUESTION = gql `\r\n    mutation createQuestion ($answerType: String, $image: Upload, $onlineTest: Int, $questionLevel: Int) {\r\n        createQuestion (answerType: $answerType, hint: \"\", image: $image, onlineTest: $onlineTest, questionL: \"Асуулт\", questionLevel: $questionLevel) {\r\n            question {\r\n                id\r\n                answerType\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_QUESTION = gql `\r\n    mutation updateQuestion ($answerType: String, $hint: String, $image: Upload, $onlineTest: Int, $questionL: String, $questionLevel: Int, $id: ID) {\r\n        updateQuestion (answerType: $answerType, hint: $hint, image: $image, onlineTest: $onlineTest, questionL: $questionL, questionLevel: $questionLevel, id: $id) {\r\n            question {\r\n                id\r\n                answerType\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_QUESTION = gql `\r\n    mutation deleteQuestion ($id: ID) {\r\n        deleteQuestion (id: $id) {\r\n            question {\r\n                question\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_QUESTION_CHOICE = gql `\r\n    mutation createQuestionChoice ($answer: String, $question: Int, $score: Decimal) {\r\n        createQuestionChoice (answer: $answer, question: $question, score: $score) {\r\n            questionChoice {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_QUESTION_CHOICE = gql `\r\n    mutation updateQuestionChoice ($answer: String, $question: Int, $score: Decimal, $id: ID) {\r\n        updateQuestionChoice (answer: $answer, question: $question, score: $score, id: $id) {\r\n            questionChoice {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_QUESTION_CHOICE = gql `\r\n    mutation deleteQuestionChoice ($id: ID) {\r\n        deleteQuestionChoice (id: $id) {\r\n            questionChoice {\r\n                score\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_TAKE_TEST = gql `\r\n    query allTakeTests {\r\n        allTakeTests {\r\n            id\r\n            title\r\n            description\r\n            startAt\r\n            endAt\r\n            duration\r\n            status\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_TAKE_TEST = gql `\r\n    mutation createTakeTest ($duration: Int, $endAt: String, $startAt: String, $status: String, $description: String, $title: String) {\r\n        createTakeTest (duration: $duration, endAt: $endAt, startAt: $startAt, status: $status, description: $description, title: $title) {\r\n            takeTest {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_TAKE_TEST = gql `\r\n    mutation updateTakeTest ($duration: Int, $endAt: String, $startAt: String, $status: String, $id: ID, $description: String, $title: String) {\r\n        updateTakeTest (duration: $duration, endAt: $endAt, startAt: $startAt, status: $status, id: $id, description: $description, title: $title) {\r\n            takeTest {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_TAKE_TEST = gql `\r\n    mutation deleteTakeTest ($id: ID) {\r\n        deleteTakeTest (id: $id) {\r\n            takeTest {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_PARTICIPANT_BY_TEST = gql `\r\n    query allParticipantByTest ($takeTest: Int!) {\r\n        allParticipantByTest (takeTest: $takeTest) {\r\n            id\r\n            student {\r\n                studentCode\r\n                familyName\r\n                name\r\n            }\r\n            started\r\n            completed\r\n            answerSet {\r\n                answerType\r\n                questionText\r\n                choices\r\n                score\r\n                givenAnswer\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_PARTICIPANT = gql `\r\n    mutation createParticipant ($section: Int = 0, $studentCode: String = \"\", $takeTest: Int) {\r\n        createParticipant (section: $section, studentCode: $studentCode, takeTest: $takeTest) {\r\n            participant {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_PARTICIPANT = gql `\r\n    mutation deleteParticipant ($id: ID, $takeTest: Int) {\r\n        deleteParticipant (id: $id, takeTest: $takeTest) {\r\n            participant {\r\n                started\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_TAKE_LEVEL = gql `\r\n    query allTakeLevelByTest ($takeTest: Int!) {\r\n        allTakeLevelByTest (takeTest: $takeTest) {\r\n            id\r\n            onlineTest {\r\n                id\r\n                title\r\n            }\r\n            questionLevel {\r\n                id\r\n                level\r\n            }\r\n            takeNumber\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_TAKE_LEVEL = gql `\r\n    mutation createTakeLevel ($onlineTest: Int, $questionLevel: Int, $takeNumber: Int, $takeTest: Int) {\r\n        createTakeLevel (onlineTest: $onlineTest, questionLevel: $questionLevel, takeNumber: $takeNumber, takeTest: $takeTest) {\r\n            takeLevel {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_TAKE_LEVEL = gql `\r\n    mutation deleteTakeLevel ($id: ID) {\r\n        deleteTakeLevel (id: $id) {\r\n            takeLevel {\r\n                takeNumber\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql `\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n            studentSet {\r\n                id\r\n                studentCode\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const START_TEST = gql `\r\n    query startTest ($takeTest: Int!) {\r\n        startTest (takeTest: $takeTest) {\r\n            id\r\n            questionText\r\n            choices\r\n            answerType\r\n            givenAnswer\r\n            question {\r\n                hint\r\n                image\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ANSWER = gql `\r\n    mutation updateAnswer ($givenAnswer: String, $id: ID) {\r\n        updateAnswer (givenAnswer: $givenAnswer, id: $id) {\r\n            answer {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TEST_TIME = gql `\r\n    query testTime ($takeTest: Int!) {\r\n        testTime (takeTest: $takeTest) {\r\n            duration\r\n            started\r\n            endAt\r\n        }\r\n    }\r\n`;\r\n\r\nexport const FINISH_TEST = gql `\r\n    query finishTest ($takeTest: Int!) {\r\n        finishTest (takeTest: $takeTest) {\r\n            score\r\n        }\r\n    }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, message, Spin, Select, Empty } from 'antd';\r\nimport { useLazyQuery, useMutation } from '@apollo/client';\r\nimport { ALL_ONLINE_TESTS, UPDATE_ONLINE_TEST, CREATE_ONLINE_TEST } from 'graphql/test';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { SELECT_SUBJECT } from 'graphql/select';\r\nimport Loading from 'components/shared-components/Loading';\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nfunction TestForm ({editData, formType, setIsModalVisible}) {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [subjects, setSubjects] = useState([]);\r\n    const [fetchSubject, { loading: loadingSubject }] = useLazyQuery(SELECT_SUBJECT, {\r\n        onCompleted: data => {\r\n            setSubjects(data.allSubjects);\r\n        }\r\n    });\r\n\r\n    const [create, { loading: createLoading }] = useMutation(CREATE_ONLINE_TEST, {\r\n        refetchQueries: [ALL_ONLINE_TESTS],\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n\t\t}\r\n\t});\r\n\r\n    const [update, { loading: updateLoading }] = useMutation(UPDATE_ONLINE_TEST, {\r\n        refetchQueries: [ALL_ONLINE_TESTS],\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(formType === \"edit\") {\r\n            const newData ={\r\n\t\t\t\ttitle: editData.title,\r\n\t\t\t\tdescription: editData.description,\r\n\t\t\t\tsubject: editData.subject.id,\r\n\t\t\t}\r\n            fetchSubject({ variables: { offset: 0, limit: 99999999, filter: editData.subject.subject } });\r\n            form.setFieldsValue(newData);\r\n        } else if(formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [editData, fetchSubject, form, formType]);\r\n    \r\n    const onSubjectSearch = value => {\r\n        if (value === '') {\r\n            setSubjects([]);\r\n        } else {\r\n            fetchSubject({ variables: { offset: 0, limit: 99999999, filter: value } });\r\n        }\r\n    }\r\n\r\n    const onFinish = values => {\r\n        if (formType === \"edit\") {\r\n            values.id = editData.id\r\n            update({ variables: values})\r\n        } else {\r\n            create({ variables: values })\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\r\n            <Form  \r\n                id=\"TestForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"school\" \r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item name=\"title\" label={<IntlMessage id=\"name\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Input/>\r\n                </Form.Item>\r\n                <Form.Item name=\"description\" label={<IntlMessage id=\"description\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <TextArea rows={4} />\r\n                </Form.Item>\r\n                <Form.Item name={'subject'} label={<IntlMessage id=\"subject\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n                    <Select\r\n                        showSearch\r\n                        filterOption={false}\r\n                        notFoundContent={\r\n                            loadingSubject ? <Loading cover='content' /> \r\n                            : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                        }\r\n                        onSearch={onSubjectSearch}\r\n                    >\r\n                        { subjects.map((item, index) => (\r\n                            <Option value={item.id} key={index} > {item.subject} {`(${Math.floor(item.credit)})`} / {item.subjectCode} </Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default TestForm","import React, { useState, useEffect } from 'react'\r\nimport { Card, Table, Input, Spin, Empty, Modal, message, Button } from 'antd';\r\nimport { DeleteTwoTone, SearchOutlined, EditTwoTone, PlusCircleOutlined, SnippetsTwoTone, RollbackOutlined } from '@ant-design/icons';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport utils from 'utils'\r\nimport TestForm from './form'\r\nimport { APP_PREFIX_PATH } from 'configs/AppConfig';\r\nimport { ALL_ONLINE_TESTS, DELETE_ONLINE_TEST } from 'graphql/test';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\n\r\nfunction  TestLibTable (props) {\r\n\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\tconst [editData, setEditData] = useState([]);\r\n\tconst [formType, setFormType] = useState(\"\");\r\n\tconst [list, setList] = useState([]);\r\n    const history = useHistory();\r\n\r\n\tconst { loading, data, refetch } = useQuery(ALL_ONLINE_TESTS, {\r\n\t});\r\n\r\n    useEffect(() => {\r\n        if(loading === false && data){\r\n            setList(data.allOnlineTests);\r\n        }\r\n    }, [loading, data])\r\n\r\n    const showModal = () => {\r\n\t\tsetFormType(\"create\")\r\n      \tsetIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n      \tsetIsModalVisible(false);\r\n    };\r\n\r\n\tconst editRow = row => {\r\n\t\tsetEditData(row);\r\n\t\tsetFormType(\"edit\")\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n\tconst addQuestion = value => {\r\n\t\thistory.push(`${APP_PREFIX_PATH}/online-test-library/${value}`);\r\n\t}\r\n\r\n\tconst { confirm } = Modal;\r\n\r\n\tconst [destroy, { loading: loadingDelete }] = useMutation(DELETE_ONLINE_TEST, {\r\n\t\tonCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\t\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n\t\t  title: 'Устгах уу?',\r\n\t\t  okText: 'Устгах',\r\n\t\t  okType: 'danger',\r\n\t\t  cancelText: 'Болих',\r\n\t\t  onOk() {\r\n\t\t\tdestroy({ variables: { id: row.id } }); \r\n\t\t  },\r\n\t\t});\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'title',\r\n\t\t\ttitle: <IntlMessage id=\"name\" />,\r\n\t\t\tdataIndex: 'title',\r\n\t\t\twidth: '20vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'title')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'subject',\r\n\t\t\ttitle: <IntlMessage id=\"subject\" />,\r\n\t\t\tdataIndex: ['subject', 'subject'],\r\n\t\t\twidth: '10vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subject')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'description',\r\n            title: <IntlMessage id=\"description\" />,\r\n            dataIndex: 'description',\r\n\t\t\twidth: '35vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'description')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'actions',\r\n\t\t\ttitle: <IntlMessage id=\"main.action\" />,\r\n\t\t\twidth: '20vw',\r\n\t\t\tdataIndex: 'actions',\r\n\t\t\trender: (_, elm) => (\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t{ props.permissions.add_question === true &&\r\n\t\t\t\t\t\t<Button size=\"small\" onClick={() => addQuestion(elm.id)} type=\"text\" icon={<SnippetsTwoTone twoToneColor=\"#acdf87\"/>} > <IntlMessage id=\"add-question\" /></Button>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{ props.permissions.edit === true &&\r\n\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /></Button>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{ props.permissions.destroy === true &&\r\n\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /></Button>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t];\r\n\r\n\tconst onSearch = e => {\r\n\t\tconst value = e.currentTarget.value\r\n\t\tconst searchArray = e.currentTarget.value? list : data.allOnlineTests\r\n\t\tconst datas = utils.wildCardSearch(searchArray, value)\r\n\t\tsetList(datas)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Link\r\n\t\t\t\tto=\"take-test\"\r\n\t\t\t>\r\n\t\t\t\t<Button type=\"default\" icon={<RollbackOutlined />}> {<IntlMessage id=\"back\" />}</Button>\r\n\t\t\t</Link>\r\n\t\t\t<Modal \r\n\t\t\t\tforceRender\r\n                title={formType === 'edit' ? <IntlMessage id=\"edit\" /> : <IntlMessage id=\"add_new\" /> }\r\n                visible={isModalVisible} \r\n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\r\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tokButtonProps={{form:'TestForm', key: 'submit', htmlType: 'submit'}}\r\n            >\r\n                <TestForm formType={formType} setIsModalVisible={setIsModalVisible} editData={editData}/>\r\n            </Modal>\r\n\t\t\t<Card\r\n\t\t\t\tclassName='mt-4'\r\n\t\t\t>\r\n\t\t\t\t<Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n\t\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Flex>\r\n\t\t\t\t\t{ props.permissions.create === true &&\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Flex>\r\n\t\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t\t<Table \r\n\t\t\t\t\t\tcolumns={tableColumns} \r\n\t\t\t\t\t\tdataSource={list}\r\n\t\t\t\t\t\trowKey='id'  \r\n\t\t\t\t\t\tbordered\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t\tlocale={{\r\n\t\t\t\t\t\t\temptyText: loading || loadingDelete ? <Spin /> : <Empty />\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</Card>\r\n\t\t</>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default TestLibTable\r\n","import React from \"react\";\r\nimport TestLibTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nconst Index = (props) => {\r\n\r\n    const create = CheckPer('add_online_test');\r\n    const edit = CheckPer('change_online_test');\r\n    const destroy = CheckPer('delete_online_test');\r\n    const add_question = CheckPer('add_question');\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy,\r\n        add_question: add_question\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    return (\r\n        <TestLibTable title={props.title} permissions={permissions} />\r\n    )\r\n}\r\n\r\nexport default Index;\r\n"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","SELECT_STUDENT","gql","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","ALL_ONLINE_TESTS","CREATE_ONLINE_TEST","UPDATE_ONLINE_TEST","DELETE_ONLINE_TEST","ALL_QUESTION_LEVELS","CREATE_QUESTION_LEVEL","UPDATE_QUESTION_LEVEL","DELETE_QUESTION_LEVEL","ALL_QUESTIONS_BY_TEST","CREATE_QUESTION","UPDATE_QUESTION","DELETE_QUESTION","CREATE_QUESTION_CHOICE","UPDATE_QUESTION_CHOICE","DELETE_QUESTION_CHOICE","ALL_TAKE_TEST","CREATE_TAKE_TEST","UPDATE_TAKE_TEST","DELETE_TAKE_TEST","ALL_PARTICIPANT_BY_TEST","CREATE_PARTICIPANT","DELETE_PARTICIPANT","ALL_TAKE_LEVEL","CREATE_TAKE_LEVEL","DELETE_TAKE_LEVEL","START_TEST","UPDATE_ANSWER","TEST_TIME","FINISH_TEST","TextArea","Input","Option","Select","editData","formType","setIsModalVisible","Form","form","useState","subjects","setSubjects","useLazyQuery","onCompleted","data","allSubjects","fetchSubject","loadingSubject","loading","useMutation","refetchQueries","message","create","createLoading","update","updateLoading","useEffect","newData","title","description","subject","id","variables","offset","limit","filter","setFieldsValue","resetFields","spinning","tip","layout","name","onFinish","values","label","IntlMessage","rules","required","rows","showSearch","filterOption","notFoundContent","Loading","cover","image","Empty","onSearch","value","map","item","index","Math","floor","credit","subjectCode","isModalVisible","setEditData","setFormType","list","setList","history","useHistory","useQuery","refetch","allOnlineTests","confirm","Modal","destroy","loadingDelete","tableColumns","key","dataIndex","width","sorter","a","b","utils","render","_","elm","permissions","add_question","size","onClick","push","APP_PREFIX_PATH","type","icon","SnippetsTwoTone","twoToneColor","edit","EditTwoTone","row","okText","okType","cancelText","onOk","DeleteTwoTone","to","RollbackOutlined","forceRender","visible","onCancel","okButtonProps","htmlType","placeholder","prefix","SearchOutlined","onChange","e","currentTarget","searchArray","datas","PlusCircleOutlined","block","columns","dataSource","rowKey","bordered","locale","emptyText","CheckPer","Object","indexOf"],"sourceRoot":""}