{"version":3,"file":"static/js/7320.b0766e03.chunk.js","mappings":"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","sources":["graphql/all.js","graphql/select.js","views/app-views/live/form.js"],"sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const ALL_SUBJECTS = gql `\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            part\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            subject \r\n            subjectMgl\r\n            subjectCode\r\n            credit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TEACHER_STATUS = gql `\r\n    query allTeacherStatuss {\r\n        allTeacherStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_STATUS = gql `\r\n    query allStudentStatuss {\r\n        allStudentStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_STATUS_EXTRA = gql `\r\n    query allStudentStatusExtras {\r\n        allStudentStatusExtras {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_USERS = gql `\r\n    query allUsers {\r\n        allUsers {\r\n            id\r\n            username\r\n            email\r\n        }\r\n    }\r\n`;\r\n\r\nexport const USER_BY_USERNAME = gql `\r\n    query userByUsername($username: String!) {\r\n        userByUsername(username: $username) {\r\n            id\r\n            username\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EMPLOYEES_ATTANDANCE_BY_RANGE = gql`\r\n    query employeesAttandanceByRange ($startDate: DateTime!, $endDate: DateTime!) {\r\n        employeesAttandanceByRange (startDate: $startDate, endDate: $endDate) {\r\n            id\r\n            isIn\r\n            isOut\r\n            timeIn\r\n            timeOut\r\n            user {\r\n                id\r\n                isTeacher\r\n                isEmployee\r\n                teacher {\r\n                    familyName\r\n                    name\r\n                    teacherCode\r\n                }\r\n                employee {\r\n                    familyName\r\n                    name\r\n                    employeeCode\r\n                }\r\n                groups {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_TEACHER_AND_EMPLOYESS = gql`\r\n    query allAttendaceEmployees {\r\n        allAttendaceEmployees {\r\n            username\r\n            email\r\n            isTeacher\r\n            isEmployee\r\n            teacher {\r\n                teacherCode\r\n                familyName\r\n                name\r\n            }\r\n            employee {\r\n                employeeCode\r\n                familyName\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EMPLOYEES_COMPARTMENT = gql`\r\n    query allEmployeesCompartment {\r\n        allEmployeesCompartment {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_EMPLOYEES = gql`\r\n    query allEmployees ($filter: String) {\r\n        allEmployees (filter: $filter) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n                groups {\r\n                    name\r\n                }\r\n            }\r\n            compartment {\r\n                id\r\n                name\r\n            }\r\n            employeeCode\r\n            familyName\r\n            name\r\n            registerNo\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            sex\r\n            birthdate\r\n            birthCity {\r\n                id\r\n            }\r\n            birthDistrict {\r\n                id\r\n            }\r\n            status {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_TEACHERS = gql`\r\n  \tquery allTeachers ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allTeachers (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            teacherCode\r\n            familyName\r\n            name\r\n            registerNo\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            joinDate\r\n            joinBefore\r\n            sex\r\n            birthdate\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_STUDENTS = gql`\r\n  \tquery allStudents ($filter: String, $program: Int, $classes: Int) {\r\n        allStudents (filter: $filter, program: $program, classes: $classes) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            studentCode\r\n            familyName\r\n            name\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            registerNo\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            joinDate\r\n            joinBefore\r\n            sex\r\n            birthdate\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            joinSchoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_CITYS = gql`\r\n  \tquery allCitys{\r\n        allCitys {\r\n            id\r\n            name\r\n            code\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_DISTRICTS = gql `\r\n    query allDistricts {\r\n        allDistricts {\r\n            id\r\n            code\r\n            name\r\n            cityID {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_PROGRAMS = gql`\r\n  \tquery allPrograms{\r\n        allPrograms {\r\n            id\r\n            program\r\n            programMgl\r\n            programNumeric\r\n            maxStudentNum\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            status\r\n            createdAt\r\n            updatedAt\r\n        }\r\n\t  }\r\n`;\r\n\r\nexport const ALL_SCHOOLS = gql`\r\n  \tquery allSchools {\r\n        allSchools {\r\n            id\r\n            name\r\n            nameMgl\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_SUB_SCHOOLS = gql`\r\n  \tquery allSubSchools{\r\n        allSubSchools {\r\n            id\r\n            name\r\n            nameMgl\r\n            school {\r\n                id\r\n                name\r\n            }\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql `\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_CLASSESS = gql `\r\n    query allClassess ($program: Int!, $offset: Int!, $limit: Int!, $filter: String) {\r\n        allClassess (program: $program, offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            classes\r\n            classesMgl\r\n            classesNumeric\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            maxStudentNum\r\n            teacher {\r\n                id\r\n                name\r\n                teacherCode\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            status\r\n            course\r\n            endCourse\r\n            sectionSet {\r\n                id\r\n                section\r\n                classes {\r\n                    id\r\n                    classes\r\n                }\r\n                program {\r\n                    id\r\n                    program\r\n                }\r\n                subSchool {\r\n                    id\r\n                    name\r\n                }\r\n                school {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const ALL_CLASSTIME = gql `\r\n    query allClasstimes {\r\n        allClasstimes {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\nexport const ALL_SCHOOL_YEAR = gql `\r\n    query allSchoolyears {\r\n        allSchoolyears {\r\n            id\r\n            schoolyear\r\n            season\r\n            semesterCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_PARENTS = gql `\r\n    query allParents ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allParents (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            user {\r\n                username\r\n                email\r\n            }\r\n            familyName\r\n            name\r\n            photo\r\n            profession\r\n            phone\r\n            address\r\n            addressLive\r\n            student {\r\n                id\r\n                studentCode\r\n                familyName\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTION_BY_CLASSES = gql `\r\n    query sectionsByClasses ($classes: Int!) {\r\n        sectionsByClasses (classes: $classes) {\r\n            id\r\n            section\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TRANSFER_BY_STUDENT = gql`\r\n    query transfersByStudent ($student: Int!) {\r\n        transfersByStudent (student: $student) {\r\n            id\r\n            student {\r\n                familyName\r\n                name\r\n                photo\r\n                studentCode\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            docDate\r\n            docNum\r\n            description\r\n            oldData\r\n        }\r\n    }\r\n`;  \r\n\r\nexport const ALL_EVENT_TYPES = gql`\r\n    query allEventTypes {\r\n        allEventTypes {\r\n            id\r\n            name\r\n            color\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EVENTS = gql `\r\n    query allEvents {\r\n        allEvents {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType {\r\n                id\r\n                name\r\n                color\r\n            }\r\n        }\r\n    } \r\n`;\r\n\r\nexport const ALL_EVENTS_BY_DATE = gql `\r\n    query allEventsByDate ($date: Date) {\r\n        allEventsByDate (date: $date) {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType {\r\n                id\r\n                name\r\n                color\r\n            }\r\n        }\r\n    } \r\n`;\r\n\r\nexport const ALL_EVENTS_BY_TYPE = gql`\r\n    query allEventsByType ($id: Int!) {\r\n        allEventsByType (id: $id) {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n            classesNumeric\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql `\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject \r\n            subjectCode\r\n            credit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n            programNumeric\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Col, DatePicker, Empty, Form, Input, InputNumber, message, Row, Select, Spin } from 'antd';\r\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { CREATE_LIVE, UPDATE_LIVE } from 'graphql/live';\r\nimport { ALL_PROGRAMS, ALL_SECTIONS } from 'graphql/all';\r\nimport moment from 'moment';\r\nimport { SELECT_CLASSES, SELECT_TEACHER } from 'graphql/select';\r\nimport Loading from 'components/shared-components/Loading';\r\n\r\nconst { Option } = Select;\r\n\r\nfunction SchoolForm ({editData, formType, setIsModalVisible, refetch}) {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [allSections, setAllSections] = useState([]);\r\n\r\n    const [teacherData, setTeacherData] = useState([]);\r\n\r\n    const [fetchTeacher, { loading: teacherLoading }] = useLazyQuery(SELECT_TEACHER, {\r\n        onCompleted: data => {\r\n            setTeacherData(data.allTeachers)\r\n        }\r\n    });\r\n    const [fetchClasses, { data: allClasses }] = useLazyQuery(SELECT_CLASSES);\r\n    const { data: allPrograms } = useQuery(ALL_PROGRAMS);\r\n\r\n    const { data } = useQuery(ALL_SECTIONS);\r\n\r\n    const [createSchool, { loading: createLoading }] = useMutation(CREATE_LIVE, {\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n            refetch();\r\n\t\t}\r\n\t});\r\n\r\n    const [updateSchool, { loading: updateLoading }] = useMutation(UPDATE_LIVE, {\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n            refetch();\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        fetchTeacher({ variables: { offset: 0, limit: 9, filter: ''} })\r\n        if(formType === \"edit\") {\r\n            form.setFieldsValue({\r\n                title: editData.title,\r\n                description: editData.description,\r\n                duration: editData.duration,\r\n                status: editData.status,\r\n                teacher: editData.teacher.id,\r\n                date: moment(editData.date),\r\n                type: editData.type,\r\n                section: editData.section.id\r\n            });\r\n        } else if(formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [editData, fetchTeacher, form, formType, data]);\r\n\r\n    const onFinish = values => {\r\n        if (formType === \"edit\") {\r\n            values.id = editData?.id\r\n            updateSchool({ variables: values})\r\n        } else {\r\n            createSchool({ variables: values })\r\n        }\r\n    };\r\n\r\n    const onProgramChange = (value) => {\r\n        fetchClasses({ variables: { program: value, offset: 1, limit: 1, filter: '' } })\r\n    }\r\n\r\n    const onClassesChange = (value) => {\r\n        const datas = data?.allSections.filter(section => section.classes.id === value).map(filteredSection => (\r\n            filteredSection\r\n        ));\r\n        setAllSections(datas);\r\n    }\r\n\r\n    // teacher select\r\n\r\n    const onSearch = value => {\r\n        if (value !== '') {\r\n            fetchTeacher({ variables: { offset: 0, limit: 99999999, filter: value } })\r\n        }\r\n    }\r\n\r\n    // end teacher select\r\n\r\n    return (\r\n        <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\r\n            <Form  \r\n                id=\"SchoolForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"school\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Row gutter={[16, 24]}>\r\n                    <Col className=\"gutter-row\" span={12}>\r\n                        <Form.Item name=\"title\" label={<IntlMessage id=\"title\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"program\" label={<IntlMessage id=\"program\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select\r\n                                onChange={onProgramChange}\r\n                            >\r\n                                { allPrograms?.allPrograms.map((program, index) => (\r\n                                    <Option key={index} value={program.id} >{program.program}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"section\" label={<IntlMessage id=\"section\" />} rules={[\r\n                            { \r\n                                required: true,\r\n                                message: \"Хоосон орхих боломжгүй\"\r\n                            }\r\n                        ]}>\r\n                            <Select>\r\n                                { allSections.map((section, index) => (\r\n                                    <Option key={index} value={section.id} >{section.section}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"date\" label={<IntlMessage id=\"date\" />} rules={[\r\n                            { \r\n                                required: true,\r\n                                message: \"Хоосон орхих боломжгүй\"\r\n                            }\r\n                        ]}>\r\n                            <DatePicker \r\n                                showTime\r\n                                style={{ width: '100%' }} \r\n                            />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"status\" label={<IntlMessage id=\"status\" />} rules={[\r\n                            { \r\n                                required: true,\r\n                                message: \"Хоосон орхих боломжгүй\"\r\n                            }\r\n                        ]}>\r\n                            <Select>\r\n                                <Option key={0} value={'OPEN'} >Нээлттэй</Option>\r\n                                <Option key={1} value={'CLOSED'} >Хаалттай</Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col className=\"gutter-row\" span={12}>\r\n                        <Form.Item name=\"teacher\" label={<IntlMessage id=\"teacher\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select\r\n                                showSearch\r\n                                filterOption={false}\r\n                                notFoundContent={\r\n                                    teacherLoading ? <Loading cover='content' /> \r\n                                    : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                                }\r\n                                onSearch={onSearch}\r\n                            >\r\n                                { teacherData.map((item, index) => (\r\n                                    <Option key={item.id} value={item.id} > {item.familyName} {item.name} / {item.teacherCode} </Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"classes\" label={<IntlMessage id=\"classes\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select\r\n                                onChange={onClassesChange}\r\n                            >\r\n                                { allClasses?.allClassess.map((classes, index) => (\r\n                                    <Option key={index} value={classes.id} >{classes.classes}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"type\" label={<IntlMessage id=\"onlineType\" />} rules={[\r\n                            { \r\n                                required: true,\r\n                                message: \"Хоосон орхих боломжгүй\"\r\n                            }\r\n                        ]}>\r\n                            <Select>\r\n                                <Option value={'WEBINAR'} ><IntlMessage id=\"WEBINAR\" /></Option>\r\n                                <Option value={'ZOOM'} ><IntlMessage id=\"ZOOM\" /></Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"duration\" label={<IntlMessage id=\"duration\" />} rules={[\r\n                            { \r\n                                required: true,\r\n                                message: \"Хоосон орхих боломжгүй\"\r\n                            }\r\n                        ]}>\r\n                            <InputNumber min={1} style={{ width: '100%' }} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"description\" label={<IntlMessage id=\"description\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input.TextArea rows={4} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default SchoolForm"],"names":["ALL_SUBJECTS","gql","ALL_USERS","ALL_EMPLOYEES_ATTANDANCE_BY_RANGE","ALL_EMPLOYEES_COMPARTMENT","ALL_EMPLOYEES","ALL_TEACHERS","ALL_STUDENTS","ALL_CITYS","ALL_DISTRICTS","ALL_PROGRAMS","ALL_SCHOOLS","ALL_SUB_SCHOOLS","ALL_SECTIONS","ALL_CLASSESS","ALL_CLASSTIME","ALL_SCHOOL_YEAR","ALL_PARENTS","SECTION_BY_CLASSES","TRANSFER_BY_STUDENT","ALL_EVENT_TYPES","ALL_EVENTS","ALL_EVENTS_BY_DATE","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","Option","Select","editData","formType","setIsModalVisible","refetch","Form","form","useState","allSections","setAllSections","teacherData","setTeacherData","useLazyQuery","onCompleted","data","allTeachers","fetchTeacher","teacherLoading","loading","fetchClasses","allClasses","allPrograms","useQuery","useMutation","CREATE_LIVE","message","createSchool","createLoading","UPDATE_LIVE","updateSchool","updateLoading","useEffect","variables","offset","limit","filter","setFieldsValue","title","description","duration","status","teacher","id","date","moment","type","section","resetFields","spinning","tip","layout","name","onFinish","values","gutter","className","span","label","rules","required","onChange","value","program","map","index","showTime","style","width","showSearch","filterOption","notFoundContent","cover","image","Empty","onSearch","item","familyName","teacherCode","datas","classes","filteredSection","allClassess","min","rows"],"sourceRoot":""}