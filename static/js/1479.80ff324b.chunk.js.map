{"version":3,"file":"static/js/1479.80ff324b.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","graphql/test.js","views/app-views/take-test/form.js","views/app-views/take-test/table.js","views/app-views/take-test/index.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const ALL_ONLINE_TESTS = gql `\r\n    query allOnlineTests {\r\n        allOnlineTests {\r\n            id\r\n            title\r\n            description\r\n            subject {\r\n                id\r\n                subject\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_ONLINE_TEST = gql `\r\n    mutation createOnlineTest ($description: String, $subject: Int, $title: String) {\r\n        createOnlineTest (description: $description, subject: $subject, title: $title) {\r\n            onlineTest {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ONLINE_TEST = gql `\r\n    mutation updateOnlineTest ($description: String, $id: ID, $subject: Int, $title: String) {\r\n        updateOnlineTest (description: $description, id: $id, subject: $subject, title: $title) {\r\n            OnlineTest {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ONLINE_TEST = gql `\r\n    mutation deleteOnlineTest ($id: ID) {\r\n        deleteOnlineTest (id: $id) {\r\n            onlineTest {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_QUESTION_LEVELS = gql `\r\n    query allQuestionLevels {\r\n        allQuestionLevels {\r\n            level\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_QUESTION_LEVEL = gql `\r\n    mutation createQuestionLevel ($level: String) {\r\n        createQuestionLevel (level: $level) {\r\n            questionLevel {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_QUESTION_LEVEL = gql `\r\n    mutation updateQuestionLevel ($level: String, $id: ID) {\r\n        updateQuestionLevel (level: $level, id: $id) {\r\n            questionLevel {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_QUESTION_LEVEL = gql `\r\n    mutation deleteQuestionLevel ($id: ID) {\r\n        deleteQuestionLevel (id: $id) {\r\n            questionLevel {\r\n                level\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_QUESTIONS_BY_TEST = gql `\r\n    query allQuestionsByTest ($id: Int!) {\r\n        allQuestionsByTest (id: $id) {\r\n            id\r\n            question\r\n            hint\r\n            image\r\n            answerType\r\n            questionLevel {\r\n                id\r\n                level\r\n            }\r\n            questionChoiceSet {\r\n                id\r\n                answer\r\n                score\r\n            }\r\n        }\r\n    }\r\n`; \r\n\r\nexport const CREATE_QUESTION = gql `\r\n    mutation createQuestion ($answerType: String, $image: Upload, $onlineTest: Int, $questionLevel: Int) {\r\n        createQuestion (answerType: $answerType, hint: \"\", image: $image, onlineTest: $onlineTest, questionL: \"Асуулт\", questionLevel: $questionLevel) {\r\n            question {\r\n                id\r\n                answerType\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_QUESTION = gql `\r\n    mutation updateQuestion ($answerType: String, $hint: String, $image: Upload, $onlineTest: Int, $questionL: String, $questionLevel: Int, $id: ID) {\r\n        updateQuestion (answerType: $answerType, hint: $hint, image: $image, onlineTest: $onlineTest, questionL: $questionL, questionLevel: $questionLevel, id: $id) {\r\n            question {\r\n                id\r\n                answerType\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_QUESTION = gql `\r\n    mutation deleteQuestion ($id: ID) {\r\n        deleteQuestion (id: $id) {\r\n            question {\r\n                question\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_QUESTION_CHOICE = gql `\r\n    mutation createQuestionChoice ($answer: String, $question: Int, $score: Decimal) {\r\n        createQuestionChoice (answer: $answer, question: $question, score: $score) {\r\n            questionChoice {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_QUESTION_CHOICE = gql `\r\n    mutation updateQuestionChoice ($answer: String, $question: Int, $score: Decimal, $id: ID) {\r\n        updateQuestionChoice (answer: $answer, question: $question, score: $score, id: $id) {\r\n            questionChoice {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_QUESTION_CHOICE = gql `\r\n    mutation deleteQuestionChoice ($id: ID) {\r\n        deleteQuestionChoice (id: $id) {\r\n            questionChoice {\r\n                score\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_TAKE_TEST = gql `\r\n    query allTakeTests {\r\n        allTakeTests {\r\n            id\r\n            title\r\n            description\r\n            startAt\r\n            endAt\r\n            duration\r\n            status\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_TAKE_TEST = gql `\r\n    mutation createTakeTest ($duration: Int, $endAt: String, $startAt: String, $status: String, $description: String, $title: String) {\r\n        createTakeTest (duration: $duration, endAt: $endAt, startAt: $startAt, status: $status, description: $description, title: $title) {\r\n            takeTest {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_TAKE_TEST = gql `\r\n    mutation updateTakeTest ($duration: Int, $endAt: String, $startAt: String, $status: String, $id: ID, $description: String, $title: String) {\r\n        updateTakeTest (duration: $duration, endAt: $endAt, startAt: $startAt, status: $status, id: $id, description: $description, title: $title) {\r\n            takeTest {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_TAKE_TEST = gql `\r\n    mutation deleteTakeTest ($id: ID) {\r\n        deleteTakeTest (id: $id) {\r\n            takeTest {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_PARTICIPANT_BY_TEST = gql `\r\n    query allParticipantByTest ($takeTest: Int!) {\r\n        allParticipantByTest (takeTest: $takeTest) {\r\n            id\r\n            student {\r\n                studentCode\r\n                familyName\r\n                name\r\n            }\r\n            started\r\n            completed\r\n            answerSet {\r\n                answerType\r\n                questionText\r\n                choices\r\n                score\r\n                givenAnswer\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_PARTICIPANT = gql `\r\n    mutation createParticipant ($section: Int = 0, $studentCode: String = \"\", $takeTest: Int) {\r\n        createParticipant (section: $section, studentCode: $studentCode, takeTest: $takeTest) {\r\n            participant {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_PARTICIPANT = gql `\r\n    mutation deleteParticipant ($id: ID, $takeTest: Int) {\r\n        deleteParticipant (id: $id, takeTest: $takeTest) {\r\n            participant {\r\n                started\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_TAKE_LEVEL = gql `\r\n    query allTakeLevelByTest ($takeTest: Int!) {\r\n        allTakeLevelByTest (takeTest: $takeTest) {\r\n            id\r\n            onlineTest {\r\n                id\r\n                title\r\n            }\r\n            questionLevel {\r\n                id\r\n                level\r\n            }\r\n            takeNumber\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_TAKE_LEVEL = gql `\r\n    mutation createTakeLevel ($onlineTest: Int, $questionLevel: Int, $takeNumber: Int, $takeTest: Int) {\r\n        createTakeLevel (onlineTest: $onlineTest, questionLevel: $questionLevel, takeNumber: $takeNumber, takeTest: $takeTest) {\r\n            takeLevel {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_TAKE_LEVEL = gql `\r\n    mutation deleteTakeLevel ($id: ID) {\r\n        deleteTakeLevel (id: $id) {\r\n            takeLevel {\r\n                takeNumber\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql `\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n            studentSet {\r\n                id\r\n                studentCode\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const START_TEST = gql `\r\n    query startTest ($takeTest: Int!) {\r\n        startTest (takeTest: $takeTest) {\r\n            id\r\n            questionText\r\n            choices\r\n            answerType\r\n            givenAnswer\r\n            question {\r\n                hint\r\n                image\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ANSWER = gql `\r\n    mutation updateAnswer ($givenAnswer: String, $id: ID) {\r\n        updateAnswer (givenAnswer: $givenAnswer, id: $id) {\r\n            answer {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TEST_TIME = gql `\r\n    query testTime ($takeTest: Int!) {\r\n        testTime (takeTest: $takeTest) {\r\n            duration\r\n            started\r\n            endAt\r\n        }\r\n    }\r\n`;\r\n\r\nexport const FINISH_TEST = gql `\r\n    query finishTest ($takeTest: Int!) {\r\n        finishTest (takeTest: $takeTest) {\r\n            score\r\n        }\r\n    }\r\n`;","import React, { useEffect } from 'react';\r\nimport { Form, Input, message, Spin, DatePicker, InputNumber, Select } from 'antd';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ALL_TAKE_TEST, UPDATE_TAKE_TEST, CREATE_TAKE_TEST } from 'graphql/test';\r\nimport moment from 'moment';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\n\r\nconst { TextArea } = Input;\r\nconst { RangePicker } = DatePicker;\r\nconst { Option } = Select;\r\n\r\nfunction TestForm ({editData, formType, setIsModalVisible}) {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [create, { loading: createLoading }] = useMutation(CREATE_TAKE_TEST, {\r\n        refetchQueries: [ALL_TAKE_TEST],\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n\t\t}\r\n\t});\r\n\r\n    const [update, { loading: updateLoading }] = useMutation(UPDATE_TAKE_TEST, {\r\n        refetchQueries: [ALL_TAKE_TEST],\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(formType === \"edit\") {\r\n            let splitStart = editData.startAt.split('T')\r\n            splitStart = splitStart[0]+' '+splitStart[1];\r\n            splitStart = splitStart.split('+')\r\n            splitStart= splitStart[0];\r\n            let splitEnd = editData.endAt.split('T')\r\n            splitEnd = splitEnd[0]+' '+splitEnd[1];\r\n            splitEnd = splitEnd.split('+')\r\n            splitEnd= splitEnd[0];\r\n            const newData ={\r\n\t\t\t\ttitle: editData.title,\r\n\t\t\t\tdescription: editData.description,\r\n\t\t\t\tduration: editData.duration,\r\n                status: editData.status,\r\n                date: [moment(splitStart), moment(splitEnd)],\r\n\t\t\t}\r\n            form.setFieldsValue(newData);\r\n        } else if(formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [editData, form, formType]);\r\n\r\n    const onFinish = values => {\r\n        values.date.map(function (date, index) {\r\n            if (index === 0) {\r\n                values.startAt = moment(date).format(\"YYYY-MM-DDTHH:mm:ss+00:00\")\r\n            } else {\r\n                values.endAt = moment(date).format(\"YYYY-MM-DDTHH:mm:ss+00:00\") \r\n            }\r\n            return null\r\n        })\r\n        if (formType === \"edit\") {\r\n            values.id = editData.id\r\n            update({ variables: values})\r\n        } else {\r\n            values.status = \"CLOSED\";\r\n            create({ variables: values })\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\r\n            <Form  \r\n                id=\"TestForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"school\" \r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item name=\"title\" label={<IntlMessage id=\"title\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item name=\"description\" label={<IntlMessage id=\"description\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <TextArea rows={4} />\r\n                </Form.Item>\r\n                <Form.Item name=\"date\" label={<IntlMessage id=\"start_end_date\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n                     <RangePicker showTime />\r\n                </Form.Item>\r\n                <Form.Item name=\"duration\" label={<IntlMessage id=\"duration\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    }\r\n                ]}>\r\n                    <InputNumber min={1} style={{ width: '100%' }}  />\r\n                </Form.Item>\r\n                { formType === \"edit\" &&\r\n                    <Form.Item name=\"status\" label={<IntlMessage id=\"status\" />} rules={[\r\n                        {\r\n                            required: true,\r\n                            message: <IntlMessage id=\"form.required\" />\r\n                        }\r\n                    ]}>\r\n                        <Select>\r\n                            <Option value={'OPEN'} >{<IntlMessage id=\"status.open\" />}</Option>\r\n                            <Option value={'CLOSED'} >{<IntlMessage id=\"status.closed\" />}</Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                }\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default TestForm","import React, { useState, useEffect, useContext } from 'react'\r\nimport { Card, Table, Input, Spin, Empty, Modal, message, Button } from 'antd';\r\nimport { DeleteTwoTone, SearchOutlined, EditTwoTone, PlusCircleOutlined, EyeTwoTone, HighlightTwoTone, ArrowRightOutlined } from '@ant-design/icons';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport utils from 'utils'\r\nimport TestForm from './form'\r\nimport { APP_PREFIX_PATH } from 'configs/AppConfig';\r\nimport { ALL_TAKE_TEST, DELETE_TAKE_TEST } from 'graphql/test';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { UserContext } from 'hooks/UserContextProvider';\r\n\r\nfunction  TestLibTable ({ permissions }) {\r\n    \r\n    const contextData = useContext(UserContext)\r\n    const [user] = useState(contextData.user);\r\n\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\tconst [editData, setEditData] = useState([]);\r\n\tconst [formType, setFormType] = useState(\"\");\r\n\tconst [list, setList] = useState([]);\r\n    const history = useHistory();\r\n\r\n\tconst { loading, data, refetch } = useQuery(ALL_TAKE_TEST, {\r\n        pollInterval: 5000,\r\n\t});\r\n\r\n    useEffect(() => {\r\n        if(loading === false && data){\r\n            setList(data.allTakeTests);\r\n        }\r\n    }, [loading, data])\r\n\r\n    const showModal = () => {\r\n\t\tsetFormType(\"create\")\r\n      \tsetIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n      \tsetIsModalVisible(false);\r\n    };\r\n\r\n\tconst editRow = row => {\r\n\t\tsetEditData(row);\r\n\t\tsetFormType(\"edit\")\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n\tconst addQuestion = value => {\r\n\t\thistory.push(`${APP_PREFIX_PATH}/take-test/${value}`);\r\n\t}\r\n\r\n\tconst startTest = value => {\r\n\t\thistory.push(`${APP_PREFIX_PATH}/exam/${value}`);\r\n\t}\r\n\r\n\tconst { confirm } = Modal;\r\n\r\n\tconst [destroy, { loading: loadingDelete }] = useMutation(DELETE_TAKE_TEST, {\r\n\t\tonCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\t\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n\t\t  title: 'Устгах уу?',\r\n\t\t  okText: 'Устгах',\r\n\t\t  okType: 'danger',\r\n\t\t  cancelText: 'Болих',\r\n\t\t  onOk() {\r\n\t\t\tdestroy({ variables: { id: row.id } }); \r\n\t\t  },\r\n\t\t});\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'title',\r\n\t\t\ttitle: <IntlMessage id=\"name\" />,\r\n\t\t\tdataIndex: 'title',\r\n\t\t\twidth: '20vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'title')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'description',\r\n            title: <IntlMessage id=\"description\" />,\r\n            dataIndex: 'description',\r\n\t\t\twidth: '35vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'description')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'status',\r\n\t\t\ttitle: <IntlMessage id=\"status\" />,\r\n\t\t\tdataIndex: 'status',\r\n\t\t\twidth: '10vw',\r\n\t\t\trender: text => {\r\n\t\t\t\treturn (text === 'CLOSED' ? <IntlMessage id =\"status.closed\" /> : <IntlMessage id=\"status.open\" />)\r\n\t\t\t},\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'status')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'actions',\r\n\t\t\ttitle: <IntlMessage id=\"main.action\" />,\r\n\t\t\twidth: '20vw',\r\n\t\t\tdataIndex: 'actions',\r\n\t\t\trender: (_, elm) => (\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t{ elm.status === 'OPEN' && user.isStudent && \r\n\t\t\t\t\t\t<Button size=\"small\" onClick={() => startTest(elm.id)} type=\"text\" icon={<HighlightTwoTone />} > <IntlMessage id=\"take-exam\" /></Button>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{ permissions.add_question === true &&\r\n\t\t\t\t\t\t<Button size=\"small\" onClick={() => addQuestion(elm.id)} type=\"text\" icon={<EyeTwoTone />} > <IntlMessage id=\"main.read-more\" /></Button>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{ permissions.edit === true &&\r\n\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /></Button>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{ permissions.destroy === true &&\r\n\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /></Button>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t];\r\n\r\n\tconst onSearch = e => {\r\n\t\tconst value = e.currentTarget.value\r\n\t\tconst searchArray = e.currentTarget.value? list : data.allOnlineTests\r\n\t\tconst datas = utils.wildCardSearch(searchArray, value)\r\n\t\tsetList(datas)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Modal \r\n\t\t\t\tforceRender\r\n                title={formType === 'edit' ? <IntlMessage id=\"edit\" /> : <IntlMessage id=\"add_new\" /> }\r\n                visible={isModalVisible} \r\n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\r\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tokButtonProps={{form:'TestForm', key: 'submit', htmlType: 'submit'}}\r\n            >\r\n                <TestForm formType={formType} setIsModalVisible={setIsModalVisible} editData={editData}/>\r\n            </Modal>\r\n\t\t\t{ permissions.view_online_test &&\r\n\t\t\t\t<Link\r\n\t\t\t\t\tto=\"online-test-library\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<Button icon={<ArrowRightOutlined />}> <IntlMessage id=\"online-test-library\" /></Button>\r\n\t\t\t\t</Link>\r\n\t\t\t}\r\n\t\t\t<Card className='mt-4'>\r\n\t\t\t\t<Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n\t\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Flex>\r\n\t\t\t\t\t{ permissions.create === true &&\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Flex>\r\n\t\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t\t<Table \r\n\t\t\t\t\t\tcolumns={tableColumns} \r\n\t\t\t\t\t\tdataSource={list}\r\n\t\t\t\t\t\trowKey='id'  \r\n\t\t\t\t\t\tbordered\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t\tlocale={{\r\n\t\t\t\t\t\t\temptyText: loading || loadingDelete ? <Spin /> : <Empty />\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</Card>\r\n\t\t</>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default TestLibTable\r\n","import React from \"react\";\r\nimport TestLibTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nconst Index = (props) => {\r\n\r\n    const create = CheckPer('add_take_test');\r\n    const edit = CheckPer('change_take_test');\r\n    const destroy = CheckPer('delete_take_test');\r\n    const add_question = CheckPer('add_question');\r\n    const view_online_test = CheckPer('view_online_test');\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy,\r\n        add_question: add_question,\r\n        view_online_test: view_online_test\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    return (\r\n        <TestLibTable title={props.title} permissions={permissions} />\r\n    )\r\n}\r\n\r\nexport default Index;\r\n"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","ALL_ONLINE_TESTS","gql","CREATE_ONLINE_TEST","UPDATE_ONLINE_TEST","DELETE_ONLINE_TEST","ALL_QUESTION_LEVELS","CREATE_QUESTION_LEVEL","UPDATE_QUESTION_LEVEL","DELETE_QUESTION_LEVEL","ALL_QUESTIONS_BY_TEST","CREATE_QUESTION","UPDATE_QUESTION","DELETE_QUESTION","CREATE_QUESTION_CHOICE","UPDATE_QUESTION_CHOICE","DELETE_QUESTION_CHOICE","ALL_TAKE_TEST","CREATE_TAKE_TEST","UPDATE_TAKE_TEST","DELETE_TAKE_TEST","ALL_PARTICIPANT_BY_TEST","CREATE_PARTICIPANT","DELETE_PARTICIPANT","ALL_TAKE_LEVEL","CREATE_TAKE_LEVEL","DELETE_TAKE_LEVEL","START_TEST","UPDATE_ANSWER","TEST_TIME","FINISH_TEST","TextArea","Input","RangePicker","DatePicker","Option","Select","editData","formType","setIsModalVisible","Form","form","useMutation","refetchQueries","onCompleted","data","message","create","createLoading","loading","update","updateLoading","useEffect","splitStart","startAt","split","splitEnd","endAt","newData","title","description","duration","status","date","moment","setFieldsValue","resetFields","spinning","tip","id","layout","name","onFinish","values","map","index","format","variables","label","IntlMessage","rules","required","rows","showTime","min","style","width","value","permissions","contextData","useContext","UserContext","useState","user","isModalVisible","setEditData","setFormType","list","setList","history","useHistory","useQuery","pollInterval","refetch","allTakeTests","confirm","Modal","destroy","loadingDelete","tableColumns","key","dataIndex","sorter","a","b","utils","render","text","_","elm","isStudent","size","onClick","push","APP_PREFIX_PATH","type","icon","HighlightTwoTone","add_question","EyeTwoTone","edit","EditTwoTone","twoToneColor","row","okText","okType","cancelText","onOk","DeleteTwoTone","forceRender","visible","onCancel","okButtonProps","htmlType","view_online_test","to","ArrowRightOutlined","placeholder","prefix","SearchOutlined","onChange","e","currentTarget","searchArray","allOnlineTests","datas","onSearch","PlusCircleOutlined","block","columns","dataSource","rowKey","bordered","locale","emptyText","CheckPer","Object","indexOf","Loading","cover"],"sourceRoot":""}