{"version":3,"file":"static/js/612.a36451e3.chunk.js","mappings":"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","sources":["graphql/test.js","components/util-components/CustomIcon/index.js","views/app-views/questions/form.js","views/app-views/questions/index.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const ALL_ONLINE_TESTS = gql `\r\n    query allOnlineTests {\r\n        allOnlineTests {\r\n            id\r\n            title\r\n            description\r\n            subject {\r\n                id\r\n                subject\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_ONLINE_TEST = gql `\r\n    mutation createOnlineTest ($description: String, $subject: Int, $title: String) {\r\n        createOnlineTest (description: $description, subject: $subject, title: $title) {\r\n            onlineTest {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ONLINE_TEST = gql `\r\n    mutation updateOnlineTest ($description: String, $id: ID, $subject: Int, $title: String) {\r\n        updateOnlineTest (description: $description, id: $id, subject: $subject, title: $title) {\r\n            OnlineTest {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ONLINE_TEST = gql `\r\n    mutation deleteOnlineTest ($id: ID) {\r\n        deleteOnlineTest (id: $id) {\r\n            onlineTest {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_QUESTION_LEVELS = gql `\r\n    query allQuestionLevels {\r\n        allQuestionLevels {\r\n            level\r\n            id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_QUESTION_LEVEL = gql `\r\n    mutation createQuestionLevel ($level: String) {\r\n        createQuestionLevel (level: $level) {\r\n            questionLevel {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_QUESTION_LEVEL = gql `\r\n    mutation updateQuestionLevel ($level: String, $id: ID) {\r\n        updateQuestionLevel (level: $level, id: $id) {\r\n            questionLevel {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_QUESTION_LEVEL = gql `\r\n    mutation deleteQuestionLevel ($id: ID) {\r\n        deleteQuestionLevel (id: $id) {\r\n            questionLevel {\r\n                level\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_QUESTIONS_BY_TEST = gql `\r\n    query allQuestionsByTest ($id: Int!) {\r\n        allQuestionsByTest (id: $id) {\r\n            id\r\n            question\r\n            hint\r\n            image\r\n            answerType\r\n            questionLevel {\r\n                id\r\n                level\r\n            }\r\n            questionChoiceSet {\r\n                id\r\n                answer\r\n                score\r\n            }\r\n        }\r\n    }\r\n`; \r\n\r\nexport const CREATE_QUESTION = gql `\r\n    mutation createQuestion ($answerType: String, $image: Upload, $onlineTest: Int, $questionLevel: Int) {\r\n        createQuestion (answerType: $answerType, hint: \"\", image: $image, onlineTest: $onlineTest, questionL: \"Асуулт\", questionLevel: $questionLevel) {\r\n            question {\r\n                id\r\n                answerType\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_QUESTION = gql `\r\n    mutation updateQuestion ($answerType: String, $hint: String, $image: Upload, $onlineTest: Int, $questionL: String, $questionLevel: Int, $id: ID) {\r\n        updateQuestion (answerType: $answerType, hint: $hint, image: $image, onlineTest: $onlineTest, questionL: $questionL, questionLevel: $questionLevel, id: $id) {\r\n            question {\r\n                id\r\n                answerType\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_QUESTION = gql `\r\n    mutation deleteQuestion ($id: ID) {\r\n        deleteQuestion (id: $id) {\r\n            question {\r\n                question\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_QUESTION_CHOICE = gql `\r\n    mutation createQuestionChoice ($answer: String, $question: Int, $score: Decimal) {\r\n        createQuestionChoice (answer: $answer, question: $question, score: $score) {\r\n            questionChoice {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_QUESTION_CHOICE = gql `\r\n    mutation updateQuestionChoice ($answer: String, $question: Int, $score: Decimal, $id: ID) {\r\n        updateQuestionChoice (answer: $answer, question: $question, score: $score, id: $id) {\r\n            questionChoice {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_QUESTION_CHOICE = gql `\r\n    mutation deleteQuestionChoice ($id: ID) {\r\n        deleteQuestionChoice (id: $id) {\r\n            questionChoice {\r\n                score\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_TAKE_TEST = gql `\r\n    query allTakeTests {\r\n        allTakeTests {\r\n            id\r\n            title\r\n            description\r\n            startAt\r\n            endAt\r\n            duration\r\n            status\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_TAKE_TEST = gql `\r\n    mutation createTakeTest ($duration: Int, $endAt: String, $startAt: String, $status: String, $description: String, $title: String) {\r\n        createTakeTest (duration: $duration, endAt: $endAt, startAt: $startAt, status: $status, description: $description, title: $title) {\r\n            takeTest {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_TAKE_TEST = gql `\r\n    mutation updateTakeTest ($duration: Int, $endAt: String, $startAt: String, $status: String, $id: ID, $description: String, $title: String) {\r\n        updateTakeTest (duration: $duration, endAt: $endAt, startAt: $startAt, status: $status, id: $id, description: $description, title: $title) {\r\n            takeTest {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_TAKE_TEST = gql `\r\n    mutation deleteTakeTest ($id: ID) {\r\n        deleteTakeTest (id: $id) {\r\n            takeTest {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_PARTICIPANT_BY_TEST = gql `\r\n    query allParticipantByTest ($takeTest: Int!) {\r\n        allParticipantByTest (takeTest: $takeTest) {\r\n            id\r\n            student {\r\n                studentCode\r\n                familyName\r\n                name\r\n            }\r\n            started\r\n            completed\r\n            answerSet {\r\n                answerType\r\n                questionText\r\n                choices\r\n                score\r\n                givenAnswer\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_PARTICIPANT = gql `\r\n    mutation createParticipant ($section: Int = 0, $studentCode: String = \"\", $takeTest: Int) {\r\n        createParticipant (section: $section, studentCode: $studentCode, takeTest: $takeTest) {\r\n            participant {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_PARTICIPANT = gql `\r\n    mutation deleteParticipant ($id: ID, $takeTest: Int) {\r\n        deleteParticipant (id: $id, takeTest: $takeTest) {\r\n            participant {\r\n                started\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_TAKE_LEVEL = gql `\r\n    query allTakeLevelByTest ($takeTest: Int!) {\r\n        allTakeLevelByTest (takeTest: $takeTest) {\r\n            id\r\n            onlineTest {\r\n                id\r\n                title\r\n            }\r\n            questionLevel {\r\n                id\r\n                level\r\n            }\r\n            takeNumber\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_TAKE_LEVEL = gql `\r\n    mutation createTakeLevel ($onlineTest: Int, $questionLevel: Int, $takeNumber: Int, $takeTest: Int) {\r\n        createTakeLevel (onlineTest: $onlineTest, questionLevel: $questionLevel, takeNumber: $takeNumber, takeTest: $takeTest) {\r\n            takeLevel {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_TAKE_LEVEL = gql `\r\n    mutation deleteTakeLevel ($id: ID) {\r\n        deleteTakeLevel (id: $id) {\r\n            takeLevel {\r\n                takeNumber\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql `\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n            studentSet {\r\n                id\r\n                studentCode\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const START_TEST = gql `\r\n    query startTest ($takeTest: Int!) {\r\n        startTest (takeTest: $takeTest) {\r\n            id\r\n            questionText\r\n            choices\r\n            answerType\r\n            givenAnswer\r\n            question {\r\n                hint\r\n                image\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ANSWER = gql `\r\n    mutation updateAnswer ($givenAnswer: String, $id: ID) {\r\n        updateAnswer (givenAnswer: $givenAnswer, id: $id) {\r\n            answer {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TEST_TIME = gql `\r\n    query testTime ($takeTest: Int!) {\r\n        testTime (takeTest: $takeTest) {\r\n            duration\r\n            started\r\n            endAt\r\n        }\r\n    }\r\n`;\r\n\r\nexport const FINISH_TEST = gql `\r\n    query finishTest ($takeTest: Int!) {\r\n        finishTest (takeTest: $takeTest) {\r\n            score\r\n        }\r\n    }\r\n`;","import React from 'react'\r\nimport Icon from '@ant-design/icons';\r\n\r\nconst CustomIcon = React.forwardRef((props, _) => <Icon component={props.svg} className={props.className}/>)\r\n\r\nexport default CustomIcon\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport { Input, Form, Select, message, Modal, Button, InputNumber, Upload, Divider, Row, Col } from 'antd';\r\nimport { DeleteTwoTone, MinusCircleOutlined, PlusOutlined } from '@ant-design/icons'\r\nimport { ALL_QUESTION_LEVELS, CREATE_QUESTION_CHOICE, DELETE_QUESTION, DELETE_QUESTION_CHOICE, UPDATE_QUESTION, UPDATE_QUESTION_CHOICE } from 'graphql/test';\r\nimport { ImageSvg } from 'assets/svg/icon';\r\nimport CustomIcon from 'components/util-components/CustomIcon';\r\nimport { BASE_SERVER_URL } from 'configs/AppConfig';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { CheckIcon, XIcon } from '@heroicons/react/outline';\r\n\r\nconst layout = {\r\n    labelCol: { span: 2 },\r\n    wrapperCol: { span: 32 },\r\n};\r\n\r\nconst formItemLayoutWithOutLabel = {\r\n    wrapperCol: {\r\n        xs: { span: 32, offset: 0 },\r\n        sm: { span: 32, offset: 2 },\r\n    },\r\n};\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\nconst { confirm } = Modal;\r\nconst { Dragger } = Upload;\r\n\r\n\r\nfunction QuestionFrom({ name, refetch, answerType, setNewQuestions, question, questionLevel, id, onlineTest, hint, questionChoiceSet, image }) {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [selectedImage, setSelectedImage] = useState();\r\n\r\n    const { data: levelData, loading: levelLoading } = useQuery(ALL_QUESTION_LEVELS);\r\n\r\n    const [destroy] = useMutation(DELETE_QUESTION, {\r\n        onCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай устлаа');\r\n        }\r\n    });\r\n\r\n    const [createChoice] = useMutation(CREATE_QUESTION_CHOICE, {\r\n        onCompleted: data => {\r\n            refetch();\r\n        }\r\n    });\r\n\r\n    const [updateChoice] = useMutation(UPDATE_QUESTION_CHOICE, {\r\n        onCompleted: data => {\r\n            refetch();\r\n        }\r\n    });\r\n\r\n    const [destroyChoice] = useMutation(DELETE_QUESTION_CHOICE)\r\n\r\n    const [update] = useMutation(UPDATE_QUESTION, {\r\n        onCompleted: res => {\r\n            if (res.updateQuestion.question.answerType !== \"TEXT\") {\r\n                const choices = form.getFieldValue('choices')\r\n                console.log(choices);\r\n                choices.map(function (choice) {\r\n                    choice.question = res.updateQuestion.question.id\r\n                    if (choice.id === undefined) {\r\n                        return createChoice({ variables: choice })\r\n                    }\r\n                    return updateChoice({ variables: choice })\r\n                })\r\n            }\r\n            message.success('Амжилттай хадгаллаа');\r\n        }\r\n    });\r\n\r\n    const handleDeleteChoice = (value) => {\r\n        let choice = form.getFieldValue('choices')[value];\r\n        if (choice !== undefined && choice.hasOwnProperty('id') ) {\r\n            destroyChoice({ variables: { id: choice.id } });\r\n        }\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        if (name === 'new') {\r\n            confirm({\r\n                title: 'Устгах уу?',\r\n                okText: 'Устгах',\r\n                okType: 'danger',\r\n                cancelText: 'Болих',\r\n                onOk() {\r\n                    setNewQuestions(null);\r\n                },\r\n            });\r\n        } else {\r\n            confirm({\r\n                title: 'Устгах уу?',\r\n                okText: 'Устгах',\r\n                okType: 'danger',\r\n                cancelText: 'Болих',\r\n                onOk() {\r\n                    destroy({ variables: { id: id } }); \r\n                },\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        let handleChoiceData = [];\r\n        \r\n        if (name !== 'new') {\r\n            questionChoiceSet.map((choice, index) => (\r\n                handleChoiceData.push({\r\n                    id: choice.id,\r\n                    answer: choice.answer,\r\n                    score: Math.floor(choice.score)\r\n                })\r\n            ))\r\n            form.setFieldsValue({\r\n                id: id,\r\n                questionLevel: questionLevel,\r\n                questionL: question,\r\n                answerType: answerType,\r\n                onlineTest: onlineTest,\r\n                hint: hint,\r\n                choices: handleChoiceData,\r\n                image: [image]\r\n            }) \r\n        } else {\r\n            form.setFieldsValue({\r\n                answerType: answerType,\r\n                onlineTest: onlineTest,\r\n                choices: handleChoiceData\r\n            }) \r\n        }\r\n\r\n    }, [form, name, question, questionLevel, onlineTest, hint, questionChoiceSet, answerType, id, image])\r\n\r\n    // ImageUpload\r\n\r\n    const imageProps = {\r\n        accept: '.jpg',\r\n        name: 'file',\r\n        multiple: false,\r\n        listType: \"picture-card\",\r\n        showUploadList: false,\r\n        beforeUpload: file => {\r\n            return false\r\n        }\r\n    };\r\n\r\n    const onImageChange = (file) => {\r\n        if (file) {\r\n            setSelectedImage(file.file)\r\n        }\r\n    }\r\n\r\n    const normFile = (e) => {\r\n        if (Array.isArray(e)) {\r\n            return e;\r\n        }\r\n        return e && e.fileList;\r\n    };\r\n\r\n    function onFinish(params) {\r\n        params.image = params.image.slice(-1)[0].originFileObj || ''\r\n        update({ variables: params })\r\n    }\r\n\r\n    return ( \r\n        \r\n        <div \r\n            className='mt-4'\r\n        >\r\n            <Form\r\n                {...layout}\r\n                form={form}\r\n                name={name}\r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item hidden name=\"id\">\r\n                    <Input/>\r\n                </Form.Item>\r\n                <Form.Item name=\"onlineTest\" hidden>\r\n                    <Input />\r\n                </Form.Item>\r\n                <Form.Item hidden name=\"answerType\">\r\n                    <Input/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label={<IntlMessage id=\"level\" />}\r\n                    name=\"questionLevel\"\r\n                    rules={[{ required: true, message: 'Хоосон орхих боломжгүй!' }]}\r\n                >\r\n                    <Select\r\n                        loading={levelLoading}\r\n                    >\r\n                        { levelData?.allQuestionLevels.map((level, index) => (\r\n                            <Option key={index} value={level.id} >{level.level}</Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label={<IntlMessage id=\"question\" />}\r\n                    name=\"questionL\"\r\n                    rules={[{ required: true, message: 'Хоосон орхих боломжгүй!' }]}\r\n                >\r\n                    <TextArea rows={4} />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label={<IntlMessage id=\"question.hint\" />}\r\n                    name=\"hint\"\r\n                >\r\n                    <TextArea rows={4} />\r\n                </Form.Item>\r\n                { (answerType === 'CHOOSE' || answerType === 'MULTIPLE')  === true && \r\n                    <Form.List name=\"choices\">\r\n                        {(fields, { add, remove }) => {\r\n                            return (\r\n                                <>\r\n                                    { fields.map((field, index) => (\r\n                                        <div key={index}>\r\n                                            <Form.Item\r\n                                                name={[index, \"id\"]} \r\n                                                hidden\r\n                                            >\r\n                                                <Input />\r\n                                            </Form.Item>\r\n                                            <Form.Item label={<><IntlMessage id=\"question.answer\" /> {field.key + 1}</>}>\r\n                                                <Input.Group compact>\r\n                                                    <Form.Item\r\n                                                        name={[index, \"score\"]} \r\n                                                        noStyle\r\n                                                        rules={[{ required: true, message: 'Хоосон орхих боломжгүй!' }]}\r\n                                                    >\r\n                                                        <Select className='w-[10%]'>\r\n                                                            <Option value={0}>\r\n                                                                <span className='flex flex-row items-center' >\r\n                                                                    <CheckIcon className='h-4 w-4 text-green-400' /> Зөв\r\n                                                                </span>\r\n                                                            </Option>\r\n                                                            <Option value={1}>\r\n                                                                <span className='flex flex-row items-center' >\r\n                                                                    <XIcon className='h-4 w-4 text-red-400' /> Буруу\r\n                                                                </span>\r\n                                                            </Option>\r\n                                                        </Select>\r\n                                                    </Form.Item>\r\n                                                    <Form.Item\r\n                                                        name={[index, \"answer\"]} \r\n                                                        noStyle\r\n                                                        rules={[{ required: true, message: 'Хоосон орхих боломжгүй!' }]}\r\n                                                    >\r\n                                                        <Input className='w-[85%]'/>\r\n                                                    </Form.Item>\r\n                                                    {fields.length > 1 ? (\r\n                                                        <Form.Item>\r\n                                                            <Button\r\n                                                                type=\"text\" \r\n                                                                danger\r\n                                                                shape=\"circle\"\r\n                                                                onClick={() => { handleDeleteChoice(index); remove(field.name);  }}\r\n                                                                icon={<MinusCircleOutlined />}\r\n                                                            />\r\n                                                        </Form.Item>\r\n                                                    ) : null}\r\n                                                </Input.Group>\r\n                                            </Form.Item>\r\n                                        </ div>\r\n                                    ))}\r\n                                    <Form.Item\r\n                                        {...formItemLayoutWithOutLabel}\r\n                                    >\r\n                                        <Button\r\n                                            type=\"text\"\r\n                                            onClick={() => add()}\r\n                                        >\r\n                                            <PlusOutlined /> Хариулт нэмэх\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </>\r\n                            );\r\n                        }}\r\n                    </Form.List>\r\n                }\r\n                <Form.Item \r\n                    label=\"Файл\"\r\n                    name=\"image\"\r\n                    valuePropName='fileList'\r\n                    getValueFromEvent={normFile} \r\n                >\r\n                    <Dragger\r\n                        {...imageProps}\r\n                        onChange={e => onImageChange(e)}\r\n                    >\r\n                        <div>\r\n                            { image ?\r\n                                <div className='flex justify-center'>\r\n                                    <img className='max-h-36' src={BASE_SERVER_URL+image} alt=\"image\"/> \r\n                                </div>\r\n                                :\r\n                                <div>\r\n                                    <CustomIcon className=\"display-3\" svg={ImageSvg}/>\r\n                                    <p>Файлыг байршуулахын тулд товшиж эсвэл чирнэ үү</p>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </Dragger>\r\n                </Form.Item>\r\n                <Form.Item className='float-right'>\r\n                    <Button \r\n                        danger\r\n                        type=\"primary\"\r\n                        className='mr-2'\r\n                        onClick={event => handleDelete()} \r\n                    > <IntlMessage id=\"delete\" /></Button>\r\n                    <Button type=\"primary\" htmlType=\"submit\"> <IntlMessage id=\"main.okText\" /> </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default QuestionFrom;","import React, { useState } from 'react';\r\nimport { Affix, Button, Col, Form, Row, Select } from 'antd';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { ALL_QUESTIONS_BY_TEST, ALL_QUESTION_LEVELS, CREATE_QUESTION } from 'graphql/test';\r\nimport Loading from 'components/shared-components/Loading';\r\nimport { classNames } from 'utils';\r\nimport QuestionFrom from './form';\r\nimport { CheckCircleIcon, MenuAlt2Icon } from '@heroicons/react/outline';\r\n\r\nconst { Option } = Select\r\n\r\nconst answerTypes = [\r\n    {\r\n        name: <IntlMessage id=\"question.choose\" />,\r\n        value: \"CHOOSE\",\r\n        bgColor: \"bg-[#B1B2FF]\",\r\n        icon: CheckCircleIcon\r\n    },\r\n    {\r\n        name: <IntlMessage id=\"question.multiple\" />,\r\n        value: \"MULTIPLE\",\r\n        bgColor: \"bg-[#AAC4FF]\",\r\n        icon: CheckCircleIcon\r\n    },\r\n    {\r\n        name: <IntlMessage id=\"question.text\" />,\r\n        value: \"TEXT\",\r\n        bgColor: \"bg-[#CDF0EA]\",\r\n        icon: MenuAlt2Icon\r\n    }\r\n]\r\n\r\nfunction Index(props) {\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    const { test } = useParams()\r\n    const [current, setCurrent] = useState({})\r\n    \r\n    const { loading, data, refetch } = useQuery(ALL_QUESTIONS_BY_TEST, {\r\n        variables: { id: test }\r\n    });\r\n\r\n    const { data: questionLevel } = useQuery(ALL_QUESTION_LEVELS)\r\n\r\n    const [create] = useMutation(CREATE_QUESTION, {\r\n        onCompleted: res => {\r\n            refetch()\r\n            form.resetFields()\r\n        }\r\n    })\r\n\r\n    function onFinish(values) {\r\n        values.onlineTest = test\r\n        values.image = ''\r\n        create({ variables: values })\r\n    }\r\n\r\n    if (loading) {\r\n        return <Loading cover='content' />\r\n    }\r\n\r\n    return ( \r\n        <>\r\n            \r\n            <div className='bg-white p-3 rounded-4'>\r\n                <Form\r\n                    form={form}\r\n                    onFinish={onFinish}\r\n                    layout=\"inline\"\r\n                    name=\"question\"\r\n                    labelCol={{\r\n                        span: 8,\r\n                    }}\r\n                    wrapperCol={{\r\n                        span: 16,\r\n                    }}\r\n                >\r\n                    <Form.Item \r\n                        name=\"answerType\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Select \r\n                            className='w-52'\r\n                            placeholder=\"Асуултын төрөл сонгох\"\r\n                        >\r\n                            <Option value=\"CHOOSE\"><IntlMessage id=\"question.choose\" /></Option>\r\n                            <Option value=\"MULTIPLE\"><IntlMessage id=\"question.multiple\" /></Option>\r\n                            <Option value=\"TEXT\"><IntlMessage id=\"question.text\" /></Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Form.Item \r\n                        name=\"questionLevel\"\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}\r\n                    >\r\n                        <Select \r\n                            className='w-52'\r\n                            placeholder=\"Асуултын түвшин сонгох\"\r\n                        >\r\n                            { questionLevel?.allQuestionLevels.map((item, index) => (\r\n                                <Option key={index} value={item.id}>{item.level}</Option>\r\n\r\n                            ))}\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType='submit'><IntlMessage id=\"main.okText\" /></Button>\r\n                    </Form.Item>\r\n                </Form>\r\n            </div>\r\n            <Row gutter={[16, 16]} className='mt-4'>\r\n                <Col span={4} >\r\n                    <Affix\r\n                        offsetTop={120} \r\n                    >\r\n                        <ul role=\"list\" className=\"mt-3 grid grid-cols-1 gap-5\">\r\n                            {answerTypes.map((item, index) => (\r\n                                <li key={index} className=\"col-span-1 flex rounded-4 hover:cursor-pointer\">\r\n                                    <div\r\n                                        className={classNames(\r\n                                            item.bgColor,\r\n                                            'flex-shrink-0 flex items-center justify-center w-16 text-white text-sm font-medium rounded-l-md'\r\n                                        )}\r\n                                    >\r\n                                        <item.icon className='h-4 w-4 text-slate-600' />\r\n                                    </div>\r\n                                    <div className=\"flex-1 flex items-center justify-between border-t border-r border-b border-gray-200 bg-white rounded-r-md truncate\">\r\n                                        <div className=\"flex-1 px-4 text-sm truncate\">\r\n                                            <p className=\"text-slate-600 font-medium hover:text-slate-600\">\r\n                                                {item.name}\r\n                                            </p>\r\n                                            <p className=\"text-gray-500\">{data.allQuestionsByTest.filter(question => question.answerType === item.value).length} асуулт</p>\r\n                                        </div>\r\n                                    </div>\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </Affix>\r\n                </Col>\r\n                <Col span={20} >\r\n                    <div className='min-screen'>\r\n                        { data.allQuestionsByTest.map((item, index) => (\r\n                            <div \r\n                                onClick={() => setCurrent(item)}\r\n                                key={index}\r\n                                className={classNames(\r\n                                    current.id === item.id ? '' : 'hover:cursor-pointer',\r\n                                    'flex flex-row justify-between bg-white rounded-4 mt-2'\r\n                                )}\r\n                            >\r\n                                <div \r\n                                    className={classNames(\r\n                                            current.id === item.id ?\r\n                                                item.answerType === 'CHOOSE' ? 'bg-[#B1B2FF]' :  \r\n                                                item.answerType === 'MULTIPLE' ? 'bg-[#AAC4FF]' : \r\n                                                item.answerType === 'TEXT' ? 'bg-[#CDF0EA]' : ''\r\n                                            : ''\r\n                                        ,\r\n                                        'w-[1%] rounded-l-4'\r\n                                    )}\r\n                                />\r\n                                <div className='px-4 w-full'>\r\n                                    { current.id === item.id ?\r\n                                        <QuestionFrom \r\n                                            key={index} \r\n                                            name={item.id} \r\n                                            refetch={refetch}\r\n                                            id={item.id}\r\n                                            answerType={item.answerType} \r\n                                            question={item.question} \r\n                                            questionLevel={item.questionLevel?.id} \r\n                                            hint={item.hint}\r\n                                            onlineTest={test}\r\n                                            questionChoiceSet={item.questionChoiceSet}\r\n                                            image={item.image}\r\n                                        />\r\n                                    :\r\n                                        <p\r\n                                            className=\"text-base my-3 font-medium text-slate-600 dark:text-navy-100\"\r\n                                        >\r\n                                            {item.question}\r\n                                        </p>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Index;"],"names":["ALL_ONLINE_TESTS","gql","CREATE_ONLINE_TEST","UPDATE_ONLINE_TEST","DELETE_ONLINE_TEST","ALL_QUESTION_LEVELS","CREATE_QUESTION_LEVEL","UPDATE_QUESTION_LEVEL","DELETE_QUESTION_LEVEL","ALL_QUESTIONS_BY_TEST","CREATE_QUESTION","UPDATE_QUESTION","DELETE_QUESTION","CREATE_QUESTION_CHOICE","UPDATE_QUESTION_CHOICE","DELETE_QUESTION_CHOICE","ALL_TAKE_TEST","CREATE_TAKE_TEST","UPDATE_TAKE_TEST","DELETE_TAKE_TEST","ALL_PARTICIPANT_BY_TEST","CREATE_PARTICIPANT","DELETE_PARTICIPANT","ALL_TAKE_LEVEL","CREATE_TAKE_LEVEL","DELETE_TAKE_LEVEL","START_TEST","UPDATE_ANSWER","TEST_TIME","FINISH_TEST","React","props","_","Icon","component","svg","className","layout","labelCol","span","wrapperCol","formItemLayoutWithOutLabel","xs","offset","sm","TextArea","Input","Option","Select","confirm","Modal","Dragger","Upload","name","refetch","answerType","setNewQuestions","question","questionLevel","id","onlineTest","hint","questionChoiceSet","image","Form","form","useState","setSelectedImage","useQuery","levelData","data","levelLoading","loading","useMutation","onCompleted","message","destroy","createChoice","updateChoice","destroyChoice","res","updateQuestion","choices","getFieldValue","console","log","map","choice","undefined","variables","update","useEffect","handleChoiceData","index","push","answer","score","Math","floor","setFieldsValue","questionL","onFinish","params","slice","originFileObj","hidden","label","IntlMessage","rules","required","allQuestionLevels","level","value","rows","fields","add","remove","field","key","compact","noStyle","CheckIcon","XIcon","length","type","danger","shape","onClick","hasOwnProperty","handleDeleteChoice","icon","MinusCircleOutlined","PlusOutlined","valuePropName","getValueFromEvent","e","Array","isArray","fileList","accept","multiple","listType","showUploadList","beforeUpload","file","onChange","src","BASE_SERVER_URL","alt","ImageSvg","event","title","okText","okType","cancelText","onOk","htmlType","answerTypes","bgColor","CheckCircleIcon","MenuAlt2Icon","test","useParams","current","setCurrent","resetFields","create","Loading","cover","values","placeholder","item","gutter","offsetTop","role","classNames","allQuestionsByTest","filter"],"sourceRoot":""}