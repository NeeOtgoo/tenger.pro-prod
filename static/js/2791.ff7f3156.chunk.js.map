{"version":3,"file":"static/js/2791.ff7f3156.chunk.js","mappings":"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","sources":["constants/Url.js","graphql/mark.js","graphql/report.js","graphql/select.js","views/app-views/mark-report/table-row.js","views/app-views/mark-report/table.js","views/app-views/mark-report/print.js","views/app-views/mark-report/index.js","../node_modules/antd/es/_util/hooks/useForceUpdate.js"],"sourcesContent":["// Emind\r\nexport const REPORT_IMAGE_URL = 'http://66.181.175.235:8001';\r\n\r\n// Dhis\r\n// export const REPORT_IMAGE_URL = 'http://103.10.20.132:8001';\r\n\r\n// Dev\r\n// export const REPORT_IMAGE_URL = 'http://192.168.1.6:8000';","import { gql } from '@apollo/client';\r\n\r\nexport const ALL_MARK = gql `\r\n    query allMarks ($markBoard: Int!) {\r\n        allMarks (markBoard: $markBoard) {\r\n            id\r\n            student {\r\n                id\r\n                familyName\r\n                name\r\n                studentCode\r\n                classes {\r\n                    classes\r\n                }\r\n                section {\r\n                    section\r\n                }\r\n            }\r\n            markRelSet {\r\n                markVal\r\n                markSetting {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n            markBoard {\r\n                subject {\r\n                    subject\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK = gql `\r\n    mutation createMark ($section: Int = 0, $studentCode: String, $markBoard: Int) {\r\n        createMark (section: $section, studentCode: $studentCode, markBoard: $markBoard) {\r\n            mark {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK = gql`\r\n    mutation deleteMark ($id: ID) {\r\n        deleteMark (id: $id) {\r\n            mark {\r\n                student {\r\n                    id\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_REL = gql `\r\n    mutation createMarkRel ($mark: Int, $markSetting: Int, $markVal: String) {\r\n        createMarkRel (mark: $mark, markSetting: $markSetting, markVal: $markVal) {\r\n            markRel {\r\n                id\r\n                markVal\r\n                markSetting {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_MARK_RELS = gql `\r\n    query allMarkRels ($mark: Int!) {\r\n        allMarkRels (mark: $mark) {\r\n            mark {\r\n                student {\r\n                    id\r\n                    studentCode\r\n                }\r\n            }\r\n            markSetting {\r\n                name\r\n                percentage\r\n            }\r\n            markVal\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_MARK_PERCENTAGE = gql `\r\n    query allMarkPercentages {\r\n        allMarkPercentages {\r\n            id\r\n            type\r\n            percentage\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_PERCENTAGE = gql `\r\n    mutation createMarkPercentage ($diam: String, $percentage: Int, $type: String) {\r\n        createMarkPercentage (diam: $diam, percentage: $percentage, type: $type) {\r\n            markPercentage {\r\n                type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_MARK_PERCENTAGE = gql `\r\n    mutation updateMarkPercentage ($diam: String, $percentage: Int, $type: String, $id: ID) {\r\n        updateMarkPercentage (diam: $diam, percentage: $percentage, type: $type, id: $id) {\r\n            markPercentage {\r\n                type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK_PERCENTAGE = gql `\r\n    mutation deleteMarkPercentage ($id: ID) {\r\n        deleteMarkPercentage (id: $id) {\r\n            markPercentage {\r\n                type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_BOARD_BY_ID = gql `\r\n    query markBoardById ($id: Int!) {\r\n        markBoardById (id: $id) {\r\n            id\r\n            schoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n            subject {\r\n                id\r\n                part\r\n                subject\r\n            }\r\n            teacher {\r\n                id\r\n                name\r\n            }\r\n            startAt \r\n            endAt\r\n            status\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_MARK_BOARD = gql `\r\n    query allMarkBoards ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"mark\", modelName: \"Mark_board\", filter: $filter) {\r\n            count\r\n        }\r\n        allMarkBoards (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            schoolyear {\r\n                id\r\n                schoolyear\r\n                season\r\n            }\r\n            subject {\r\n                id\r\n                subject\r\n            }\r\n            teacher {\r\n                id\r\n                name\r\n            }\r\n            startAt \r\n            endAt\r\n            status\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_BOARD_FROM_ROUTINE = gql `\r\n    mutation createMarkBoardFromRoutine ($endAt: String, $routine: Int, $startAt: String, $status: String) {\r\n        createMarkBoardFromRoutine (endAt: $endAt, routine: $routine, startAt: $startAt, status: $status) {\r\n            markBoard {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_BOARD = gql `\r\n    mutation createMarkBoard ($endAt: String, $schoolyear: Int, $startAt: String, $status: String, $subject: Int, $teacher: Int) {\r\n        createMarkBoard (endAt: $endAt, schoolyear: $schoolyear, startAt: $startAt, status: $status, subject: $subject, teacher: $teacher) {\r\n            markBoard {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_MARK_BOARD = gql `\r\n    mutation updateMarkBoard ($endAt: String, $schoolyear: Int, $startAt: String, $status: String, $subject: Int, $teacher: Int, $id: ID) {\r\n        updateMarkBoard (endAt: $endAt, schoolyear: $schoolyear, startAt: $startAt, status: $status, subject: $subject, teacher: $teacher, id: $id) {\r\n            markBoard {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK_BOARD = gql `\r\n    mutation deleteMarkBoard ($id: ID) {\r\n        deleteMarkBoard (id: $id) {\r\n            markBoard {\r\n                startAt\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_MARK_SETTING = gql `\r\n    query allMarkSettings {\r\n        allMarkSettings {\r\n            id\r\n            name\r\n            part\r\n            passVal\r\n            percentage\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_SETTINGS_BY_PART = gql`\r\n    query markSettingsByPart ($part: String!) {\r\n        markSettingsByPart (part: $part) {\r\n            id\r\n            name\r\n            part\r\n            passVal\r\n            percentage\r\n        }\r\n    }\r\n`\r\n\r\nexport const CREATE_MARK_SETTING = gql `\r\n    mutation createMarkSetting ($name: String, $percentage: Int, $part: String, $passVal: Int) {\r\n        createMarkSetting (name: $name, percentage: $percentage, part: $part, passVal: $passVal) {\r\n            markSetting {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_MARK_SETTING = gql `\r\n    mutation updateMarkSetting ($name: String, $percentage: Int, $id: ID, $part: String, $passVal: Int) {\r\n        updateMarkSetting (name: $name, percentage: $percentage, id: $id, part: $part, passVal: $passVal) {\r\n            markSetting {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK_SETTING = gql `\r\n    mutation deleteMarkSetting($id: ID) {\r\n        deleteMarkSetting (id: $id) {\r\n            markSetting {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`","import { gql } from \"@apollo/client\";\r\n\r\nexport const STUDENT_REPORT = gql `\r\n    query studentReport ($studentCode: String) {\r\n        studentReport (studentCode: $studentCode) {\r\n            school\r\n            textTop\r\n            textMid\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_REPORT_SECTION = gql `\r\n    query studentReportSection ($section: Int) {\r\n        studentReportSection (section: $section) {\r\n            school\r\n            textTop\r\n            textMid\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql `\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK_REPORT = gql `\r\n    query studentMarkReport ($studentCode: String) {\r\n        studentMarkReport (studentCode: $studentCode) {\r\n            school\r\n            textTop\r\n            textMid0\r\n            textMid1\r\n            textMid2\r\n            textMid3\r\n            textMid4\r\n            textMid5\r\n            textMid6\r\n            textMid7\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK_REPORT_SECTION = gql `\r\n    query studentMarkReportSection ($section: Int) {\r\n        studentMarkReportSection (section: $section) {\r\n            school\r\n            textTop\r\n            textMid0\r\n            textMid1\r\n            textMid2\r\n            textMid3\r\n            textMid4\r\n            textMid5\r\n            textMid6\r\n            textMid7\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_SCHOOL_YEAR = gql `\r\n    query studentSchoolyear ($student: Int) {\r\n        studentSchoolyear (student: $student) {\r\n            id\r\n            schoolyear\r\n            season\r\n            semesterCode\r\n            startDate\r\n            endDate\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK = gql`\r\n    query studentMark ($student: Int, $schoolyear: Int, $part: String) {\r\n        studentMark (student: $student, schoolyear: $schoolyear, part: $part) {\r\n            id\r\n            markBoard {\r\n                subject {\r\n                    subject \r\n                    subjectCode\r\n                    credit\r\n                }\r\n            }\r\n            markRelSet {\r\n                markSetting {\r\n                    name\r\n                }\r\n                markVal\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_MARK_REL = gql `\r\n    query studentMarkRel ($student: Int, $schoolyear: Int) {\r\n        studentMarkRel (student: $student, schoolyear: $schoolyear) {\r\n            id\r\n            mark {\r\n                student {\r\n                    studentCode \r\n                }\r\n                markBoard {\r\n                    subject {\r\n                        id\r\n                        subject\r\n                        subjectCode\r\n                        credit\r\n                    }\r\n                    schoolyear {\r\n                        schoolyear \r\n                        season\r\n                    }\r\n                }\r\n            }\r\n            markSetting {\r\n                name\r\n                percentage\r\n            }\r\n            markVal\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_PERCENTAGE = gql `\r\n    query markPercentage ($percentage: Int) {\r\n        markPercentage (percentage: $percentage) {\r\n            type\r\n            percentage\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON = gql `\r\n    query markCon ($subject: Int!, $schoolyear: Int!, $student: Int!) {\r\n        markCon (subject: $subject, schoolyear: $schoolyear, student: $student) {\r\n            percentage\r\n            markRel {\r\n                markVal\r\n                markSetting\r\n            }\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_SUBJECT = gql `\r\n    query markconSubject ($schoolyear: Int!, $section: Int!, $part: String!) {\r\n        markconSubject (schoolyear: $schoolyear, section: $section, part: $part) {\r\n            subjectId\r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_STUDENT = gql `\r\n    query markconStudent ($section: Int!) {\r\n        markconStudent (section: $section) {\r\n            studentId\r\n            familyName\r\n            name\r\n            studentCode\r\n            registerNo\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_QUERY = gql`\r\n    query markConQuery ($section: Int!, $schoolyear: Int!) {\r\n        markconSubjectA: markconSubject (schoolyear: $schoolyear, section: $section, part: \"A\") {\r\n            subjectId \r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n        markconSubjectB: markconSubject (schoolyear: $schoolyear, section: $section, part: \"B\") {\r\n            subjectId \r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n        markconSubjectC: markconSubject (schoolyear: $schoolyear, section: $section, part: \"C\") {\r\n            subjectId \r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n        markconStudent (section: $section) {\r\n            studentId\r\n            familyName\r\n            name\r\n            studentCode\r\n            registerNo\r\n        }\r\n    },\r\n`;\r\n\r\nexport const ALL_STUDENTS_REPORT = gql`\r\n    query allStudentsReport {\r\n        allStudentsReport {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            studentCode\r\n            surname\r\n            familyName\r\n            familyNameMgl\r\n            name\r\n            nameMgl\r\n            religion\r\n            registerNo\r\n            nationality\r\n            state\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            citizen\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            joinDate\r\n            joinBefore\r\n            sex\r\n            birthdate\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            joinSchoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n            classesNumeric\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql `\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject \r\n            subjectCode\r\n            credit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n            programNumeric\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;","import React, { useEffect } from 'react'\r\n\r\nconst TableRow = ({ data, settings, setTotalCredit, schoolyear, part }) => {\r\n\r\n    function inRange(x, min, max) {\r\n        return x >= min && x <= max;\r\n    }\r\n\r\n    function checkPass(x, min) {\r\n        return x >= min\r\n    }\r\n\r\n    function getPartValue({ value }) {\r\n\r\n        if (data.markRelSet.length === settings.length) {\r\n\r\n            if (part === \"A\") {\r\n                switch (true) {\r\n                    case inRange(value, 0, 29):\r\n                        return \"I\"\r\n                    case inRange(value, 30, 39):\r\n                        return \"II\"\r\n                    case inRange(value, 40, 49):\r\n                        return \"III\"\r\n                    case inRange(value, 50, 59):\r\n                        return \"IV\"\r\n                    case inRange(value, 60, 69):\r\n                        return \"V\"\r\n                    case inRange(value, 70, 79):\r\n                        return \"VI\"\r\n                    case inRange(value, 80, 89):\r\n                        return \"VII\"\r\n                    case inRange(value, 90, 100):\r\n                        return \"VIII\"\r\n                    default:\r\n                        return null\r\n                }\r\n            } else if (part === \"B\") {\r\n                switch (true) {\r\n                    case inRange(value, 0, 59):\r\n                        return \"F\"\r\n                    case inRange(value, 60, 63):\r\n                        return \"D-\"\r\n                    case inRange(value, 64, 67):\r\n                        return \"D\"\r\n                    case inRange(value, 68, 70):\r\n                        return \"D+\"\r\n                    case inRange(value, 71, 73):\r\n                        return \"C-\"\r\n                    case inRange(value, 74, 77):\r\n                        return \"C\"\r\n                    case inRange(value, 78, 80):\r\n                        return \"C+\"\r\n                    case inRange(value, 81, 83):\r\n                        return \"B-\"\r\n                    case inRange(value, 84, 87):\r\n                        return \"B\"\r\n                    case inRange(value, 88, 90):\r\n                        return \"B+\"\r\n                    case inRange(value, 91, 95):\r\n                        return \"A-\"\r\n                    case inRange(value, 96, 100):\r\n                        return \"A\"\r\n                    default:\r\n                        return null\r\n                }\r\n            } else if (part === \"C\")  {\r\n                const checked = settings.map(setting => (\r\n                    data.markRelSet.every(x => \r\n                        x.markSetting.name === setting.name ? checkPass(x.markVal, setting.passVal) : true\r\n                    )\r\n                ))\r\n                console.log(checked);\r\n                if (checked.every(x => x === true)) {\r\n                    return \"Чадамжтай\"\r\n                } else {\r\n                    return \"Хараахан чадамж эзэмшээгүй\"\r\n                }\r\n            }\r\n            \r\n        } else {\r\n\r\n            return null\r\n\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTotalCredit(prevCredit => Math.floor(prevCredit) + Math.floor(data.markBoard.subject.credit))\r\n    }, [data])\r\n\r\n    return (\r\n        <tr>\r\n            <td className='text-center'>{schoolyear.schoolyear}</td>\r\n            <td className='text-center'>{schoolyear.season}</td>\r\n            <td className='text-center'>{data.markBoard.subject.subjectCode}</td>\r\n            <td className='text-center'>{data.markBoard.subject.subject}</td>\r\n            <td className='text-center'>{Math.floor(data.markBoard.subject.credit)}</td>\r\n            { settings.map(function(item, index) {\r\n                \r\n                const markVal = data.markRelSet.find(x => x.markSetting.name === item.name)?.markVal\r\n\r\n                return (\r\n                    <td \r\n                        key={index} \r\n                        className='text-center'\r\n                    >\r\n                        { markVal &&  Math.floor(markVal) }\r\n                    </td>\r\n                )\r\n            })}\r\n            { part !== \"C\" &&\r\n                <td className='text-center'>\r\n                    {data.markRelSet.reduce((total, n) => Math.floor(total) + Math.floor(n.markVal), 0)}\r\n                </td>\r\n            }\r\n            <td className='text-center'>\r\n                {getPartValue({ value: data.markRelSet.reduce((total, n) => Math.floor(total) + Math.floor(n.markVal), 0) })}\r\n            </td>\r\n        </tr>        \r\n    )\r\n}\r\n\r\nexport default TableRow","import React, { useState } from 'react'\r\nimport { useQuery } from '@apollo/client';\r\nimport { MARK_SETTINGS_BY_PART } from 'graphql/mark';\r\nimport { STUDENT_MARK } from 'graphql/report';\r\nimport TableRow from './table-row'\r\n\r\nconst SchoolYearTable = ({ columns, data, setTotalCredit, student, part }) => {\r\n\r\n    const [partMark, setPartMark] = useState([])\r\n\r\n    const [partSettings, setPartSettings] = useState([])\r\n\r\n    useQuery(STUDENT_MARK, {\r\n        variables: { student: student, schoolyear: data.id, part: part },\r\n        onCompleted: data => {\r\n            setPartMark(data.studentMark);\r\n        }\r\n    })\r\n\r\n    useQuery(MARK_SETTINGS_BY_PART, {\r\n        variables: { part: part },\r\n        onCompleted: data => {\r\n            setPartSettings(data.markSettingsByPart);\r\n        }\r\n    })\r\n\r\n    return (\r\n        partMark.length > 0 && (\r\n            <table className='w-full mt-4' >\r\n                <thead>\r\n                    <tr>\r\n                        { columns.map((col, index) => (\r\n                            <th className='w-44' key={index} >{col.title}</th>\r\n                        ))}\r\n                        { partSettings.map((col, index) => (\r\n                            <th className='w-20' key={index} >{col.name}</th>\r\n                        ))}\r\n                        { part !== \"C\" &&\r\n                            <th className='w-20' >Дүн</th>\r\n                        }\r\n                        <th className='w-20' >Түвшин</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    { partMark.map((item, index) => {\r\n                        return (\r\n                            <TableRow \r\n                                part={part}\r\n                                key={index} \r\n                                settings={partSettings} \r\n                                schoolyear={data}\r\n                                setTotalCredit={setTotalCredit}\r\n                                data={item} \r\n                            />\r\n                        )    \r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        ) \r\n    )\r\n}\r\n\r\nexport default SchoolYearTable","import React, { Fragment, useState } from 'react';\r\nimport { STUDENT_SCHOOL_YEAR } from 'graphql/report';\r\nimport { useQuery  } from '@apollo/client';\r\nimport { REPORT_IMAGE_URL } from 'constants/Url';\r\nimport SchoolYearTable from './table';\r\nimport Loading from 'components/shared-components/Loading';\r\nimport useDomain from 'hooks/useDomain';\r\n\r\n// Дараалалд оруулах функц\r\n\r\n// function groupByKey(array, key) {\r\n//     return array.reduce((hash, obj) => {\r\n//         if(obj[key] === undefined) return hash; \r\n//         return Object.assign(hash, { [obj[key]]:( hash[obj[key]] || [] ).concat(obj)})\r\n//     }, {})\r\n// }\r\n\r\nconst PrintCard = React.forwardRef(({ data }, ref) => {\r\n\r\n    const [schoolYears, setSchoolYears] = useState([]);\r\n\r\n    const [totalCredit, setTotalCredit] = useState(0);\r\n\r\n    const { loading: studentSchoolyearLoading } = useQuery(STUDENT_SCHOOL_YEAR, {\r\n        variables: { student: data.textMid0 },\r\n        onCompleted: data => {\r\n            setSchoolYears(data.studentSchoolyear)\r\n        }\r\n    });\r\n\r\n    const { domainData } = useDomain()\r\n    const columns = [\r\n        {\r\n          title: 'Хичээлийн жил',\r\n        },\r\n        {\r\n          title: 'Улирал',\r\n        },\r\n        {\r\n          title: 'Код',\r\n        },\r\n        {\r\n          title: 'Хичээл',\r\n        },\r\n        {\r\n          title: 'Багц цаг',\r\n        },\r\n    ];\r\n\r\n    if (studentSchoolyearLoading) {\r\n        return (<Loading cover='content' />)\r\n    }\r\n    \r\n    return (\r\n        <div ref={ref} >\r\n            <style>\r\n                {\r\n                    \"table, th, td {border: 1px solid black }\"\r\n                }\r\n            </style>\r\n            <div className=\"page-break p-5 flex flex-col justify-center bg-white rounded-2 text-black\">\r\n                <div className='flex flex-row items-center justify-around'>\r\n                    <img\r\n                        className='w-24'\r\n                        src={domainData.logo}\r\n                        alt={data.studentCode}\r\n                    />\r\n                    <div className='text-center' >\r\n                        <p className='text-3xl font-bold text-black' >{data.school}</p>\r\n                        <div className='text-center mt-3 text-xs' dangerouslySetInnerHTML={{ __html: data.textTop }} />\r\n                    </div>\r\n                    <img\r\n                        className='w-24'\r\n                        src={REPORT_IMAGE_URL+data.studentPhoto}\r\n                        alt={data.studentPhoto}\r\n                    />\r\n                </div>\r\n                <div className='w-full'>\r\n                    <p className='font-bold text-center w-full text-black text-2xl'>Дүнгийн мэдээлэл</p>\r\n                    <div className='mt-4 grid grid-rows-5 grid-cols-2 grid-flow-col'>\r\n                        <div className='flex flex-row justify-around text-start w-full'>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2' >Эцэг/эхийн нэр</p>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2 font-semibold' >{data.textMid1}</p>\r\n                        </div>\r\n                        <div className='flex flex-row justify-around'>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2' >Өөрийн нэр</p>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2 font-semibold' >{data.textMid2}</p>\r\n                        </div>\r\n                        <div className='flex flex-row justify-around'>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2' >Регистрийн дугаар</p>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2 font-semibold' >{data.textMid3}</p>\r\n                        </div>\r\n                        <div className='flex flex-row justify-around'>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2' >Суралцагчийн дугаар</p>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2 font-semibold' >{data.studentCode}</p>\r\n                        </div>\r\n                        <div className='flex flex-row justify-around'>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2' >Хичээлийн жил</p>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2 font-semibold' >{data.textMid4}</p>\r\n                        </div>\r\n                        <div className='flex flex-row justify-around'>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2' >Хөтөлбөрийн индекс</p>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2 font-semibold' >{data.textMid5}</p>\r\n                        </div>\r\n                        <div className='flex flex-row justify-around'>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2' >Хөтөлбөр</p>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2 font-semibold' >{data.textMid6}</p>\r\n                        </div>\r\n                        <div className='flex flex-row justify-around'>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2' >Зэрэг</p>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2 font-semibold' >{data.textMid7}</p>\r\n                        </div>\r\n                        <div className='flex flex-row justify-around'>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2' >Нийт багц цаг</p>\r\n                            <p className='mb-0 text-black text-lg text-start w-1/2 font-semibold' >{totalCredit}</p>\r\n                        </div>\r\n                    </div>\r\n                    { schoolYears.map(function(item, index) {\r\n                        return (\r\n                            <Fragment key={index}>\r\n                                <SchoolYearTable \r\n                                    student={data.textMid0}\r\n                                    columns={columns} \r\n                                    setTotalCredit={setTotalCredit}\r\n                                    data={item} \r\n                                    part=\"A\"\r\n                                />\r\n                                <SchoolYearTable \r\n                                    student={data.textMid0}\r\n                                    columns={columns} \r\n                                    setTotalCredit={setTotalCredit}\r\n                                    data={item} \r\n                                    part=\"B\"\r\n                                />\r\n                                <SchoolYearTable \r\n                                    student={data.textMid0}\r\n                                    columns={columns} \r\n                                    setTotalCredit={setTotalCredit}\r\n                                    data={item} \r\n                                    part=\"C\"\r\n                                />\r\n                            </Fragment>\r\n                        )\r\n                    })}\r\n                    <div className='mt-4 text-center'>\r\n                        <div dangerouslySetInnerHTML={{ __html: data.textBottom }} />\r\n                        <img \r\n                            className='mx-auto'\r\n                            src={`https://chart.googleapis.com/chart?chs=177x177&cht=qr&chl=http%3A%2F%2F${window.location.hostname}%2Fstudent-mark-report%2F${data.studentCode}&chld=H&choe=UTF-8`} \r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default PrintCard","import React, { useContext, useEffect, useRef, useState } from 'react'\r\nimport { useLazyQuery, useQuery } from \"@apollo/client\";\r\nimport { Button, Card, Col, Empty, Form, Result, Row, Select, Skeleton } from 'antd';\r\nimport { useReactToPrint } from \"react-to-print\";\r\nimport { STUDENT_MARK_REPORT, STUDENT_MARK_REPORT_SECTION } from 'graphql/report';\r\nimport { PrinterOutlined } from '@ant-design/icons';\r\nimport PrintCard from './print';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { SECTIONS_BY_PROGRAM, SELECT_PROGRAM, SELECT_STUDENT } from 'graphql/select';\r\nimport Loading from 'components/shared-components/Loading';\r\nimport { UserContext } from 'hooks/UserContextProvider';\r\n\r\nconst { Option } = Select;\r\n\r\nconst Index = () => {\r\n\r\n    const [formSection] = Form.useForm();\r\n    const [formStudent] = Form.useForm();\r\n\r\n    const [programs, setPrograms] = useState([]);\r\n    const [sections, setSections] = useState([]);\r\n    const [students, setStudents] = useState([]);\r\n    \r\n    const { user } = useContext(UserContext)\r\n\r\n    const { loading: programLoading } = useQuery(SELECT_PROGRAM, {\r\n        onCompleted: data => {\r\n            setPrograms(data.allPrograms);\r\n        }\r\n    })\r\n\r\n    const [fetchSection, { loading: sectionLoading}] = useLazyQuery(SECTIONS_BY_PROGRAM, {\r\n        onCompleted: data => {\r\n            setSections(data.sectionsByProgram);\r\n        }\r\n    })\r\n\r\n    const [fetchStudent, { loading: studentLoading }] = useLazyQuery(SELECT_STUDENT, {\r\n        onCompleted: data => {\r\n            setStudents(data.allStudents)\r\n        }\r\n    })\r\n\r\n    const [datas, setDatas] = useState([]);\r\n\r\n    const [getReport, { error: reportError, loading: getReportLoading }] = useLazyQuery(STUDENT_MARK_REPORT, {\r\n        onError: error => {\r\n            setDatas([]);\r\n        },\r\n        onCompleted: data => {\r\n            setDatas([data.studentMarkReport]);\r\n        }\r\n    });\r\n\r\n    const [getSectionReport, { error, loading }] = useLazyQuery(STUDENT_MARK_REPORT_SECTION, {\r\n        onError: error => {\r\n            setDatas([]);\r\n        },\r\n        onCompleted: data => {\r\n            setDatas(data.studentMarkReportSection);\r\n        }\r\n    });\r\n\r\n    const componentRef = useRef();\r\n    const handlePrint = useReactToPrint({\r\n        content: () => componentRef.current,\r\n    });\r\n\r\n    const onFinish = (values) => {\r\n        if (values.hasOwnProperty(\"studentCode\")) {\r\n            getReport({ variables: { studentCode: values.studentCode } })\r\n        } else {\r\n            getSectionReport({ variables: { section: values.section } })\r\n        }\r\n    }\r\n\r\n    const onProgramSelect = (program) => {\r\n        formSection.setFieldsValue({\r\n            section: \"\",\r\n        });\r\n        fetchSection({ variables: { program: program } })\r\n    }\r\n\r\n    const onStudentSearch = (value) => {\r\n        if (value === '') {\r\n            setStudents([]);\r\n        } else {\r\n            fetchStudent({ variables: { offset: 0, limit: 99999999, filter: value } });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n      \r\n        if (user.isStudent === true) {\r\n            getReport({ variables: { studentCode: user.student.studentCode } })\r\n        }\r\n        \r\n    }, [getReport, user]);\r\n\r\n    const ReportView = () => {\r\n        if (reportError || error) {\r\n            return (\r\n                <Result\r\n                    status=\"404\"\r\n                    title=\"404\"\r\n                    subTitle=\"Мэдээлэл олдсонгүй\"\r\n                />\r\n            )\r\n        }\r\n        return (\r\n            datas.length > 0 &&\r\n                <>\r\n                    <div className='text-right'>\r\n                        <Button onClick={handlePrint} type=\"primary\" icon={<PrinterOutlined />} > <IntlMessage id=\"print\" /> </Button>\r\n                    </div>\r\n                    <div ref={componentRef} className='mt-4'>\r\n                        { datas.map((data, index) => (\r\n                            <PrintCard key={index} data={data}/>\r\n                        ))}\r\n                    </div>\r\n                </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { user.isStudent === false &&\r\n                <Skeleton active loading={programLoading} >\r\n                    <Row gutter={16}>\r\n                        <Col xs={24} xl={12}>\r\n                            <Card \r\n                                className='mt-4'\r\n                                title={<IntlMessage id=\"by-section\" />}\r\n                            >\r\n                                <Form  \r\n                                    id=\"section\"\r\n                                    layout={'vertical'}\r\n                                    form={formSection}\r\n                                    name=\"control-hooks\" \r\n                                    onFinish={onFinish}\r\n                                >\r\n                                    <Form.Item \r\n                                        name=\"program\" \r\n                                        label={<IntlMessage id=\"program\" />} \r\n                                        rules={[\r\n                                            { \r\n                                                required: true,\r\n                                                message: <IntlMessage id=\"form.required\" /> \r\n                                            }\r\n                                        ]}\r\n                                    >\r\n                                        <Select\r\n                                            onSelect={onProgramSelect}\r\n                                            allowClear\r\n                                            showSearch\r\n                                            optionFilterProp=\"children\"\r\n                                            filterOption={(input, option) =>\r\n                                                option.children.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                            }\r\n                                        >\r\n                                            { programs.map((program, index) => (\r\n                                                <Option value={program.id} key={index}>{program.program} / {program.programNumeric}</Option>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item \r\n                                        name=\"section\" \r\n                                        label={<IntlMessage id=\"section\" />} \r\n                                        rules={[\r\n                                            { \r\n                                                required: true,\r\n                                                message: <IntlMessage id=\"form.required\" /> \r\n                                            }\r\n                                        ]}\r\n                                    >\r\n                                        <Select\r\n                                            allowClear\r\n                                            notFoundContent={\r\n                                                sectionLoading ? <Loading cover='content' /> \r\n                                                : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                                            }\r\n                                        >\r\n                                            { sections.map((section, index) => (\r\n                                                <Option value={section.id} key={index}>{section.classes.classes} / {section.section}</Option>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item className='text-right'>\r\n                                        <Button className=\"mr-2\" type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n                                            Сонгох\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </Card>\r\n                        </Col>\r\n                        <Col xs={24} xl={12}>\r\n                            <Card \r\n                                className='mt-4'\r\n                                title={<IntlMessage id=\"by-student-code\" />}\r\n                            >\r\n                                <Form  \r\n                                    id=\"student\"\r\n                                    layout={'vertical'}\r\n                                    form={formStudent}\r\n                                    name=\"control-hooks\" \r\n                                    onFinish={onFinish}\r\n                                >\r\n                                    <Form.Item \r\n                                        name=\"studentCode\" \r\n                                        label={<IntlMessage id=\"studentCode\" />} \r\n                                        rules={[\r\n                                            { \r\n                                                required: true,\r\n                                                message: <IntlMessage id=\"form.required\" /> \r\n                                            }\r\n                                        ]}\r\n                                    >\r\n                                        <Select\r\n                                            showSearch\r\n                                            filterOption={false}\r\n                                            notFoundContent={\r\n                                                studentLoading ? <Loading cover='content' /> \r\n                                                : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                                            }\r\n                                            onSearch={onStudentSearch}\r\n                                        >\r\n                                            { students.map((student, index) => (\r\n                                                <Option value={student.studentCode} key={index}> {student.familyName} {student.name} / {student.studentCode}</Option>\r\n                                            ))}\r\n                                        </Select>\r\n                                    </Form.Item>\r\n                                    <Form.Item className='text-right'>\r\n                                        <Button className=\"mr-2\" type=\"primary\" htmlType=\"submit\" loading={getReportLoading}>\r\n                                            Сонгох\r\n                                        </Button>\r\n                                    </Form.Item>\r\n                                </Form>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Skeleton>\r\n            }\r\n            <ReportView />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Index\r\n","import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nexport default function useForceUpdate() {\n  var _React$useReducer = React.useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      forceUpdate = _React$useReducer2[1];\n\n  return forceUpdate;\n}"],"names":["REPORT_IMAGE_URL","ALL_MARK","gql","CREATE_MARK","DELETE_MARK","CREATE_MARK_REL","ALL_MARK_PERCENTAGE","CREATE_MARK_PERCENTAGE","UPDATE_MARK_PERCENTAGE","DELETE_MARK_PERCENTAGE","MARK_BOARD_BY_ID","ALL_MARK_BOARD","CREATE_MARK_BOARD_FROM_ROUTINE","CREATE_MARK_BOARD","UPDATE_MARK_BOARD","DELETE_MARK_BOARD","ALL_MARK_SETTING","MARK_SETTINGS_BY_PART","CREATE_MARK_SETTING","UPDATE_MARK_SETTING","DELETE_MARK_SETTING","STUDENT_REPORT","STUDENT_REPORT_SECTION","STUDENT_MARK_REPORT","STUDENT_MARK_REPORT_SECTION","STUDENT_SCHOOL_YEAR","STUDENT_MARK","MARK_CON","MARK_CON_QUERY","ALL_STUDENTS_REPORT","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","data","settings","setTotalCredit","schoolyear","part","inRange","x","min","max","useEffect","prevCredit","Math","floor","markBoard","subject","credit","className","season","subjectCode","map","item","index","markVal","markRelSet","find","markSetting","name","reduce","total","n","value","length","checked","setting","every","checkPass","passVal","console","log","getPartValue","columns","student","useState","partMark","setPartMark","partSettings","setPartSettings","useQuery","variables","id","onCompleted","studentMark","markSettingsByPart","col","title","React","ref","schoolYears","setSchoolYears","totalCredit","textMid0","studentSchoolyear","studentSchoolyearLoading","loading","domainData","useDomain","Loading","cover","src","logo","alt","studentCode","school","dangerouslySetInnerHTML","__html","textTop","studentPhoto","textMid1","textMid2","textMid3","textMid4","textMid5","textMid6","textMid7","Fragment","textBottom","window","location","hostname","Option","Select","Form","formSection","formStudent","programs","setPrograms","sections","setSections","students","setStudents","user","useContext","UserContext","programLoading","allPrograms","useLazyQuery","sectionsByProgram","fetchSection","sectionLoading","allStudents","fetchStudent","studentLoading","datas","setDatas","onError","error","studentMarkReport","getReport","reportError","getReportLoading","studentMarkReportSection","getSectionReport","componentRef","useRef","handlePrint","useReactToPrint","content","current","onFinish","values","hasOwnProperty","section","isStudent","ReportView","status","subTitle","onClick","type","icon","PrinterOutlined","IntlMessage","active","gutter","xs","xl","layout","form","label","rules","required","message","onSelect","program","setFieldsValue","allowClear","showSearch","optionFilterProp","filterOption","input","option","children","toString","toLowerCase","indexOf","programNumeric","notFoundContent","image","Empty","classes","htmlType","onSearch","offset","limit","filter","familyName","useForceUpdate","_React$useReducer","_slicedToArray"],"sourceRoot":""}