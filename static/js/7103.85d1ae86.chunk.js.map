{"version":3,"file":"static/js/7103.85d1ae86.chunk.js","mappings":"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","sources":["graphql/all.js","graphql/report.js","graphql/select.js","views/app-views/report/mark-consolidation/table.js","views/app-views/report/mark-consolidation/index.js","../node_modules/antd/es/_util/hooks/useFlexGapSupport.js","../node_modules/antd/es/_util/hooks/useForceUpdate.js","../node_modules/antd/es/_util/styleChecker.js","../node_modules/antd/es/grid/RowContext.js","../node_modules/antd/es/grid/col.js","../node_modules/antd/es/grid/row.js"],"sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const ALL_SUBJECTS = gql `\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            part\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            subject \r\n            subjectMgl\r\n            subjectCode\r\n            credit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TEACHER_STATUS = gql `\r\n    query allTeacherStatuss {\r\n        allTeacherStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_STATUS = gql `\r\n    query allStudentStatuss {\r\n        allStudentStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_STATUS_EXTRA = gql `\r\n    query allStudentStatusExtras {\r\n        allStudentStatusExtras {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_USERS = gql `\r\n    query allUsers {\r\n        allUsers {\r\n            id\r\n            username\r\n            email\r\n        }\r\n    }\r\n`;\r\n\r\nexport const USER_BY_USERNAME = gql `\r\n    query userByUsername($username: String!) {\r\n        userByUsername(username: $username) {\r\n            id\r\n            username\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EMPLOYEES_ATTANDANCE_BY_RANGE = gql`\r\n    query employeesAttandanceByRange ($startDate: DateTime!, $endDate: DateTime!) {\r\n        employeesAttandanceByRange (startDate: $startDate, endDate: $endDate) {\r\n            id\r\n            isIn\r\n            isOut\r\n            timeIn\r\n            timeOut\r\n            user {\r\n                id\r\n                isTeacher\r\n                isEmployee\r\n                teacher {\r\n                    familyName\r\n                    name\r\n                    teacherCode\r\n                }\r\n                employee {\r\n                    familyName\r\n                    name\r\n                    employeeCode\r\n                }\r\n                groups {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_TEACHER_AND_EMPLOYESS = gql`\r\n    query allAttendaceEmployees {\r\n        allAttendaceEmployees {\r\n            username\r\n            email\r\n            isTeacher\r\n            isEmployee\r\n            teacher {\r\n                teacherCode\r\n                familyName\r\n                name\r\n            }\r\n            employee {\r\n                employeeCode\r\n                familyName\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EMPLOYEES_COMPARTMENT = gql`\r\n    query allEmployeesCompartment {\r\n        allEmployeesCompartment {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_EMPLOYEES = gql`\r\n    query allEmployees ($filter: String) {\r\n        allEmployees (filter: $filter) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n                groups {\r\n                    name\r\n                }\r\n            }\r\n            compartment {\r\n                id\r\n                name\r\n            }\r\n            employeeCode\r\n            familyName\r\n            name\r\n            registerNo\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            sex\r\n            birthdate\r\n            birthCity {\r\n                id\r\n            }\r\n            birthDistrict {\r\n                id\r\n            }\r\n            status {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_TEACHERS = gql`\r\n  \tquery allTeachers ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allTeachers (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            teacherCode\r\n            familyName\r\n            name\r\n            registerNo\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            joinDate\r\n            joinBefore\r\n            sex\r\n            birthdate\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_STUDENTS = gql`\r\n  \tquery allStudents ($filter: String, $program: Int, $classes: Int) {\r\n        allStudents (filter: $filter, program: $program, classes: $classes) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            studentCode\r\n            familyName\r\n            name\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            registerNo\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            joinDate\r\n            joinBefore\r\n            sex\r\n            birthdate\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            joinSchoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_CITYS = gql`\r\n  \tquery allCitys{\r\n        allCitys {\r\n            id\r\n            name\r\n            code\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_DISTRICTS = gql `\r\n    query allDistricts {\r\n        allDistricts {\r\n            id\r\n            code\r\n            name\r\n            cityID {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_PROGRAMS = gql`\r\n  \tquery allPrograms{\r\n        allPrograms {\r\n            id\r\n            program\r\n            programMgl\r\n            programNumeric\r\n            maxStudentNum\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            status\r\n            createdAt\r\n            updatedAt\r\n        }\r\n\t  }\r\n`;\r\n\r\nexport const ALL_SCHOOLS = gql`\r\n  \tquery allSchools {\r\n        allSchools {\r\n            id\r\n            name\r\n            nameMgl\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_SUB_SCHOOLS = gql`\r\n  \tquery allSubSchools{\r\n        allSubSchools {\r\n            id\r\n            name\r\n            nameMgl\r\n            school {\r\n                id\r\n                name\r\n            }\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql `\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_CLASSESS = gql `\r\n    query allClassess ($program: Int!, $offset: Int!, $limit: Int!, $filter: String) {\r\n        allClassess (program: $program, offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            classes\r\n            classesMgl\r\n            classesNumeric\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            maxStudentNum\r\n            teacher {\r\n                id\r\n                name\r\n                teacherCode\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            status\r\n            course\r\n            endCourse\r\n            sectionSet {\r\n                id\r\n                section\r\n                classes {\r\n                    id\r\n                    classes\r\n                }\r\n                program {\r\n                    id\r\n                    program\r\n                }\r\n                subSchool {\r\n                    id\r\n                    name\r\n                }\r\n                school {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const ALL_CLASSTIME = gql `\r\n    query allClasstimes {\r\n        allClasstimes {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\nexport const ALL_SCHOOL_YEAR = gql `\r\n    query allSchoolyears {\r\n        allSchoolyears {\r\n            id\r\n            schoolyear\r\n            season\r\n            semesterCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_PARENTS = gql `\r\n    query allParents ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allParents (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            user {\r\n                username\r\n                email\r\n            }\r\n            familyName\r\n            name\r\n            photo\r\n            profession\r\n            phone\r\n            address\r\n            addressLive\r\n            student {\r\n                id\r\n                studentCode\r\n                familyName\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTION_BY_CLASSES = gql `\r\n    query sectionsByClasses ($classes: Int!) {\r\n        sectionsByClasses (classes: $classes) {\r\n            id\r\n            section\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TRANSFER_BY_STUDENT = gql`\r\n    query transfersByStudent ($student: Int!) {\r\n        transfersByStudent (student: $student) {\r\n            id\r\n            student {\r\n                familyName\r\n                name\r\n                photo\r\n                studentCode\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            docDate\r\n            docNum\r\n            description\r\n            oldData\r\n        }\r\n    }\r\n`;  \r\n\r\nexport const ALL_EVENT_TYPES = gql`\r\n    query allEventTypes {\r\n        allEventTypes {\r\n            id\r\n            name\r\n            color\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EVENTS = gql `\r\n    query allEvents {\r\n        allEvents {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType {\r\n                id\r\n                name\r\n                color\r\n            }\r\n        }\r\n    } \r\n`;\r\n\r\nexport const ALL_EVENTS_BY_DATE = gql `\r\n    query allEventsByDate ($date: Date) {\r\n        allEventsByDate (date: $date) {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType {\r\n                id\r\n                name\r\n                color\r\n            }\r\n        }\r\n    } \r\n`;\r\n\r\nexport const ALL_EVENTS_BY_TYPE = gql`\r\n    query allEventsByType ($id: Int!) {\r\n        allEventsByType (id: $id) {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType\r\n        }\r\n    }\r\n`;","import { gql } from \"@apollo/client\";\r\n\r\nexport const STUDENT_REPORT = gql `\r\n    query studentReport ($studentCode: String) {\r\n        studentReport (studentCode: $studentCode) {\r\n            school\r\n            textTop\r\n            textMid\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_REPORT_SECTION = gql `\r\n    query studentReportSection ($section: Int) {\r\n        studentReportSection (section: $section) {\r\n            school\r\n            textTop\r\n            textMid\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql `\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK_REPORT = gql `\r\n    query studentMarkReport ($studentCode: String) {\r\n        studentMarkReport (studentCode: $studentCode) {\r\n            school\r\n            textTop\r\n            textMid0\r\n            textMid1\r\n            textMid2\r\n            textMid3\r\n            textMid4\r\n            textMid5\r\n            textMid6\r\n            textMid7\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK_REPORT_SECTION = gql `\r\n    query studentMarkReportSection ($section: Int) {\r\n        studentMarkReportSection (section: $section) {\r\n            school\r\n            textTop\r\n            textMid0\r\n            textMid1\r\n            textMid2\r\n            textMid3\r\n            textMid4\r\n            textMid5\r\n            textMid6\r\n            textMid7\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_SCHOOL_YEAR = gql `\r\n    query studentSchoolyear ($student: Int) {\r\n        studentSchoolyear (student: $student) {\r\n            id\r\n            schoolyear\r\n            season\r\n            semesterCode\r\n            startDate\r\n            endDate\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK = gql`\r\n    query studentMark ($student: Int, $schoolyear: Int, $part: String) {\r\n        studentMark (student: $student, schoolyear: $schoolyear, part: $part) {\r\n            id\r\n            markBoard {\r\n                subject {\r\n                    subject \r\n                    subjectCode\r\n                    credit\r\n                }\r\n            }\r\n            markRelSet {\r\n                markSetting {\r\n                    name\r\n                }\r\n                markVal\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_MARK_REL = gql `\r\n    query studentMarkRel ($student: Int, $schoolyear: Int) {\r\n        studentMarkRel (student: $student, schoolyear: $schoolyear) {\r\n            id\r\n            mark {\r\n                student {\r\n                    studentCode \r\n                }\r\n                markBoard {\r\n                    subject {\r\n                        id\r\n                        subject\r\n                        subjectCode\r\n                        credit\r\n                    }\r\n                    schoolyear {\r\n                        schoolyear \r\n                        season\r\n                    }\r\n                }\r\n            }\r\n            markSetting {\r\n                name\r\n                percentage\r\n            }\r\n            markVal\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_PERCENTAGE = gql `\r\n    query markPercentage ($percentage: Int) {\r\n        markPercentage (percentage: $percentage) {\r\n            type\r\n            percentage\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON = gql `\r\n    query markCon ($subject: Int!, $schoolyear: Int!, $student: Int!) {\r\n        markCon (subject: $subject, schoolyear: $schoolyear, student: $student) {\r\n            percentage\r\n            markRel {\r\n                markVal\r\n                markSetting\r\n            }\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_SUBJECT = gql `\r\n    query markconSubject ($schoolyear: Int!, $section: Int!, $part: String!) {\r\n        markconSubject (schoolyear: $schoolyear, section: $section, part: $part) {\r\n            subjectId\r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_STUDENT = gql `\r\n    query markconStudent ($section: Int!) {\r\n        markconStudent (section: $section) {\r\n            studentId\r\n            familyName\r\n            name\r\n            studentCode\r\n            registerNo\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_QUERY = gql`\r\n    query markConQuery ($section: Int!, $schoolyear: Int!) {\r\n        markconSubjectA: markconSubject (schoolyear: $schoolyear, section: $section, part: \"A\") {\r\n            subjectId \r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n        markconSubjectB: markconSubject (schoolyear: $schoolyear, section: $section, part: \"B\") {\r\n            subjectId \r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n        markconSubjectC: markconSubject (schoolyear: $schoolyear, section: $section, part: \"C\") {\r\n            subjectId \r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n        markconStudent (section: $section) {\r\n            studentId\r\n            familyName\r\n            name\r\n            studentCode\r\n            registerNo\r\n        }\r\n    },\r\n`;\r\n\r\nexport const ALL_STUDENTS_REPORT = gql`\r\n    query allStudentsReport {\r\n        allStudentsReport {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            studentCode\r\n            surname\r\n            familyName\r\n            familyNameMgl\r\n            name\r\n            nameMgl\r\n            religion\r\n            registerNo\r\n            nationality\r\n            state\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            citizen\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            joinDate\r\n            joinBefore\r\n            sex\r\n            birthdate\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            joinSchoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n            classesNumeric\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql `\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject \r\n            subjectCode\r\n            credit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n            programNumeric\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;","import { useQuery } from '@apollo/client'\r\nimport { MARK_CON } from 'graphql/report'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nfunction getMarkPart({ value, part, markRel }) {\r\n\r\n    function inRange(x, min, max) {\r\n        return x >= min && x <= max;\r\n    }\r\n\r\n    function checkPass(x, min) {\r\n        return x >= min\r\n    }\r\n\r\n    if (part === \"A\") {\r\n        switch (true) {\r\n            case inRange(value, 0, 29):\r\n                return \"I\"\r\n            case inRange(value, 30, 39):\r\n                return \"II\"\r\n            case inRange(value, 40, 49):\r\n                return \"III\"\r\n            case inRange(value, 50, 59):\r\n                return \"IV\"\r\n            case inRange(value, 60, 69):\r\n                return \"V\"\r\n            case inRange(value, 70, 79):\r\n                return \"VI\"\r\n            case inRange(value, 80, 89):\r\n                return \"VII\"\r\n            case inRange(value, 90, 100):\r\n                return \"VIII\"\r\n            default:\r\n                return null\r\n        }\r\n    } else if (part === \"B\") {\r\n        switch (true) {\r\n            case inRange(value, 0, 59):\r\n                return \"F\"\r\n            case inRange(value, 60, 63):\r\n                return \"D-\"\r\n            case inRange(value, 64, 67):\r\n                return \"D\"\r\n            case inRange(value, 68, 70):\r\n                return \"D+\"\r\n            case inRange(value, 71, 73):\r\n                return \"C-\"\r\n            case inRange(value, 74, 77):\r\n                return \"C\"\r\n            case inRange(value, 78, 80):\r\n                return \"C+\"\r\n            case inRange(value, 81, 83):\r\n                return \"B-\"\r\n            case inRange(value, 84, 87):\r\n                return \"B\"\r\n            case inRange(value, 88, 90):\r\n                return \"B+\"\r\n            case inRange(value, 91, 95):\r\n                return \"A-\"\r\n            case inRange(value, 96, 100):\r\n                return \"A\"\r\n            default:\r\n                return null\r\n        }\r\n    } else if (part === \"C\")  {\r\n        const checked = markRel.map(rel => (\r\n            checkPass(rel.markVal, rel.markSetting)\r\n        ))\r\n        if (checked.every(x => x === true)) {\r\n            return \"Чадамжтай\"\r\n        } else {\r\n            return \"Хараахан чадамж эзэмшээгүй\"\r\n        }\r\n    }\r\n}\r\n\r\nconst TableBottomRows = ({ part, subjects, subjectMarkTypeCount }) => {\r\n    \r\n    return (\r\n        <>\r\n            <tr className=\"border\" >\r\n                <td colSpan={5} className='border' >{part}</td>\r\n                { subjects.map((item, index) => (\r\n                    <td className='border' key={index} >{subjectMarkTypeCount[item.subjectId] && subjectMarkTypeCount[item.subjectId][part] }</td>\r\n                ))}\r\n            </tr>\r\n        </>\r\n    )\r\n}\r\n\r\nconst GetMarkCon = ({ \r\n    student, \r\n    subject, \r\n    subjectCredit,\r\n    schoolyear, \r\n    setStudentMarkTypeCount, \r\n    setSubjectMarkTypeCount, \r\n    part, \r\n    setStudentNumSubjectCount, \r\n    setStudentNumCredit, \r\n    setStudentAverage,\r\n    setSubjectStudentCount\r\n}) => {\r\n\r\n    const [markCon, setMarkCon] = useState(\"\") \r\n\r\n    useQuery(MARK_CON, {\r\n        variables: { student: student, subject: subject, schoolyear: schoolyear },\r\n        onCompleted: result => {\r\n            if (result.markCon.percentage) {\r\n                setStudentMarkTypeCount(prevState => ({            \r\n                    ...prevState, \r\n                    [student]: { \r\n                        ...prevState[student], \r\n                        [getMarkPart({ value: result.markCon.percentage, part: part, markRel: result.markCon.markRel})]: prevState[student][getMarkPart({ value: result.markCon.percentage, part: part, markRel: result.markCon.markRel})]+1 }\r\n                }))\r\n                setSubjectMarkTypeCount(prevState => ({            \r\n                    ...prevState, \r\n                    [subject]: { \r\n                        ...prevState[subject], \r\n                        [getMarkPart({ value: result.markCon.percentage, part: part, markRel: result.markCon.markRel})]: prevState[subject][getMarkPart({ value: result.markCon.percentage, part: part, markRel: result.markCon.markRel})]+1 }\r\n                }))\r\n                setStudentNumSubjectCount(prevState => ({            \r\n                    ...prevState, \r\n                    [student]: prevState[student] + 1\r\n                }))\r\n                setStudentNumCredit(prevState => ({            \r\n                    ...prevState, \r\n                    [student]: Math.floor(prevState[student]) + Math.floor(subjectCredit)\r\n                }))\r\n                setSubjectStudentCount(prevState => ({            \r\n                    ...prevState, \r\n                    [subject]: prevState[subject] + 1 \r\n                }))\r\n                if (part === \"C\") {\r\n                    result.markCon.markRel.map((rel) => (\r\n                        setMarkCon(prevState => prevState + \" \" + rel.markVal)\r\n                    ))\r\n                } else {\r\n                    setMarkCon(result.markCon.percentage);\r\n                }\r\n            }\r\n        }\r\n    })\r\n\r\n    return markCon\r\n}\r\n\r\nconst MarkConsolidationTable = ({ part, students, subjects, schoolyear, partCols }) => {\r\n\r\n    const [studentMarkTypeCount, setStudentMarkTypeCount] = useState({})\r\n    const [studentNumSubjectCount, setStudentNumSubjectCount] = useState({})\r\n    const [studentNumCredit, setStudentNumCredit] = useState({})\r\n    const [studentAverage, setStudentAverage] = useState({})\r\n\r\n    const [subjectMarkTypeCount, setSubjectMarkTypeCount] = useState({})\r\n    const [subjectStudentCount, setSubjectStudentCount] = useState({})\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'familyName',\r\n\t\t\ttitle: 'Эцэг/эхийн нэр',\r\n\t\t\tdataIndex: 'familyName',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'name',\r\n            title: 'Нэр',\r\n            dataIndex: 'name', \r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'studentCode',\r\n            title: 'Оюутны код',\r\n            dataIndex: 'studentCode', \r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'registerNo',\r\n            title: 'Регистр',\r\n            dataIndex: 'registerNo', \r\n\t\t},\r\n\t];\r\n\r\n    useEffect(() => {\r\n        function defaultCount(student) {\r\n            let studentPartCols = {}\r\n            partCols.map(elm => (\r\n                studentPartCols = Object.assign({ [elm.name]: 0 }, studentPartCols)\r\n            ));\r\n            setStudentMarkTypeCount(prevState => ({            \r\n                ...prevState, \r\n                [student]: studentPartCols\r\n            }))\r\n            setStudentNumSubjectCount(prevState => ({            \r\n                ...prevState, \r\n                [student]: 0\r\n            }))\r\n            setStudentNumCredit(prevState => ({            \r\n                ...prevState, \r\n                [student]: 0\r\n            }))\r\n            setStudentAverage(prevState => ({            \r\n                ...prevState, \r\n                [student]: 0\r\n            }))\r\n        }\r\n\r\n        function defaultSubjectCount(subject) {\r\n            let subjectPartCols = {}\r\n            partCols.map(elm => (\r\n                subjectPartCols = Object.assign({ [elm.name]: 0 }, subjectPartCols)\r\n            ));\r\n            setSubjectMarkTypeCount(prevState => ({            \r\n                ...prevState, \r\n                [subject]: subjectPartCols\r\n            }))\r\n            setSubjectStudentCount(prevState => ({            \r\n                ...prevState, \r\n                [subject]: 0\r\n            }))\r\n        }\r\n        if (students && subjects) {\r\n            students.map((student) => (\r\n                defaultCount(student.studentId)\r\n            ))\r\n            subjects.map(subject => (\r\n                defaultSubjectCount(subject.subjectId)\r\n            ))\r\n        }\r\n    }, [students, subjects])\r\n\r\n\treturn (\r\n        <div className='bg-white rounded-2 w-full mt-4'>\r\n            <table className='w-full border border-black text-center text-black p-4' >\r\n                <thead>\r\n                    <tr className='border'>\r\n                        <th className='w-8 border'>№</th>\r\n                        { tableColumns.map((col, index) => (\r\n                            <th className='w-24 border' key={index} >{col.title}</th>\r\n                        ))}\r\n                        { subjects.map((item, index) => (\r\n                            <th className='w-10 border' key={index} >{`${item.subject} - ${item.subjectCode} (${item.subjectCredit})`}</th>\r\n                        ))}\r\n                        { partCols.map((item, index) => (\r\n                            <th className='w-10 border' key={index} >{item.name}</th>\r\n                        ))}\r\n                        <th className='w-10 border'>Судалсан хичээлийн тоо</th>\r\n                        <th className='w-10 border'>Судалсан багц цаг</th>\r\n                        {/* <th className='w-10 border'>Судалсан Дундаж дүн</th> */}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    { students.map((student, index) => (\r\n                        <tr key={index} className=\"border\" >\r\n                            <td className='border' >{index+1}</td>\r\n                            <td className='border' >{student.familyName}</td>\r\n                            <td className='border' >{student.name}</td>\r\n                            <td className='border' >{student.studentCode}</td>\r\n                            <td className='border' >{student.registerNo}</td>\r\n                            { subjects.map((item, index) => (\r\n                                <td className='border' key={index} >\r\n                                    <GetMarkCon\r\n                                        part={part}\r\n                                        partCols={partCols}\r\n                                        setStudentMarkTypeCount={setStudentMarkTypeCount}\r\n                                        setSubjectMarkTypeCount={setSubjectMarkTypeCount}\r\n                                        setStudentNumSubjectCount={setStudentNumSubjectCount}\r\n                                        setStudentNumCredit={setStudentNumCredit}\r\n                                        setStudentAverage={setStudentAverage}\r\n                                        setSubjectStudentCount={setSubjectStudentCount}\r\n                                        subject={item.subjectId}\r\n                                        subjectCredit={item.subjectCredit}\r\n                                        student={student.studentId}\r\n                                        schoolyear={schoolyear}\r\n                                    />\r\n                                </td>\r\n                            ))}\r\n                            { partCols.map((item, index) => (\r\n                                <td className='w-10 border' key={index} >\r\n                                    { studentMarkTypeCount[student.studentId] && studentMarkTypeCount[student.studentId][item.name] }\r\n                                </td>\r\n                            ))}\r\n                            <td className='border' >{studentNumSubjectCount[student.studentId]}</td>\r\n                            <td className='border' >{studentNumCredit[student.studentId]}</td>\r\n                            {/* <td className='border' >{studentAverage[student.studentId]}</td> */}\r\n                        </tr>\r\n                    ))}\r\n                    { partCols.map((item, index) => (\r\n                        <TableBottomRows \r\n                            key={index}\r\n                            part={item.name}\r\n                            subjects={subjects}\r\n                            subjectMarkTypeCount={subjectMarkTypeCount}\r\n                        />\r\n                    ))}\r\n                    <tr className=\"border\" >\r\n                        <td colSpan={5} className='border' >{\"Дүгнэгдсэн оюутны тоо \"}</td>\r\n                        { subjects.map((item, index) => (\r\n                            <td className='border' key={index} >{subjectStudentCount[item.subjectId]}</td>\r\n                        ))}\r\n                    </tr>\r\n                    {/* <tr className=\"border\" >\r\n                        <td colSpan={5} className='border' >{\"Чанар/%/\"}</td>\r\n                        { subjects.map((item, index) => (\r\n                            <td className='border' key={index} >{item.subject}</td>\r\n                        ))}\r\n                    </tr>\r\n                    <tr className=\"border\" >\r\n                        <td colSpan={5} className='border' >{\"Амжилт/%/\"}</td>\r\n                        { subjects.map((item, index) => (\r\n                            <td className='border' key={index} >{item.subject}</td>\r\n                        ))}\r\n                    </tr> */}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n\t)\r\n}\r\n\r\nexport default MarkConsolidationTable\r\n","import React, { useState } from \"react\";\r\nimport { useLazyQuery, useQuery } from \"@apollo/client\";\r\nimport MarkConTable from './table';\r\nimport { SELECT_CLASSES } from \"graphql/select\";\r\nimport { ALL_PROGRAMS, ALL_SCHOOL_YEAR, SECTION_BY_CLASSES } from \"graphql/all\";\r\nimport { Button, Form, Select } from \"antd\";\r\nimport IntlMessage from \"components/util-components/IntlMessage\";\r\nimport { MARK_CON_QUERY } from \"graphql/report\";\r\nimport { PartCols } from \"utils\";\r\n\r\nconst { Option } = Select\r\n\r\nconst Index = (props) => {\r\n    \r\n    const [schoolYear, setSchoolYear] = useState([]);\r\n    const [classesData, setClassesData] = useState([]);\r\n    const [sectionData, setSectionData] = useState([]);\r\n    const [programsData, setProgramsData] = useState([]);\r\n    const [students, setStudents] = useState([]);\r\n    const [subjectsA, setSubjectsA] = useState([]);\r\n    const [subjectsB, setSubjectsB] = useState([]);\r\n    const [subjectsC, setSubjectsC] = useState([]);\r\n    const [selectedSchoolYear, setSelectedSchoolYear] = useState(1);\r\n\r\n    const partColsA = PartCols({ part: \"A\" })\r\n    const partColsB = PartCols({ part: \"B\" })\r\n    const partColsC = PartCols({ part: \"C\" })\r\n\r\n    const [form] = Form.useForm()\r\n\r\n\tuseQuery(ALL_SCHOOL_YEAR, {\r\n        onCompleted: result => {\r\n            setSchoolYear(result.allSchoolyears)\r\n        }\r\n\t});\r\n\r\n    useQuery(ALL_PROGRAMS, {\r\n        onCompleted: result => {\r\n            setProgramsData(result.allPrograms);\r\n        }\r\n\t});\r\n\r\n    const [fetchClasses] = useLazyQuery(SELECT_CLASSES, {\r\n        onCompleted: result => {\r\n            setClassesData(result.allClassess)\r\n        }\r\n    })\r\n\r\n    const [fetchSections] = useLazyQuery(SECTION_BY_CLASSES, {\r\n        onCompleted: result => {\r\n            setSectionData(result.sectionsByClasses);\r\n        }\r\n    })\r\n\r\n    const [fetchMarkCon] = useLazyQuery(MARK_CON_QUERY, {\r\n        fetchPolicy: 'network-only',\r\n        onCompleted: result => {\r\n            setStudents(result.markconStudent)\r\n            setSubjectsA(result.markconSubjectA)\r\n            setSubjectsB(result.markconSubjectB)\r\n            setSubjectsC(result.markconSubjectC)\r\n        }\r\n    })\r\n\r\n    function onProgramSelect(program) {\r\n        fetchClasses({ variables: { program: program, offset: 0, limit: 0, filter: '' } })\r\n        form.setFieldsValue({ classes: '', section: '' })\r\n    }\r\n\r\n    function onClassesSelect(classes) {\r\n        fetchSections({ variables: { classes: classes} })\r\n        form.setFieldsValue({ section: '' })\r\n    }\r\n\r\n    function onFinish(values) {\r\n        fetchMarkCon({ variables: values });\r\n        setSelectedSchoolYear(values.schoolyear);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"bg-white rounded-2 p-4\">\r\n                <Form\r\n                    layout='vertical'\r\n                    form={form}\r\n                    onFinish={onFinish}\r\n                >\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                        <Form.Item \r\n                            label={<IntlMessage id=\"schoolyear\" />}\r\n                            name='schoolyear'\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: <IntlMessage id=\"form.required\" />\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Select\r\n                                showSearch\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }\r\n                            >\r\n                                { schoolYear.map((schoolyear, index) => (\r\n                                    <Option key={index} value={schoolyear.id} >{schoolyear.schoolyear} / {schoolyear.season}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item \r\n                            label={<IntlMessage id=\"program\" />} \r\n                            name='program'\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: <IntlMessage id=\"form.required\" />\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Select\r\n                                showSearch\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }\r\n                                onSelect={(e) => onProgramSelect(e)}\r\n                            >\r\n                                { programsData.map((program, index) => (\r\n                                    <Option key={index} value={program.id} >{program.program}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item \r\n                            label={<IntlMessage id=\"classes\" />} \r\n                            name='classes'\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: <IntlMessage id=\"form.required\" />\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Select\r\n                                showSearch\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }\r\n                                onSelect={(e) => onClassesSelect(e)}\r\n                            >\r\n                                { classesData.map((classes, index) => (\r\n                                    <Option key={index} value={classes.id} >{classes.classes}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item \r\n                            label={<IntlMessage id=\"section\" />} \r\n                            name='section'\r\n                            rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: <IntlMessage id=\"form.required\" />\r\n                                },\r\n                            ]}\r\n                        >\r\n                            <Select\r\n                                showSearch\r\n                                filterOption={(input, option) =>\r\n                                    option.children.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }\r\n                            >\r\n                                { sectionData.map((section, index) => (\r\n                                    <Option key={index} value={section.id} >{section.section}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </div>\r\n                    <div className=\"text-right\">\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\"><IntlMessage id=\"show\" /></Button>\r\n                        </Form.Item>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n            { subjectsA.length > 0 &&\r\n                <MarkConTable \r\n                    part=\"A\"\r\n                    partCols={partColsA}\r\n                    schoolyear={selectedSchoolYear}\r\n                    students={students}\r\n                    subjects={subjectsA}\r\n                    title={props.title} \r\n                /> \r\n            }\r\n            { subjectsB.length > 0 &&\r\n                <MarkConTable \r\n                    part=\"B\"\r\n                    partCols={partColsB}\r\n                    schoolyear={selectedSchoolYear}\r\n                    students={students}\r\n                    subjects={subjectsB}\r\n                    title={props.title} \r\n                /> \r\n            }\r\n            { subjectsC.length > 0 &&\r\n                <MarkConTable \r\n                    part=\"C\"\r\n                    partCols={partColsC}\r\n                    schoolyear={selectedSchoolYear}\r\n                    students={students}\r\n                    subjects={subjectsC}\r\n                    title={props.title} \r\n                /> \r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Index;\r\n","import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { detectFlexGapSupported } from '../styleChecker';\nexport default (function () {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      flexible = _React$useState2[0],\n      setFlexible = _React$useState2[1];\n\n  React.useEffect(function () {\n    setFlexible(detectFlexGapSupported());\n  }, []);\n  return flexible;\n});","import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nexport default function useForceUpdate() {\n  var _React$useReducer = React.useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      forceUpdate = _React$useReducer2[1];\n\n  return forceUpdate;\n}","import canUseDom from \"rc-util/es/Dom/canUseDom\";\nexport var canUseDocElement = function canUseDocElement() {\n  return canUseDom() && window.document.documentElement;\n};\nexport var isStyleSupport = function isStyleSupport(styleName) {\n  if (canUseDocElement()) {\n    var styleNameList = Array.isArray(styleName) ? styleName : [styleName];\n    var documentElement = window.document.documentElement;\n    return styleNameList.some(function (name) {\n      return name in documentElement.style;\n    });\n  }\n\n  return false;\n};\nvar flexGapSupported;\nexport var detectFlexGapSupported = function detectFlexGapSupported() {\n  if (!canUseDocElement()) {\n    return false;\n  }\n\n  if (flexGapSupported !== undefined) {\n    return flexGapSupported;\n  } // create flex container with row-gap set\n\n\n  var flex = document.createElement('div');\n  flex.style.display = 'flex';\n  flex.style.flexDirection = 'column';\n  flex.style.rowGap = '1px'; // create two, elements inside it\n\n  flex.appendChild(document.createElement('div'));\n  flex.appendChild(document.createElement('div')); // append to the DOM (needed to obtain scrollHeight)\n\n  document.body.appendChild(flex);\n  flexGapSupported = flex.scrollHeight === 1; // flex container should be 1px high from the row-gap\n\n  document.body.removeChild(flex);\n  return flexGapSupported;\n};","import { createContext } from 'react';\nvar RowContext = /*#__PURE__*/createContext({});\nexport default RowContext;","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport RowContext from './RowContext';\nimport { ConfigContext } from '../config-provider';\n\nfunction parseFlex(flex) {\n  if (typeof flex === 'number') {\n    return \"\".concat(flex, \" \").concat(flex, \" auto\");\n  }\n\n  if (/^\\d+(\\.\\d+)?(px|em|rem|%)$/.test(flex)) {\n    return \"0 0 \".concat(flex);\n  }\n\n  return flex;\n}\n\nvar sizes = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'];\nvar Col = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var _React$useContext2 = React.useContext(RowContext),\n      gutter = _React$useContext2.gutter,\n      wrap = _React$useContext2.wrap,\n      supportFlexGap = _React$useContext2.supportFlexGap;\n\n  var customizePrefixCls = props.prefixCls,\n      span = props.span,\n      order = props.order,\n      offset = props.offset,\n      push = props.push,\n      pull = props.pull,\n      className = props.className,\n      children = props.children,\n      flex = props.flex,\n      style = props.style,\n      others = __rest(props, [\"prefixCls\", \"span\", \"order\", \"offset\", \"push\", \"pull\", \"className\", \"children\", \"flex\", \"style\"]);\n\n  var prefixCls = getPrefixCls('col', customizePrefixCls);\n  var sizeClassObj = {};\n  sizes.forEach(function (size) {\n    var _extends2;\n\n    var sizeProps = {};\n    var propSize = props[size];\n\n    if (typeof propSize === 'number') {\n      sizeProps.span = propSize;\n    } else if (_typeof(propSize) === 'object') {\n      sizeProps = propSize || {};\n    }\n\n    delete others[size];\n    sizeClassObj = _extends(_extends({}, sizeClassObj), (_extends2 = {}, _defineProperty(_extends2, \"\".concat(prefixCls, \"-\").concat(size, \"-\").concat(sizeProps.span), sizeProps.span !== undefined), _defineProperty(_extends2, \"\".concat(prefixCls, \"-\").concat(size, \"-order-\").concat(sizeProps.order), sizeProps.order || sizeProps.order === 0), _defineProperty(_extends2, \"\".concat(prefixCls, \"-\").concat(size, \"-offset-\").concat(sizeProps.offset), sizeProps.offset || sizeProps.offset === 0), _defineProperty(_extends2, \"\".concat(prefixCls, \"-\").concat(size, \"-push-\").concat(sizeProps.push), sizeProps.push || sizeProps.push === 0), _defineProperty(_extends2, \"\".concat(prefixCls, \"-\").concat(size, \"-pull-\").concat(sizeProps.pull), sizeProps.pull || sizeProps.pull === 0), _defineProperty(_extends2, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _extends2));\n  });\n  var classes = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(span), span !== undefined), _defineProperty(_classNames, \"\".concat(prefixCls, \"-order-\").concat(order), order), _defineProperty(_classNames, \"\".concat(prefixCls, \"-offset-\").concat(offset), offset), _defineProperty(_classNames, \"\".concat(prefixCls, \"-push-\").concat(push), push), _defineProperty(_classNames, \"\".concat(prefixCls, \"-pull-\").concat(pull), pull), _classNames), className, sizeClassObj);\n  var mergedStyle = {}; // Horizontal gutter use padding\n\n  if (gutter && gutter[0] > 0) {\n    var horizontalGutter = gutter[0] / 2;\n    mergedStyle.paddingLeft = horizontalGutter;\n    mergedStyle.paddingRight = horizontalGutter;\n  } // Vertical gutter use padding when gap not support\n\n\n  if (gutter && gutter[1] > 0 && !supportFlexGap) {\n    var verticalGutter = gutter[1] / 2;\n    mergedStyle.paddingTop = verticalGutter;\n    mergedStyle.paddingBottom = verticalGutter;\n  }\n\n  if (flex) {\n    mergedStyle.flex = parseFlex(flex); // Hack for Firefox to avoid size issue\n    // https://github.com/ant-design/ant-design/pull/20023#issuecomment-564389553\n\n    if (flex === 'auto' && wrap === false && !mergedStyle.minWidth) {\n      mergedStyle.minWidth = 0;\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, others, {\n    style: _extends(_extends({}, mergedStyle), style),\n    className: classes,\n    ref: ref\n  }), children);\n});\nCol.displayName = 'Col';\nexport default Col;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigContext } from '../config-provider';\nimport RowContext from './RowContext';\nimport { tuple } from '../_util/type';\nimport ResponsiveObserve, { responsiveArray } from '../_util/responsiveObserve';\nimport useFlexGapSupport from '../_util/hooks/useFlexGapSupport';\nvar RowAligns = tuple('top', 'middle', 'bottom', 'stretch');\nvar RowJustify = tuple('start', 'end', 'center', 'space-around', 'space-between');\nvar Row = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var _classNames;\n\n  var customizePrefixCls = props.prefixCls,\n      justify = props.justify,\n      align = props.align,\n      className = props.className,\n      style = props.style,\n      children = props.children,\n      _props$gutter = props.gutter,\n      gutter = _props$gutter === void 0 ? 0 : _props$gutter,\n      wrap = props.wrap,\n      others = __rest(props, [\"prefixCls\", \"justify\", \"align\", \"className\", \"style\", \"children\", \"gutter\", \"wrap\"]);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var _React$useState = React.useState({\n    xs: true,\n    sm: true,\n    md: true,\n    lg: true,\n    xl: true,\n    xxl: true\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      screens = _React$useState2[0],\n      setScreens = _React$useState2[1];\n\n  var supportFlexGap = useFlexGapSupport();\n  var gutterRef = React.useRef(gutter); // ================================== Effect ==================================\n\n  React.useEffect(function () {\n    var token = ResponsiveObserve.subscribe(function (screen) {\n      var currentGutter = gutterRef.current || 0;\n\n      if (!Array.isArray(currentGutter) && _typeof(currentGutter) === 'object' || Array.isArray(currentGutter) && (_typeof(currentGutter[0]) === 'object' || _typeof(currentGutter[1]) === 'object')) {\n        setScreens(screen);\n      }\n    });\n    return function () {\n      return ResponsiveObserve.unsubscribe(token);\n    };\n  }, []); // ================================== Render ==================================\n\n  var getGutter = function getGutter() {\n    var results = [0, 0];\n    var normalizedGutter = Array.isArray(gutter) ? gutter : [gutter, 0];\n    normalizedGutter.forEach(function (g, index) {\n      if (_typeof(g) === 'object') {\n        for (var i = 0; i < responsiveArray.length; i++) {\n          var breakpoint = responsiveArray[i];\n\n          if (screens[breakpoint] && g[breakpoint] !== undefined) {\n            results[index] = g[breakpoint];\n            break;\n          }\n        }\n      } else {\n        results[index] = g || 0;\n      }\n    });\n    return results;\n  };\n\n  var prefixCls = getPrefixCls('row', customizePrefixCls);\n  var gutters = getGutter();\n  var classes = classNames(prefixCls, (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-no-wrap\"), wrap === false), _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(justify), justify), _defineProperty(_classNames, \"\".concat(prefixCls, \"-\").concat(align), align), _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames), className); // Add gutter related style\n\n  var rowStyle = {};\n  var horizontalGutter = gutters[0] > 0 ? gutters[0] / -2 : undefined;\n  var verticalGutter = gutters[1] > 0 ? gutters[1] / -2 : undefined;\n\n  if (horizontalGutter) {\n    rowStyle.marginLeft = horizontalGutter;\n    rowStyle.marginRight = horizontalGutter;\n  }\n\n  if (supportFlexGap) {\n    // Set gap direct if flex gap support\n    var _gutters = _slicedToArray(gutters, 2);\n\n    rowStyle.rowGap = _gutters[1];\n  } else if (verticalGutter) {\n    rowStyle.marginTop = verticalGutter;\n    rowStyle.marginBottom = verticalGutter;\n  }\n\n  var rowContext = React.useMemo(function () {\n    return {\n      gutter: gutters,\n      wrap: wrap,\n      supportFlexGap: supportFlexGap\n    };\n  }, [gutters, wrap, supportFlexGap]);\n  return /*#__PURE__*/React.createElement(RowContext.Provider, {\n    value: rowContext\n  }, /*#__PURE__*/React.createElement(\"div\", _extends({}, others, {\n    className: classes,\n    style: _extends(_extends({}, rowStyle), style),\n    ref: ref\n  }), children));\n});\nRow.displayName = 'Row';\nexport default Row;"],"names":["ALL_SUBJECTS","gql","ALL_USERS","ALL_EMPLOYEES_ATTANDANCE_BY_RANGE","ALL_EMPLOYEES_COMPARTMENT","ALL_EMPLOYEES","ALL_TEACHERS","ALL_STUDENTS","ALL_CITYS","ALL_DISTRICTS","ALL_PROGRAMS","ALL_SCHOOLS","ALL_SUB_SCHOOLS","ALL_SECTIONS","ALL_CLASSESS","ALL_CLASSTIME","ALL_SCHOOL_YEAR","ALL_PARENTS","SECTION_BY_CLASSES","TRANSFER_BY_STUDENT","ALL_EVENT_TYPES","ALL_EVENTS","ALL_EVENTS_BY_DATE","STUDENT_REPORT","STUDENT_REPORT_SECTION","STUDENT_MARK_REPORT","STUDENT_MARK_REPORT_SECTION","STUDENT_SCHOOL_YEAR","STUDENT_MARK","MARK_CON","MARK_CON_QUERY","ALL_STUDENTS_REPORT","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","getMarkPart","value","part","markRel","inRange","x","min","max","map","rel","markVal","markSetting","every","TableBottomRows","subjects","subjectMarkTypeCount","className","colSpan","item","index","subjectId","GetMarkCon","student","subject","subjectCredit","schoolyear","setStudentMarkTypeCount","setSubjectMarkTypeCount","setStudentNumSubjectCount","setStudentNumCredit","setSubjectStudentCount","setStudentAverage","useState","markCon","setMarkCon","useQuery","variables","onCompleted","result","percentage","prevState","Math","floor","students","partCols","studentMarkTypeCount","studentNumSubjectCount","studentNumCredit","subjectStudentCount","useEffect","studentPartCols","elm","Object","assign","name","defaultCount","studentId","subjectPartCols","defaultSubjectCount","key","title","dataIndex","col","subjectCode","familyName","studentCode","registerNo","Option","Select","props","schoolYear","setSchoolYear","classesData","setClassesData","sectionData","setSectionData","programsData","setProgramsData","setStudents","subjectsA","setSubjectsA","subjectsB","setSubjectsB","subjectsC","setSubjectsC","selectedSchoolYear","setSelectedSchoolYear","partColsA","PartCols","partColsB","partColsC","Form","form","allSchoolyears","allPrograms","useLazyQuery","allClassess","fetchClasses","sectionsByClasses","fetchSections","fetchPolicy","markconStudent","markconSubjectA","markconSubjectB","markconSubjectC","fetchMarkCon","layout","onFinish","values","label","IntlMessage","id","rules","required","message","showSearch","filterOption","input","option","children","toString","toLowerCase","indexOf","season","onSelect","e","program","offset","limit","filter","setFieldsValue","classes","section","type","htmlType","length","_React$useState","React","_React$useState2","_slicedToArray","flexible","setFlexible","detectFlexGapSupported","useForceUpdate","_React$useReducer","flexGapSupported","canUseDocElement","canUseDom","window","document","documentElement","isStyleSupport","styleName","styleNameList","Array","isArray","some","style","undefined","flex","createElement","display","flexDirection","rowGap","appendChild","body","scrollHeight","removeChild","RowContext","createContext","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","propertyIsEnumerable","sizes","Col","ref","_classNames","_React$useContext","ConfigContext","getPrefixCls","direction","_React$useContext2","gutter","wrap","supportFlexGap","customizePrefixCls","prefixCls","span","order","push","pull","others","sizeClassObj","forEach","size","_extends2","sizeProps","propSize","_typeof","_extends","_defineProperty","concat","classNames","mergedStyle","horizontalGutter","paddingLeft","paddingRight","verticalGutter","paddingTop","paddingBottom","test","parseFlex","minWidth","displayName","Row","tuple","justify","align","_props$gutter","xs","sm","md","lg","xl","xxl","screens","setScreens","useFlexGapSupport","gutterRef","token","ResponsiveObserve","screen","currentGutter","current","gutters","results","g","responsiveArray","breakpoint","getGutter","rowStyle","marginLeft","marginRight","_gutters","marginTop","marginBottom","rowContext"],"sourceRoot":""}