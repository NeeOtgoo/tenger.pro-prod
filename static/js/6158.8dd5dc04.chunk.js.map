{"version":3,"file":"static/js/6158.8dd5dc04.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","components/shared-components/StudentSelect/index.js","graphql/mark.js","graphql/select.js","views/app-views/mark/table.js","views/app-views/mark/index.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import React, { useState } from 'react';\r\nimport { useLazyQuery, useQuery } from '@apollo/client';\r\nimport { Button, Card, Col, Empty, Form, Row, Select, Skeleton } from 'antd'\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { SECTIONS_BY_PROGRAM, SELECT_PROGRAM, SELECT_STUDENT } from 'graphql/select';\r\nimport Loading from '../Loading';\r\n\r\nconst { Option } = Select;\r\n\r\nconst StudentSelect = ({ submitData, mutationData, loading }) => {\r\n\r\n    const [formSection] = Form.useForm();\r\n    const [formStudent] = Form.useForm();\r\n\r\n    const [programs, setPrograms] = useState([]);\r\n    const [sections, setSections] = useState([]);\r\n    const [students, setStudents] = useState([]);\r\n\r\n    const { loading: programLoading } = useQuery(SELECT_PROGRAM, {\r\n        onCompleted: data => {\r\n            setPrograms(data.allPrograms);\r\n        }\r\n    })\r\n\r\n    const [fetchSection, { loading: sectionLoading}] = useLazyQuery(SECTIONS_BY_PROGRAM, {\r\n        onCompleted: data => {\r\n            setSections(data.sectionsByProgram);\r\n        }\r\n    })\r\n\r\n    const [fetchStudent, { loading: studentLoading }] = useLazyQuery(SELECT_STUDENT, {\r\n        onCompleted: data => {\r\n            setStudents(data.allStudents)\r\n        }\r\n    })\r\n\r\n    const onFinish = (values) => {\r\n        const variables = Object.assign(values, mutationData)\r\n        submitData({ variables: variables });\r\n    }\r\n\r\n    const onProgramSelect = (program) => {\r\n        formSection.setFieldsValue({\r\n            section: \"\",\r\n        });\r\n        fetchSection({ variables: { program: program } })\r\n    }\r\n\r\n    const onStudentSearch = (value) => {\r\n        if (value === '') {\r\n            setStudents([]);\r\n        } else {\r\n            fetchStudent({ variables: { offset: 0, limit: 99999999, filter: value } });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Skeleton active loading={programLoading} >\r\n            <Row gutter={16}>\r\n                <Col xs={24} xl={12}>\r\n                    <Card \r\n                        className='mt-4'\r\n                        title={<IntlMessage id=\"by-section\" />}\r\n                    >\r\n                        <Form  \r\n                            id=\"section\"\r\n                            layout={'vertical'}\r\n                            form={formSection}\r\n                            name=\"control-hooks\" \r\n                            onFinish={onFinish}\r\n                        >\r\n                            <Form.Item \r\n                                name=\"program\" \r\n                                label={<IntlMessage id=\"program\" />} \r\n                                rules={[\r\n                                    { \r\n                                        required: true,\r\n                                         message: <IntlMessage id=\"form.required\" /> \r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Select\r\n                                    onSelect={onProgramSelect}\r\n                                    allowClear\r\n                                    showSearch\r\n                                    optionFilterProp=\"children\"\r\n                                    filterOption={(input, option) =>\r\n                                        option.children.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                    }\r\n                                >\r\n                                    { programs.map((program, index) => (\r\n                                        <Option value={program.id} key={index}>{program.program} / {program.programNumeric}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item \r\n                                name=\"section\" \r\n                                label={<IntlMessage id=\"section\" />} \r\n                                rules={[\r\n                                    { \r\n                                        required: true,\r\n                                         message: <IntlMessage id=\"form.required\" /> \r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Select\r\n                                    allowClear\r\n                                    notFoundContent={\r\n                                        sectionLoading ? <Loading cover='content' /> \r\n                                        : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                                    }\r\n                                >\r\n                                    { sections.map((section, index) => (\r\n                                        <Option value={section.id} key={index}>{section.classes.classes} / {section.section}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item className='text-right'>\r\n                                <Button className=\"mr-2\" type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n                                    <IntlMessage id=\"main.okText\" />\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Card>\r\n                </Col>\r\n                <Col xs={24} xl={12}>\r\n                    <Card \r\n                        className='mt-4'\r\n                        title={<IntlMessage id=\"by-student-code\" />}\r\n                    >\r\n                        <Form  \r\n                            id=\"student\"\r\n                            layout={'vertical'}\r\n                            form={formStudent}\r\n                            name=\"control-hooks\" \r\n                            onFinish={onFinish}\r\n                        >\r\n                            <Form.Item \r\n                                name=\"studentCode\" \r\n                                label={<IntlMessage id=\"studentCode\" />} \r\n                                rules={[\r\n                                    { \r\n                                        required: true,\r\n                                        message: <IntlMessage id=\"form.required\" /> \r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Select\r\n                                    showSearch\r\n                                    filterOption={false}\r\n                                    notFoundContent={\r\n                                        studentLoading ? <Loading cover='content' /> \r\n                                        : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                                    }\r\n                                    onSearch={onStudentSearch}\r\n                                >\r\n                                    { students.map((student, index) => (\r\n                                        <Option value={student.studentCode} key={index}> {student.familyName} {student.name} / {student.studentCode}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item className='text-right'>\r\n                                <Button className=\"mr-2\" type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n                                    <IntlMessage id=\"main.okText\" />\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Skeleton>\r\n    )\r\n}\r\n\r\nexport default StudentSelect","import { gql } from '@apollo/client';\r\n\r\nexport const ALL_MARK = gql `\r\n    query allMarks ($markBoard: Int!) {\r\n        allMarks (markBoard: $markBoard) {\r\n            id\r\n            student {\r\n                id\r\n                familyName\r\n                name\r\n                studentCode\r\n                classes {\r\n                    classes\r\n                }\r\n                section {\r\n                    section\r\n                }\r\n            }\r\n            markRelSet {\r\n                markVal\r\n                markSetting {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n            markBoard {\r\n                subject {\r\n                    subject\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK = gql `\r\n    mutation createMark ($section: Int = 0, $studentCode: String, $markBoard: Int) {\r\n        createMark (section: $section, studentCode: $studentCode, markBoard: $markBoard) {\r\n            mark {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK = gql`\r\n    mutation deleteMark ($id: ID) {\r\n        deleteMark (id: $id) {\r\n            mark {\r\n                student {\r\n                    id\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_REL = gql `\r\n    mutation createMarkRel ($mark: Int, $markSetting: Int, $markVal: String) {\r\n        createMarkRel (mark: $mark, markSetting: $markSetting, markVal: $markVal) {\r\n            markRel {\r\n                id\r\n                markVal\r\n                markSetting {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_MARK_RELS = gql `\r\n    query allMarkRels ($mark: Int!) {\r\n        allMarkRels (mark: $mark) {\r\n            mark {\r\n                student {\r\n                    id\r\n                    studentCode\r\n                }\r\n            }\r\n            markSetting {\r\n                name\r\n                percentage\r\n            }\r\n            markVal\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_MARK_PERCENTAGE = gql `\r\n    query allMarkPercentages {\r\n        allMarkPercentages {\r\n            id\r\n            type\r\n            percentage\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_PERCENTAGE = gql `\r\n    mutation createMarkPercentage ($diam: String, $percentage: Int, $type: String) {\r\n        createMarkPercentage (diam: $diam, percentage: $percentage, type: $type) {\r\n            markPercentage {\r\n                type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_MARK_PERCENTAGE = gql `\r\n    mutation updateMarkPercentage ($diam: String, $percentage: Int, $type: String, $id: ID) {\r\n        updateMarkPercentage (diam: $diam, percentage: $percentage, type: $type, id: $id) {\r\n            markPercentage {\r\n                type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK_PERCENTAGE = gql `\r\n    mutation deleteMarkPercentage ($id: ID) {\r\n        deleteMarkPercentage (id: $id) {\r\n            markPercentage {\r\n                type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_BOARD_BY_ID = gql `\r\n    query markBoardById ($id: Int!) {\r\n        markBoardById (id: $id) {\r\n            id\r\n            schoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n            subject {\r\n                id\r\n                part\r\n                subject\r\n            }\r\n            teacher {\r\n                id\r\n                name\r\n            }\r\n            startAt \r\n            endAt\r\n            status\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_MARK_BOARD = gql `\r\n    query allMarkBoards ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"mark\", modelName: \"Mark_board\", filter: $filter) {\r\n            count\r\n        }\r\n        allMarkBoards (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            schoolyear {\r\n                id\r\n                schoolyear\r\n                season\r\n            }\r\n            subject {\r\n                id\r\n                subject\r\n            }\r\n            teacher {\r\n                id\r\n                name\r\n            }\r\n            startAt \r\n            endAt\r\n            status\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_BOARD_FROM_ROUTINE = gql `\r\n    mutation createMarkBoardFromRoutine ($endAt: String, $routine: Int, $startAt: String, $status: String) {\r\n        createMarkBoardFromRoutine (endAt: $endAt, routine: $routine, startAt: $startAt, status: $status) {\r\n            markBoard {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_BOARD = gql `\r\n    mutation createMarkBoard ($endAt: String, $schoolyear: Int, $startAt: String, $status: String, $subject: Int, $teacher: Int) {\r\n        createMarkBoard (endAt: $endAt, schoolyear: $schoolyear, startAt: $startAt, status: $status, subject: $subject, teacher: $teacher) {\r\n            markBoard {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_MARK_BOARD = gql `\r\n    mutation updateMarkBoard ($endAt: String, $schoolyear: Int, $startAt: String, $status: String, $subject: Int, $teacher: Int, $id: ID) {\r\n        updateMarkBoard (endAt: $endAt, schoolyear: $schoolyear, startAt: $startAt, status: $status, subject: $subject, teacher: $teacher, id: $id) {\r\n            markBoard {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK_BOARD = gql `\r\n    mutation deleteMarkBoard ($id: ID) {\r\n        deleteMarkBoard (id: $id) {\r\n            markBoard {\r\n                startAt\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_MARK_SETTING = gql `\r\n    query allMarkSettings {\r\n        allMarkSettings {\r\n            id\r\n            name\r\n            part\r\n            passVal\r\n            percentage\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_SETTINGS_BY_PART = gql`\r\n    query markSettingsByPart ($part: String!) {\r\n        markSettingsByPart (part: $part) {\r\n            id\r\n            name\r\n            part\r\n            passVal\r\n            percentage\r\n        }\r\n    }\r\n`\r\n\r\nexport const CREATE_MARK_SETTING = gql `\r\n    mutation createMarkSetting ($name: String, $percentage: Int, $part: String, $passVal: Int) {\r\n        createMarkSetting (name: $name, percentage: $percentage, part: $part, passVal: $passVal) {\r\n            markSetting {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_MARK_SETTING = gql `\r\n    mutation updateMarkSetting ($name: String, $percentage: Int, $id: ID, $part: String, $passVal: Int) {\r\n        updateMarkSetting (name: $name, percentage: $percentage, id: $id, part: $part, passVal: $passVal) {\r\n            markSetting {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK_SETTING = gql `\r\n    mutation deleteMarkSetting($id: ID) {\r\n        deleteMarkSetting (id: $id) {\r\n            markSetting {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n            classesNumeric\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql `\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject \r\n            subjectCode\r\n            credit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n            programNumeric\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;","import React, { useEffect, useState } from 'react'\r\nimport { Card, Table, Spin, message, Button, InputNumber, Modal } from 'antd';\r\nimport { RollbackOutlined, DeleteTwoTone } from '@ant-design/icons';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport { useQuery, useMutation, useLazyQuery } from '@apollo/client';\r\nimport { ALL_MARK, CREATE_MARK, CREATE_MARK_REL, DELETE_MARK, MARK_BOARD_BY_ID, MARK_SETTINGS_BY_PART } from 'graphql/mark'\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport StudentSelect from 'components/shared-components/StudentSelect';\r\n\r\nconst { confirm } = Modal;\r\n\r\nfunction  MarkTable (props) {\r\n\r\n    const history = useHistory();\r\n\tconst { id } = useParams()\r\n\r\n\tconst [list, setList] = useState(undefined)\r\n\r\n\tconst { data: markBoard } = useQuery(MARK_BOARD_BY_ID, {\r\n\t\tvariables: { id: id }\r\n\t})\r\n    \r\n\tconst [fetchMarks, { loading: markLoading, refetch }] = useLazyQuery(ALL_MARK, {\r\n        variables: { markBoard: id },\r\n\t\tonCompleted: data => {\r\n\t\t\tsetList(\r\n\t\t\t\tdata.allMarks.map(function(data) {\r\n\t\t\t\t\tconst relData = {}\r\n\t\t\t\t\tdata.markRelSet.map(function(a) {\r\n\t\t\t\t\t\tvar name = a.markSetting.name\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\tObject.assign(relData, { [name]: {\r\n\t\t\t\t\t\t\t\t\tmarkVal: a.markVal,\r\n\t\t\t\t\t\t\t\t\tsettingName: a.markSetting.name,\r\n\t\t\t\t\t\t\t\t\tsettingID: a.markSetting.id\r\n\t\t\r\n\t\t\t\t\t\t\t}})\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t})\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\trelData,\r\n\t\t\t\t\t\t\tstudent: data.student.id,\r\n\t\t\t\t\t\t\tname: data.student.name,\r\n\t\t\t\t\t\t\tfamilyName: data.student.familyName,\r\n\t\t\t\t\t\t\tclasses: `${data.student.classes.classes} ${data.student.section.section}`,\r\n\t\t\t\t\t\t\tstudentCode: data.student.studentCode,\r\n\t\t\t\t\t\t\tmark: data.id,\r\n\t\t\t\t\t\t\tkey: data.student.id,\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t)\r\n\t\t\t\t\t\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t});\r\n\r\n\tconst [fetchMarkSettings, { data: settingsData }] = useLazyQuery(MARK_SETTINGS_BY_PART);\r\n\r\n\tconst [createMarkRel, { loading: createRelLoading}] = useMutation(CREATE_MARK_REL);\r\n\r\n    const [destroy] = useMutation(DELETE_MARK, {\r\n        onCompleted: data => {\r\n            refetch();\r\n        }\r\n    })\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'familyName',\r\n\t\t\ttitle: <IntlMessage id=\"familyName\" />,\r\n\t\t\tdataIndex: 'familyName',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'name',\r\n            title: <IntlMessage id=\"name\" />,\r\n\t\t\tdataIndex: 'name',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'classes',\r\n            title: <IntlMessage id=\"classes\" />,\r\n\t\t\tdataIndex: 'classes',\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'studentCode',\r\n\t\t\ttitle: <IntlMessage id=\"studentCode\" />,\r\n\t\t\tdataIndex: 'studentCode',\r\n\t\t},\r\n\t];\r\n\r\n\tconst newMarkData = [];\r\n\r\n\tconst onInputChange = (event, key, index, record ) => {\r\n\t\tif (!newMarkData.length) {\r\n\t\t\tnewMarkData.push(\r\n\t\t\t\t{\r\n\t\t\t\t\tmark: record.mark,\r\n\t\t\t\t\tmarkSetting: key,\r\n\t\t\t\t\tmarkVal: event,\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t} else {\r\n\t\t\tif (newMarkData.filter(asd => asd.mark === record.mark && asd.markSetting === key).length === 0) {\r\n\t\t\t\tnewMarkData.push(\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tmark: record.mark,\r\n\t\t\t\t\t\tmarkSetting: key,\r\n\t\t\t\t\t\tmarkVal: event,\r\n\t\t\t\t\t}\r\n\t\t\t\t)\r\n\t\t\t} else {\r\n\t\t\t\tnewMarkData.filter(asd => asd.mark === record.mark && asd.markSetting === key).map(function(el) {\r\n\t\t\t\t\treturn el.markVal = event\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n    \r\n\t\r\n\tfunction deleteRow(value) {\r\n\t\tconfirm({\r\n            title: 'Хасах уу?',\r\n            okText: 'Хасах',\r\n            okType: 'danger',\r\n            cancelText: 'Болих',\r\n            onOk() {\r\n                destroy({ variables: { id: value } }); \r\n            },\r\n\t\t});\r\n\t}\r\n\r\n\tsettingsData?.markSettingsByPart.map((setting) => (\r\n\t\ttableColumns.push({\r\n\t\t\tkey: setting.name,\r\n\t\t\ttitle: setting.name,\r\n\t\t\tdataIndex: ['relData', `${setting.name}`, 'markVal'],\r\n\t\t\trender: (text, record, index) => (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<InputNumber defaultValue={text} max={setting.percentage} min={0} onChange={(e) => onInputChange(e, setting.id, index, record )} />\r\n\t\t\t\t</div>\r\n\t\t\t),\r\n\t\t})\r\n\t))\r\n\r\n    tableColumns.push({\r\n        key: 'delete',\r\n        title: 'Хасах',\r\n        render: (text, record) => (\r\n            <Button size=\"small\" onClick={() => deleteRow(record.mark)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > Хасах </Button>\r\n        ),\r\n    })\r\n\r\n\tconst onFinish = () => {\r\n\t\tif (newMarkData.length === 0) {\r\n\t\t\tmessage.warning('Өөрчлөлт алга байна');\r\n\t\t} else {\r\n\t\t\tnewMarkData?.filter(data => data.markVal !== null).map((filteredData, index) => (\r\n\t\t\t\tcreateMarkRel({ variables: filteredData }).then((res) => {\r\n\t\t\t\t\tif (newMarkData.length === ++index) {\r\n\t\t\t\t\t\tmessage.success('Амжилттай хадгаллаа')\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t));\r\n\t\t}\r\n\t};\r\n\r\n    const [createMark, { loading: createLoading }] = useMutation(CREATE_MARK, {\r\n        onError: error => {\r\n            if (error.message === \"Student matching query does not exist.\") {\r\n                message.warning('Суралцагч олдсонгүй!');\r\n            }\r\n        },\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            refetch();\r\n\t\t}\r\n\t});\r\n\r\n\tuseEffect(() => {\r\n\t\tif (markBoard?.markBoardById) {\r\n\t\t\tfetchMarks()\r\n\t\t\tfetchMarkSettings({ variables: {  part: markBoard.markBoardById.subject.part } })\r\n\t\t}\r\n\t}, [markBoard])\r\n\t\r\n\r\n\treturn (\r\n\t\t<>\r\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n                <Flex mobileFlex={false}>\r\n                    <div className='text-right' >\r\n                        <Button onClick={() => history.goBack()} type=\"default\" icon={<RollbackOutlined />} block> <IntlMessage id=\"back\" /></Button>\r\n                    </div>\r\n                </Flex>\r\n            </Flex>\r\n            <StudentSelect \r\n                submitData={createMark}\r\n                loading={createLoading}\r\n                mutationData={{ markBoard: id }}\r\n            />\r\n\t\t\t{list !== undefined ? (\r\n\t\t\t\t\t<Card className='mt-4'>\r\n\t\t\t\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t\t\t\t<Spin spinning={markLoading}>\r\n\t\t\t\t\t\t\t\t\t<Table \r\n\t\t\t\t\t\t\t\t\t\tcolumns={tableColumns} \r\n\t\t\t\t\t\t\t\t\t\tdataSource={list}\r\n\t\t\t\t\t\t\t\t\t\trowKey='key'  \r\n\t\t\t\t\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t\t\t\t\t\tpagination={false}\r\n\t\t\t\t\t\t\t\t\t\tbordered\r\n                                        loading={markLoading}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<Flex alignItems=\"left\" justifyContent=\"between\" mobileFlex={false}>\r\n\t\t\t\t\t\t\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t</Flex>\r\n\t\t\t\t\t\t\t\t\t\t{ props.permissions.create === true && \r\n\t\t\t\t\t\t\t\t\t\t\t<Button style={{ margin: '10px' }}  onClick={onFinish} type=\"primary\" loading={createRelLoading}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<IntlMessage id=\"main.okText\" />\r\n\t\t\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t</Flex>\r\n\t\t\t\t\t\t\t</Spin>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Card>\r\n\t\t\t) : null }\r\n\t\t</>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default MarkTable\r\n","import React, { useState } from \"react\";\r\nimport MarkTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nconst Index = (props) => {\r\n\r\n    const create = CheckPer('add_mark');\r\n    const edit = CheckPer('change_mark');\r\n    const destroy = CheckPer('delete_mark');\r\n    \r\n    const [markBoard] = useState(props.location.state?.markBoard);\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <MarkTable title={props.title} permissions={permissions} markBoard={markBoard} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Index;\r\n"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","Option","Select","submitData","mutationData","loading","Form","formSection","formStudent","useState","programs","setPrograms","sections","setSections","students","setStudents","programLoading","useQuery","SELECT_PROGRAM","onCompleted","data","allPrograms","useLazyQuery","SECTIONS_BY_PROGRAM","sectionsByProgram","fetchSection","sectionLoading","SELECT_STUDENT","allStudents","fetchStudent","studentLoading","onFinish","values","variables","Object","assign","active","gutter","xs","xl","title","id","layout","form","name","label","rules","required","message","onSelect","program","setFieldsValue","section","allowClear","showSearch","optionFilterProp","filterOption","input","option","toString","toLowerCase","indexOf","map","index","value","programNumeric","notFoundContent","cover","image","Empty","classes","type","htmlType","onSearch","offset","limit","filter","student","studentCode","familyName","ALL_MARK","gql","CREATE_MARK","DELETE_MARK","CREATE_MARK_REL","ALL_MARK_PERCENTAGE","CREATE_MARK_PERCENTAGE","UPDATE_MARK_PERCENTAGE","DELETE_MARK_PERCENTAGE","MARK_BOARD_BY_ID","ALL_MARK_BOARD","CREATE_MARK_BOARD_FROM_ROUTINE","CREATE_MARK_BOARD","UPDATE_MARK_BOARD","DELETE_MARK_BOARD","ALL_MARK_SETTING","MARK_SETTINGS_BY_PART","CREATE_MARK_SETTING","UPDATE_MARK_SETTING","DELETE_MARK_SETTING","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","confirm","Modal","history","useHistory","useParams","undefined","list","setList","markBoard","allMarks","relData","markRelSet","a","markSetting","markVal","settingName","settingID","mark","key","fetchMarks","markLoading","refetch","fetchMarkSettings","settingsData","useMutation","createMarkRel","createRelLoading","destroy","tableColumns","IntlMessage","dataIndex","newMarkData","markSettingsByPart","setting","push","render","text","record","defaultValue","max","percentage","min","onChange","e","event","length","asd","el","onInputChange","size","onClick","okText","okType","cancelText","onOk","icon","DeleteTwoTone","twoToneColor","onError","error","createMark","createLoading","useEffect","markBoardById","part","subject","goBack","RollbackOutlined","block","StudentSelect","spinning","columns","dataSource","rowKey","pagination","bordered","permissions","create","style","margin","filteredData","then","res","CheckPer","edit","location","state","Loading"],"sourceRoot":""}