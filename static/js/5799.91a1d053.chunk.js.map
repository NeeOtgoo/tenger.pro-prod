{"version":3,"file":"static/js/5799.91a1d053.chunk.js","mappings":"2XAEaA,GAAiBC,EAAAA,EAAAA,IAAG,0RAapBC,GAAyBD,EAAAA,EAAAA,IAAG,yRAsB5BE,IATeF,EAAAA,EAAAA,IAAG,gIASIA,EAAAA,EAAAA,IAAG,8bAoBzBG,GAA8BH,EAAAA,EAAAA,IAAG,4bAoBjCI,GAAsBJ,EAAAA,EAAAA,IAAG,4QAazBK,GAAeL,EAAAA,EAAAA,IAAG,ohBA6DlBM,IAxCmBN,EAAAA,EAAAA,IAAG,0wBA8BJA,EAAAA,EAAAA,IAAG,0MAUVA,EAAAA,EAAAA,IAAG,6UAoCdO,IAvBmBP,EAAAA,EAAAA,IAAG,+SAWHA,EAAAA,EAAAA,IAAG,wPAYLA,EAAAA,EAAAA,IAAG,u3BA8BpBQ,GAAsBR,EAAAA,EAAAA,IAAG,2lD,uNCvNzBS,GAAiBT,EAAAA,EAAAA,IAAG,+MAWpBU,GAAiBV,EAAAA,EAAAA,IAAG,iNAWpBW,GAAiBX,EAAAA,EAAAA,IAAG,+NAUpBY,GAAiBZ,EAAAA,EAAAA,IAAG,yXAcpBa,GAAiBb,EAAAA,EAAAA,IAAG,6JAUpBc,GAAsBd,EAAAA,EAAAA,IAAG,+O,yYCxC9Be,EAAYC,EAAAA,EAAAA,QAwXpB,UAtXc,WAEV,OAAiCC,EAAAA,EAAAA,UAAS,IAAG,eAAtCC,EAAS,KAAEC,EAAW,KAC7B,GAA4CF,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAAjCG,GAAF,KAAmB,MAClCC,GAAUC,EAAAA,EAAAA,MAChB,GAAgCL,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAArCM,EAAQ,KAAEC,EAAW,KACtBC,GAAWC,EAAAA,EAAAA,UAEjB,GAAmCC,EAAAA,EAAAA,GAASnB,EAAAA,GAAqB,CAC7DoB,YAAa,SAAAC,GACTV,EAAYU,EAAIC,kBACpB,IAHIC,EAAI,EAAJA,KAAMC,EAAO,EAAPA,QAASC,EAAO,EAAPA,QAM1B,GAAwBC,EAAAA,EAAAA,GAAYC,EAAAA,GAAgB,CACnDP,YAAa,SAAAG,GACHE,IACAG,EAAAA,GAAAA,QAAgB,8FAC1B,IAJMC,GAKL,YALkB,GAOjB,SAASC,EAAaC,EAAcxB,EAASyB,EAAWC,GACpD1B,IACAK,GAAkB,SAAAsB,GAAQ,yBACnBA,GAAQ,cACVF,EAAUC,EAAaF,EAAa,IAAE,GAE/C,CAWA,SAASI,EAAqBH,EAAWC,GAErC,MAAQ,CACJG,eAAgB,gBAAGC,EAAe,EAAfA,gBAAiBN,EAAY,EAAZA,aAAcxB,EAAO,EAAPA,QAAS+B,EAAY,EAAZA,aAAY,OACnE,iBAAKC,UAAU,MAAK,WAChB,SAAC,IAAK,CACFC,YAAa,2BACbC,MAAOV,EAAa,GACpBW,SAAU,SAAAC,GAAC,OAAIN,EAAgBM,EAAEC,OAAOH,MAAQ,CAACE,EAAEC,OAAOH,OAAS,GAAG,EACtEI,aAAc,kBAAMf,EAAaC,EAAcxB,EAASyB,EAAWC,EAAW,EAC9Ea,MAAO,CAAEC,aAAc,EAAGC,QAAS,YAEvC,UAAC,IAAK,YACF,SAAC,IAAM,CACHC,KAAK,UACLC,QAAS,kBAAMpB,EAAaC,EAAcxB,EAASyB,EAAWC,EAAW,EACzEkB,MAAM,SAAC,IAAc,IACrBC,KAAK,QACLN,MAAO,CAAEO,MAAO,IAAK,yCAEzB,SAAC,IAAM,CAACH,QAAS,kBA7BrC,SAAqBZ,EAAcN,EAAWC,GAC1CK,IACA1B,GAAkB,SAAA0C,GACd,IAAMC,GAAI,UAAOD,GAEjB,cADOC,EAAKvB,EAAUC,GACfsB,CACX,GACJ,CAsB2CC,CAAYlB,EAAcN,EAAWC,EAAW,EAAEmB,KAAK,QAAQN,MAAO,CAAEO,MAAO,IAAK,+DAE7G,EAEVI,WAAY,SAAAC,GAAQ,OAChB,SAAC,IAAc,CACXnB,WAAWoB,EAAAA,EAAAA,IACPD,EAAQ,iBAAsB,KAEpC,EAENE,SAAU,SAACnB,EAAOoB,GAAM,OACpB5B,EAAa4B,EAAO7B,GAAWC,GAAY6B,WAAWC,cAAcC,SAASvB,EAAMsB,eACjFF,EAAO7B,GAAW8B,WAAWC,cAAcC,SAASvB,EAAMsB,cAAc,EAE9EE,OAAQ,SAAAC,GAAI,OACRA,CAUA,EAGZ,CAEA,QAA8BzD,EAAAA,EAAAA,UAAS,EAAC,QAEhC0D,MAAO,iFACPnC,UAAW,aACXoC,IAAK,aACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,gBAAa,QAGrCgC,MAAO,qBACPnC,UAAW,OACXoC,IAAK,OACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,UAAO,QAG/BgC,MAAO,mDACPnC,UAAW,cACXoC,IAAK,cACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,iBAAc,QAGtCgC,MAAO,gEACPnC,UAAW,WACXoC,IAAK,WACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,cAAW,QAGnCgC,MAAO,8FACPnC,UAAW,cACXoC,IAAK,cACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,iBAAc,QAGtCgC,MAAO,wFACPnC,UAAW,CAAC,SAAU,QACtBoC,IAAK,SACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,SAAU,UAAO,QAGzCgC,MAAO,mDACPnC,UAAW,CAAC,UAAW,WACvBoC,IAAK,UACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,UAAW,aAAU,QAG7CgC,MAAO,gEACPnC,UAAW,CAAC,UAAW,WACvBoC,IAAK,UACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,UAAW,aAAU,QAG7CgC,MAAO,iCACPnC,UAAW,CAAC,UAAW,WACvBoC,IAAK,UACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,UAAW,aAAU,QAG7CgC,MAAO,sEACPnC,UAAW,YACXoC,IAAK,YACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,eAAY,QAGpCgC,MAAO,2FACPnC,UAAW,CAAC,YAAa,QACzBoC,IAAK,YACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,YAAa,UAAO,QAG5CgC,MAAO,iGACPnC,UAAW,CAAC,gBAAiB,QAC7BoC,IAAK,gBACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,gBAAiB,UAAO,QAGhDgC,MAAO,kCACPnC,UAAW,CAAC,OAAQ,SACpBoC,IAAK,QACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,OAAQ,WAAQ,QAGxCgC,MAAO,2BACPnC,UAAW,QACXoC,IAAK,QACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,WAAQ,QAGhCgC,MAAO,kKACPnC,UAAW,SACXoC,IAAK,SACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,YAAS,QAGjCgC,MAAO,6HACPnC,UAAW,CAAC,iBAAkB,cAC9BoC,IAAK,QACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,iBAAkB,oBAAiB,QAG3DgC,MAAO,0GACPnC,UAAW,CAAC,SAAU,QACtBoC,IAAK,SACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,SAAU,UAAO,QAGzCgC,MAAO,+IACPnC,UAAW,CAAC,cAAe,QAC3BoC,IAAK,SACLf,MAAO,IACPgB,SAAS,GACNlC,EAAqB,cAAe,WAE7C,iBAjJKmC,GAAO,MAAEC,GAAU,MA8K1B,IAAMC,GAAc,CAChBC,MAAMC,EAAAA,EAAAA,GAAS,kBACfC,SAASD,EAAAA,EAAAA,GAAS,kBAClBE,UAAUF,EAAAA,EAAAA,GAAS,yBAGvB,OACI,iBAAKnC,UAAU,eAAc,WACzB,SAAC,IAAS,CAACsC,IAAK5D,EAAU6D,SAAS,cAAa,UAC5C,SAAC,IAAW,CACRrD,QAASA,EACTsD,SAAU,OACVhE,SAAUA,EACViE,kBAjBhB,WACI/D,EAASqC,QAAQ2B,cACrB,OAkBQ,iBAAK1C,UAAU,mBAAkB,WAC7B,mBACIA,UAAU,6BACVW,QAAS,YACS,IAAIgC,EAAAA,GAEjBC,SAAS,0DACTC,WAAWd,GAAQe,QAAO,SAAAC,GAAG,OAAIA,EAAIjB,OAAO,KAC5CkB,cAAc7E,GACd8E,OAAO,8DACZ,EAAE,UAEF,SAAC,IAAY,CAACjD,UAAU,qBAAqB,cAAY,YAE7D,UAAC,IAAI,CAACkD,GAAG,MAAMlD,UAAU,kCAAiC,WACtD,0BACI,SAAC,WAAW,CAACA,UAAU,4GAA2G,UAC9H,SAAC,IAAU,CAACA,UAAU,qBAAqB,cAAY,cAG/D,SAAC,IAAU,CACPkD,GAAIC,EAAAA,SACJC,MAAM,mCACNC,UAAU,+BACVC,QAAQ,kCACRC,MAAM,iCACNC,UAAU,kCACVC,QAAQ,+BAA8B,UAEtC,SAAC,UAAU,CAACzD,UAAU,qIAAoI,UAC1J,gBAAKA,UAAU,oBAAmB,SAC5B+B,GAAQ2B,KAAI,SAACC,EAAMC,GAAK,OACtB,SAAC,IAAQ,CAELzD,SAAU,SAAAC,GAAC,OAjE3C,SAAyBA,EAAGX,GACxB,IAAMoE,EAAiB9B,GAAQ+B,QAC/BD,EAAepE,GAAoB,QAAIW,EAAEC,OAAO0D,QAChD/B,GAAW6B,EACf,CA6D+CG,CAAgB5D,EAAGwD,EAAM,EACxCG,QAASJ,EAAK7B,QACd9B,UAAU,OACVE,MAAOyD,EAAKlE,UAAU,SAErBkE,EAAK/B,OANDgC,EAOE,iBAO/B,SAAC,IAAK,CACF5D,UAAU,OACVf,QAASA,EACT8C,QAAO,kBAAMA,GAAQe,QAAO,SAAAC,GAAG,OAAIA,EAAIjB,OAAO,KAAM,CAChD,CACID,IAAK,UACLD,OAAO,SAAC,IAAW,CAACqC,GAAG,gBACvBnD,MAAO,OACPrB,UAAW,UACXiC,OAAQ,SAACwC,EAAGC,GAAG,OACX,iBAAKnE,UAAU,cAAa,UACtBiC,GAAYI,WACV,SAAC,IAAc,CAAC+B,KAAMD,EAAIC,KAAKH,MAEnC,UAAC,IAAM,CACHpD,KAAK,QACLF,QAAS,kBAAMrC,EAAQ+F,KAAK,CAACC,SAAU,gCAAiCC,MAAO,CAACC,QAASL,IAAM,EAC/FzD,KAAK,OACLE,MAAM,SAAC,IAAY,IAAI,eACzB,SAAC,IAAW,CAACqD,GAAG,yBACK,IAArBhC,GAAYC,OACV,UAAC,IAAM,CAACrB,KAAK,QAAQF,QAAS,kBA5F1DlC,EA4F2E0F,QA3F3EzF,EAASqC,QAAQ0D,YA2F8D,EAAE/D,KAAK,OAAOE,MAAM,SAAC,IAAW,CAAC8D,aAAa,YAAY,eAAG,SAAC,IAAW,CAACT,GAAG,aAE1G,IAAxBhC,GAAYG,UACV,UAAC,IAAM,CAACvB,KAAK,QAAQF,QAAS,kBAlH9CgE,EAkH8DR,OAjHhFnG,EAAQ,CACE4D,MAAO,qDACPgD,OAAQ,uCACRC,OAAQ,SACRC,WAAY,iCACZC,KAAI,WACAzF,EAAc,CAAE0F,UAAW,CAAEf,GAAIU,EAAIV,KACzC,IARX,IAAmBU,CAkHkE,EAAEjE,KAAK,OAAOE,MAAM,SAAC,IAAa,CAAC8D,aAAa,YAAY,eAAG,SAAC,IAAW,CAACT,GAAG,gBAEnI,KAIlBgB,WAAgB,OAAJjG,QAAI,IAAJA,OAAI,EAAJA,EAAMD,kBAClBmG,OAAO,KACPC,UAAQ,EACRtE,KAAK,QACLV,SACI,SAACiF,EAAYC,EAASC,EAAQC,GAC1BnH,EAAYmH,EAAMC,kBACtB,EAEJJ,WAAY,CACRK,gBAAiB,IAErBC,OAAQ,CAAEC,EAAG,IAAMC,EAAG,SAKtC,C,2QCkHA,IA7eA,SAAqB,GAAqD,IAAnDpH,EAAQ,EAARA,SAAUgE,EAAQ,EAARA,SAAUC,EAAiB,EAAjBA,kBAAmBvD,EAAO,EAAPA,QAElD2G,EAAWC,EAAAA,EAAAA,OACnB,EAAeC,EAAAA,EAAAA,UAARC,GAAsB,YAAlB,GACHC,EAAaC,EAAAA,EAAAA,SAEfC,EAAa,aAEnB,GAAqDhH,EAAAA,EAAAA,GAAYiH,EAAAA,GAAgB,CAC7EvH,YAAa,SAAAG,GACTE,IACAG,EAAAA,GAAAA,QAAgB,iHAChB2G,EAAKK,cACL5D,GAAkB,EACtB,IACF,eAPK6D,EAAa,KAAaC,EAAc,KAAvBtH,QASxB,GAAkDE,EAAAA,EAAAA,GAAYqH,EAAAA,EAAgB,CAC1E3H,YAAa,SAAAG,GACTE,IACAG,EAAAA,GAAAA,QAAgB,iHAChB2G,EAAKK,cACL5D,GAAkB,EACtB,IACF,eAPKgE,EAAa,KAAaC,EAAW,KAApBzH,QAUV0H,GAAgB/H,EAAAA,EAAAA,GAASgI,EAAAA,IAA/B5H,KACM6H,GAAiBjI,EAAAA,EAAAA,GAASkI,EAAAA,IAAhC9H,KACR,GAA8C+H,EAAAA,EAAAA,GAAanJ,EAAAA,IAAe,eAAnEoJ,EAAW,KAAUC,EAAY,KAAlBjI,KACRkI,GAAgBtI,EAAAA,EAAAA,GAASuI,EAAAA,IAA/BnI,KACMoI,GAAcxI,EAAAA,EAAAA,GAASyI,EAAAA,IAA7BrI,KACMsI,GAAkB1I,EAAAA,EAAAA,GAAS2I,EAAAA,IAAjCvI,KACMwI,GAAgB5I,EAAAA,EAAAA,GAAS6I,EAAAA,IAA/BzI,KACM0I,GAAe9I,EAAAA,EAAAA,GAAS+I,EAAAA,IAA9B3I,KACM4I,GAAoBhJ,EAAAA,EAAAA,GAASiJ,EAAAA,IAAnC7I,KACM8I,GAAclJ,EAAAA,EAAAA,GAASmJ,EAAAA,IAA7B/I,KACMgJ,GAAkBpJ,EAAAA,EAAAA,GAASqJ,EAAAA,IAAjCjJ,KACR,GAA8C+H,EAAAA,EAAAA,GAAamB,EAAAA,IAAmB,gBAAvEC,GAAY,MAAUC,GAAW,MAAjBpJ,KACTqJ,IAAmBzJ,EAAAA,EAAAA,GAAS0J,EAAAA,IAAlCtJ,MAIRuJ,EAAAA,EAAAA,YAAU,WACN,GAAiB,SAAb/F,EAAqB,CAAC,IAAD,IACfgG,EAAU,CACZC,SAAUjK,EAAS4F,KAAKqE,SACxBC,MAAOlK,EAAS4F,KAAKsE,MACrBC,YAAanK,EAASmK,YACtBC,WAAYpK,EAASoK,WACrBC,KAAMrK,EAASqK,KACfC,WAAYtK,EAASsK,WACrBC,MAAOvK,EAASuK,MAChBC,OAAQxK,EAASwK,OACjBC,QAASzK,EAASyK,QAClBC,OAAQ1K,EAAS0K,OAAOjF,GACxBkF,SAAU3K,EAAS2K,SAASlF,GAC5BmF,WAAY5K,EAAS4K,WACrBC,IAAK7K,EAAS6K,IACdC,UAAW9K,EAAS8K,UAAUrF,GAC9BsF,UAA6B,QAApB,EAAE/K,EAAS+K,iBAAS,aAAlB,EAAoBtF,GAC/BuF,cAAqC,QAAxB,EAAEhL,EAASgL,qBAAa,aAAtB,EAAwBvF,GACvCwF,OAAQjL,EAASiL,OAAOxF,GACxByF,YAAalL,EAASkL,YAAYzF,GAClC0F,OAAQnL,EAASmL,OAAO1F,GACxB2F,QAASpL,EAASoL,QAAQ3F,GAC1B4F,QAASrL,EAASqL,QAAQ5F,GAC1B6F,QAAStL,EAASsL,QAAQ7F,GAC1B8F,eAAgBvL,EAASuL,eAAe9F,GACxC+F,SAAUxL,EAASwL,UAAYC,IAAOzL,EAASwL,UAC/CE,UAAW1L,EAAS0L,WAAaD,IAAOzL,EAAS0L,YAErDC,GAAY3B,EAAQe,WACpBvC,EAAY,CAAEhC,UAAW,CAAE8E,QAAStB,EAAQsB,QAASM,OAAQ,EAAGC,MAAO,EAAGvH,OAAQ,MAClFwH,GAAW9B,EAAQsB,SACnBS,GAAWN,IAAOzB,EAAQwB,UAAUQ,OAAO,eAC3CC,GAAQR,IAAOzB,EAAQ0B,WAAWM,OAAO,eACzCxE,EAAK0E,eAAelC,EACxB,KAAwB,WAAbhG,GACPwD,EAAKK,aAEb,GAAG,CAACW,EAAahB,EAAMxH,EAAUgE,IAIjC,QAAgCtE,EAAAA,EAAAA,UAAS,IAAG,iBAArCyM,GAAQ,MAAER,GAAW,MAMxBS,GAAe,KAEfC,GAAkB,KAElBF,KACAC,GAAeD,IAGfC,KACAC,GAA+B,OAAbvD,QAAa,IAAbA,OAAa,EAAbA,EAAewD,aAAahI,QAAO,SAAAiI,GAAQ,OAAIA,EAASC,OAAO/G,KAAO2G,EAAY,IAAElH,KAAI,SAAAuH,GAAgB,OACtH,SAACpF,EAAM,CAA2B3F,MAAO+K,EAAiBhH,GAAG,SAAEgH,EAAiBpC,MAAnEoC,EAAiBhH,GAAgE,KAStG,QAA8B/F,EAAAA,EAAAA,UAAS,IAAG,iBAAnC0L,GAAO,MAAEU,GAAU,MAOtBY,GAAc,KAEdC,GAAgB,KAEhBvB,KACAsB,GAActB,IAGdsB,KACAC,GAA4B,OAAZlE,QAAY,IAAZA,OAAY,EAAZA,EAAcD,YAAYtD,KAAI,SAAA0H,GAAa,OACvD,SAACvF,EAAM,CAAwB3F,MAAOkL,EAAcnH,GAAG,SAAEmH,EAAcxB,SAA1DwB,EAAcnH,GAA6D,KAahG,QAA8B/F,EAAAA,EAAAA,UAAS,IAAG,iBAAnCmN,GAAO,MAAEd,GAAU,MAM1B,IAAwBrM,EAAAA,EAAAA,UAAS,IAAG,iBAA7BoN,GAAI,MAAEb,GAAO,MAgBdc,GAAa,IAAIC,OAAO,8BACxBC,GAAmB,IAAID,OAAO,mDAepC,OACI,SAAC,IAAI,CAACE,SAAUnF,GAAkBG,EAAaiF,IAAI,qFAAmB,UAClE,SAAC,IAAI,CACD1H,GAAG,cACH2H,OAAQ,WACR5F,KAAMA,EACN6C,KAAK,gBACLgD,SApBZ,SAAkBC,GACG,SAAbtJ,GACAsJ,EAAO9B,SAAWqB,GAClBS,EAAO5B,UAAYoB,GACnBQ,EAAO7H,GAAKzF,EAASyF,GACrBwC,EAAc,CAAEzB,UAAW8G,MAE3BA,EAAO9B,SAAWqB,GAClBS,EAAO5B,UAAYoB,GACnBhF,EAAc,CAAEtB,UAAW8G,IAEnC,EAUYjL,KAAK,QAAO,UAEZ,UAAC,IAAG,CAACkL,OAAQ,CAAC,GAAI,IAAI,WAClB,UAAC,IAAG,CAAC/L,UAAU,aAAagM,KAAM,GAAG,UACnB,WAAbxJ,IACG,SAAC,SAAS,CAACqG,KAAK,SAASoD,OAAO,SAAC,IAAW,CAAChI,GAAG,WAAaiI,MAAO,CAChE,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,oBAE/B,UACE,SAAC,IAAM,UACS,OAAXuD,QAAW,IAAXA,OAAW,EAAXA,EAAa4E,WAAW1I,KAAI,SAACiG,EAAQ/F,GAAK,OACvC,SAACiC,EAAM,CAAa3F,MAAOyJ,EAAO1F,GAAG,SAAE0F,EAAOd,MAAjCjF,EAA+C,QAK9D,WAAbpB,IACG,SAAC,SAAS,CAACqG,KAAK,UAAUoD,OAAO,SAAC,IAAW,CAAChI,GAAG,YAAciI,MAAO,CAClE,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,oBAE/B,UACE,SAAC,IAAM,CAAC9D,SA9EpC,SAAyByJ,GACrBzB,GAAa,CAAEnD,UAAW,CAAE4E,QAASA,KACrC5D,EAAK0E,eAAe,CAChBb,QAAS,IAEjB,EAyE8D,SAC7BsB,QAIb,SAAC,SAAS,CAACtC,KAAK,aAAaoD,OAAO,SAAC,IAAW,CAAChI,GAAG,eAAiBiI,MAAO,CACxE,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,oBAE/B,UACE,SAAC,IAAK,OAEV,SAAC,SAAS,CAAC4E,KAAK,YAAYoD,OAAO,SAAC,IAAW,CAAChI,GAAG,cAAe,UAC9D,SAAC,IAAM,CAAC9D,SA1IN,SAACD,GACvBiK,GAAYjK,EAChB,EAwI4D,SACtB,OAATkH,QAAS,IAATA,OAAS,EAATA,EAAWiF,SAAS3I,KAAI,SAAC4I,EAAM1I,GAAK,OACjC,SAACiC,EAAM,CAAa3F,MAAOoM,EAAKrI,GAAG,SAAEqI,EAAKzD,MAA7BjF,EAA2C,SAIpE,SAAC,SAAS,CAACiF,KAAK,YAAYoD,OAAO,SAAC,IAAW,CAAChI,GAAG,cAAe,UAC9D,SAAC,IAAU,CAAC1D,MAAO,CAAEO,MAAO,QAAUX,SApF9D,SAA0BoM,GACtB9B,GAAQR,IAAOsC,GAAM/B,OAAO,cAChC,EAkF0FA,OAAQrE,OAE9E,SAAC,SAAS,CAAC0C,KAAK,MAAMoD,OAAO,SAAC,IAAW,CAAChI,GAAG,QAAUiI,MAAO,CAC1D,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,oBAE/B,UACE,UAAC,IAAM,YACH,SAAC4B,EAAM,CAAS3F,MAAM,6CAAS,UAAC,SAAC,IAAW,CAAC+D,GAAG,cAApC,MACZ,SAAC4B,EAAM,CAAS3F,MAAM,6CAAS,UAAC,SAAC,IAAW,CAAC+D,GAAG,gBAApC,WAGpB,SAAC,SAAS,CAAC4E,KAAK,SAASoD,OAAO,SAAC,IAAW,CAAChI,GAAG,WAAaiI,MAAO,CAChE,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,oBAE/B,UACE,SAAC,IAAM,UACS,OAAX0C,QAAW,IAAXA,OAAW,EAAXA,EAAa6F,WAAW9I,KAAI,SAACwF,EAAQtF,GAAK,OACvC,SAACiC,EAAM,CAAa3F,MAAOgJ,EAAOjF,GAAG,SAAEiF,EAAOL,MAAjCjF,EAA+C,QAI1D,WAAbpB,IACG,SAAC,SAAS,CAACqG,KAAK,SAASoD,OAAO,SAAC,IAAW,CAAChI,GAAG,WAAaiI,MAAO,CAChE,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,oBAE/B,UACE,SAAC,IAAM,UACQ,OAAVyD,QAAU,IAAVA,OAAU,EAAVA,EAAY+E,kBAAkB/I,KAAI,SAAC+F,EAAQ7F,GAAK,OAC7C,SAACiC,EAAM,CAAa3F,MAAOuJ,EAAOxF,GAAG,SAAEwF,EAAOZ,MAAjCjF,EAA+C,SAK5E,SAAC,SAAS,CAACiF,KAAK,QAAQoD,OAAO,SAAC,IAAW,CAAChI,GAAG,UAAYiI,MAAO,CAC9D,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,mBAE7B,CACIyI,UAAS,SAACC,EAAMzM,GACZ,OAAIqL,GAAWqB,KAAK1M,GACT2M,QAAQC,UAEZD,QAAQE,OAAO,2IAC1B,IAEN,UACE,SAAC,IAAK,OAEV,SAAC,SAAS,CAAClE,KAAK,QAAQoD,OAAO,SAAC,IAAW,CAAChI,GAAG,UAAYiI,MAAO,CAC9D,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,mBAE7B,CACIvD,KAAM,QACNrB,QAAS,2HAEf,UACE,SAAC,IAAK,OAEV,SAAC,SAAS,CAACwJ,KAAK,WAAWoD,OAAO,SAAC,IAAW,CAAChI,GAAG,aAAeiI,MAAO,CACpE,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,mBAE7B,CACIyI,UAAS,SAACC,EAAMzM,GACZ,OA1JZuI,EA0J2BvI,GAzJ3B,OAAT4H,QAAS,IAATA,OAAS,EAATA,EAAWkF,SAASC,MAAK,SAAUC,GACtC,OAAiB,SAAb1K,GAAuBhE,EAAS4F,KAAKqE,WAAaA,IAG3CyE,EAAGzE,WAAaA,CAE/B,KAoJuCoE,QAAQE,OAAO,6JAEnBF,QAAQC,UA7J/C,IAAoBrE,CA8JQ,IAEN,UACE,SAAC,IAAK,MAEI,WAAbjG,IACG,SAAC,SAAS,CAACqG,KAAK,YAAYoD,OAAO,SAAC,IAAW,CAAChI,GAAG,cAAgBiI,MAAO,CACtE,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,oBAE/B,UACE,SAAC,IAAM,UACW,OAAb+D,QAAa,IAAbA,OAAa,EAAbA,EAAemF,cAAczJ,KAAI,SAAC4F,EAAW1F,GAAK,OAC/C,SAACiC,EAAM,CAAa3F,MAAOoJ,EAAUrF,GAAG,SAAEqF,EAAUT,MAAvCjF,EAAqD,SAKlF,SAAC,SAAS,CAACiF,KAAK,UAAUoD,OAAO,SAAC,IAAW,CAAChI,GAAG,YAAa,UAC1D,SAACgC,EAAQ,CAACmH,KAAM,UAGxB,UAAC,IAAG,CAACpN,UAAU,aAAagM,KAAM,GAAG,UACnB,WAAbxJ,IACG,SAAC,SAAS,CAACqG,KAAK,UAAUoD,OAAO,SAAC,IAAW,CAAChI,GAAG,YAAciI,MAAO,CAClE,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,oBAE/B,UACE,SAAC,IAAM,CAAC9D,SArOZ,SAACD,GACrB8G,EAAY,CAAEhC,UAAW,CAAE8E,QAAS5J,EAAOkK,OAAQ,EAAGC,MAAO,EAAGvH,OAAQ,MACxEwH,GAAWpK,EACf,EAkO8D,SAClB,OAAXgH,QAAW,IAAXA,OAAW,EAAXA,EAAamG,YAAY3J,KAAI,SAACoG,EAASlG,GAAK,OACzC,SAACiC,EAAM,CAAa3F,MAAO4J,EAAQ7F,GAAG,SAAE6F,EAAQA,SAAnClG,EAAoD,QAKnE,WAAbpB,IACG,SAAC,SAAS,CAACqG,KAAK,UAAUoD,OAAO,SAAC,IAAW,CAAChI,GAAG,YAAciI,MAAO,CAClE,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,oBAE/B,UACE,SAAC,IAAM,UACS,OAAXmE,SAAW,IAAXA,QAAW,EAAXA,GAAakF,kBAAkB5J,KAAI,SAACmG,EAASjG,GAAK,OAC/C,SAACiC,EAAM,CAAa3F,MAAO2J,EAAQ5F,GAAG,SAAE4F,EAAQA,SAAnCjG,EAAoD,SAKjF,SAAC,SAAS,CAACiF,KAAK,OAAOoD,OAAO,SAAC,IAAW,CAAChI,GAAG,SAAWiI,MAAO,CAC5D,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,oBAE/B,UACE,SAAC,IAAK,OAEV,SAAC,SAAS,CAAC4E,KAAK,gBAAgBoD,OAAO,SAAC,IAAW,CAAChI,GAAG,kBAAmB,UACtE,SAAC,IAAM,UACF4G,QAGT,SAAC,SAAS,CAAChC,KAAK,aAAaoD,OAAO,SAAC,IAAW,CAAChI,GAAG,eAAiBiI,MAAO,CACxE,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,mBAE7B,CACIyI,UAAS,SAACC,EAAMzM,GACZ,OAAKuL,GAAiBmB,KAAK1M,GAGpB2M,QAAQC,UAFJD,QAAQE,OAAO,yKAG9B,IAEN,UACE,SAAC,IAAK,OAEV,SAAC,SAAS,CAAClE,KAAK,cAAcoD,OAAO,SAAC,IAAW,CAAChI,GAAG,gBAAkBiI,MAAO,CAC1E,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,oBAE/B,UACE,SAAC,IAAK,OAEV,SAAC,SAAS,CAAC4E,KAAK,aAAaoD,OAAO,SAAC,IAAW,CAAChI,GAAG,eAAiBiI,MAAO,CACxE,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,oBAE/B,UACE,SAAC,IAAK,MAEI,WAAbzB,IACG,SAAC,SAAS,CAACqG,KAAK,cAAcoD,OAAO,SAAC,IAAW,CAAChI,GAAG,yBAA2BiI,MAAO,CACnF,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,oBAE/B,UACE,SAAC,IAAM,UACa,OAAf2D,QAAe,IAAfA,OAAe,EAAfA,EAAiB2F,uBAAuB7J,KAAI,SAAC6B,EAAO3B,GAAK,OACtD,SAACiC,EAAM,CAAa3F,MAAOqF,EAAMtB,GAAG,SAAEsB,EAAMsD,MAA/BjF,EAA6C,SAK1E,SAAC,SAAS,CAACiF,KAAK,SAASoD,OAAO,SAAC,IAAW,CAAChI,GAAG,WAAaiI,MAAO,CAChE,CACIQ,UAAS,SAACC,EAAMzM,GACZ,OAAIqL,GAAWqB,KAAK1M,GACT2M,QAAQC,UAEZD,QAAQE,OAAO,2IAC1B,IAEN,UACE,SAAC,IAAK,OAEV,SAAC,SAAS,CAAClE,KAAK,iBAAiBoD,OAAO,SAAC,IAAW,CAAChI,GAAG,mBAAqBiI,MAAO,CAChF,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,oBAE/B,UACE,SAAC,IAAM,UACY,OAAdoE,SAAc,IAAdA,QAAc,EAAdA,GAAgBmF,eAAe9J,KAAI,SAAC+J,EAAM7J,GAAK,OAC5C,UAACiC,EAAM,CAAa3F,MAAOuN,EAAKxJ,GAAG,UAAEwJ,EAAKC,WAAU,IAAGD,EAAKE,SAA/C/J,EAA+D,SAIxF,SAAC,SAAS,CAACiF,KAAK,WAAWoD,OAAO,SAAC,IAAW,CAAChI,GAAG,aAAc,UAC5D,SAAC,IAAU,CAAC1D,MAAO,CAAEO,MAAO,QAAUX,SAhT9D,SAAyBoM,GACrBhC,GAAWN,IAAOsC,GAAM/B,OAAO,cACnC,EA8SyFA,OAAQrE,MAG5D,WAAb3D,GACI,SAAC,SAAS,CAACqG,KAAK,WAAWoD,OAAO,SAAC,IAAW,CAAChI,GAAG,aAAeiI,MAAO,CACpE,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,mBAE7B,CACI2J,IAAK,EACLvO,QAAS,oLAEb,gBAAGwO,EAAa,EAAbA,cAAa,MAAQ,CACpBnB,UAAS,SAACC,EAAMzM,GACZ,OAAKA,GAAS2N,EAAc,cAAgB3N,EAGrC2M,QAAQC,UAFJD,QAAQE,OAAO,mOAG9B,EACH,GACH,UACE,SAAC,aAAc,MAEnB,KAEM,WAAbvK,IACG,SAAC,SAAS,CAACqG,KAAK,WAAWoD,OAAO,SAAC,IAAW,CAAChI,GAAG,aAAeiI,MAAO,CACpE,CACIC,UAAU,EACV9M,SAAS,SAAC,IAAW,CAAC4E,GAAG,oBAE/B,UACE,SAAC,IAAM,UACU,OAAZ4C,QAAY,IAAZA,OAAY,EAAZA,EAAciH,aAAapK,KAAI,SAACyF,EAAUvF,GAAK,OAC5C,SAACiC,EAAM,CAAa3F,MAAOiJ,EAASlF,GAAG,SAAEkF,EAASN,MAArCjF,EAAmD,iBAUxG,C","sources":["graphql/report.js","graphql/select.js","views/app-views/report/consolidated-report/index.js","views/app-views/student/form.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const STUDENT_REPORT = gql `\r\n    query studentReport ($studentCode: String) {\r\n        studentReport (studentCode: $studentCode) {\r\n            school\r\n            textTop\r\n            textMid\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_REPORT_SECTION = gql `\r\n    query studentReportSection ($section: Int) {\r\n        studentReportSection (section: $section) {\r\n            school\r\n            textTop\r\n            textMid\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql `\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK_REPORT = gql `\r\n    query studentMarkReport ($studentCode: String) {\r\n        studentMarkReport (studentCode: $studentCode) {\r\n            school\r\n            textTop\r\n            textMid0\r\n            textMid1\r\n            textMid2\r\n            textMid3\r\n            textMid4\r\n            textMid5\r\n            textMid6\r\n            textMid7\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK_REPORT_SECTION = gql `\r\n    query studentMarkReportSection ($section: Int) {\r\n        studentMarkReportSection (section: $section) {\r\n            school\r\n            textTop\r\n            textMid0\r\n            textMid1\r\n            textMid2\r\n            textMid3\r\n            textMid4\r\n            textMid5\r\n            textMid6\r\n            textMid7\r\n            textBottom\r\n            studentPhoto\r\n            studentCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_SCHOOL_YEAR = gql `\r\n    query studentSchoolyear ($student: Int) {\r\n        studentSchoolyear (student: $student) {\r\n            id\r\n            schoolyear\r\n            season\r\n            semesterCode\r\n            startDate\r\n            endDate\r\n        }\r\n    }\r\n`;\r\n\r\nexport const STUDENT_MARK = gql`\r\n    query studentMark ($student: Int, $schoolyear: Int, $part: String) {\r\n        studentMark (student: $student, schoolyear: $schoolyear, part: $part) {\r\n            id\r\n            markBoard {\r\n                subject {\r\n                    subject \r\n                    subjectCode\r\n                    credit\r\n                }\r\n            }\r\n            markRelSet {\r\n                markSetting {\r\n                    name\r\n                }\r\n                markVal\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_MARK_REL = gql `\r\n    query studentMarkRel ($student: Int, $schoolyear: Int) {\r\n        studentMarkRel (student: $student, schoolyear: $schoolyear) {\r\n            id\r\n            mark {\r\n                student {\r\n                    studentCode \r\n                }\r\n                markBoard {\r\n                    subject {\r\n                        id\r\n                        subject\r\n                        subjectCode\r\n                        credit\r\n                    }\r\n                    schoolyear {\r\n                        schoolyear \r\n                        season\r\n                    }\r\n                }\r\n            }\r\n            markSetting {\r\n                name\r\n                percentage\r\n            }\r\n            markVal\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_PERCENTAGE = gql `\r\n    query markPercentage ($percentage: Int) {\r\n        markPercentage (percentage: $percentage) {\r\n            type\r\n            percentage\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON = gql `\r\n    query markCon ($subject: Int!, $schoolyear: Int!, $student: Int!) {\r\n        markCon (subject: $subject, schoolyear: $schoolyear, student: $student) {\r\n            percentage\r\n            markRel {\r\n                markVal\r\n                markSetting\r\n            }\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_SUBJECT = gql `\r\n    query markconSubject ($schoolyear: Int!, $section: Int!, $part: String!) {\r\n        markconSubject (schoolyear: $schoolyear, section: $section, part: $part) {\r\n            subjectId\r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_STUDENT = gql `\r\n    query markconStudent ($section: Int!) {\r\n        markconStudent (section: $section) {\r\n            studentId\r\n            familyName\r\n            name\r\n            studentCode\r\n            registerNo\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_CON_QUERY = gql`\r\n    query markConQuery ($section: Int!, $schoolyear: Int!) {\r\n        markconSubjectA: markconSubject (schoolyear: $schoolyear, section: $section, part: \"A\") {\r\n            subjectId \r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n        markconSubjectB: markconSubject (schoolyear: $schoolyear, section: $section, part: \"B\") {\r\n            subjectId \r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n        markconSubjectC: markconSubject (schoolyear: $schoolyear, section: $section, part: \"C\") {\r\n            subjectId \r\n            subject\r\n            subjectCode\r\n            subjectCredit\r\n        }\r\n        markconStudent (section: $section) {\r\n            studentId\r\n            familyName\r\n            name\r\n            studentCode\r\n            registerNo\r\n        }\r\n    },\r\n`;\r\n\r\nexport const ALL_STUDENTS_REPORT = gql`\r\n    query allStudentsReport {\r\n        allStudentsReport {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            studentCode\r\n            surname\r\n            familyName\r\n            familyNameMgl\r\n            name\r\n            nameMgl\r\n            religion\r\n            registerNo\r\n            nationality\r\n            state\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            citizen\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            joinDate\r\n            joinBefore\r\n            sex\r\n            birthdate\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            joinSchoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n            classesNumeric\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql `\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject \r\n            subjectCode\r\n            credit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n            programNumeric\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;","import React, { Fragment, useRef, useState } from 'react'\r\nimport { Button, Checkbox, Input, message, Modal, Space, Table } from 'antd';\r\nimport { SearchOutlined, SwapOutlined } from '@ant-design/icons';\r\nimport { DeleteTwoTone, EditTwoTone } from '@ant-design/icons';\r\nimport { Excel } from 'antd-table-saveas-excel';\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { ALL_STUDENTS_REPORT } from 'graphql/report';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { classNames } from 'utils';\r\nimport { Menu, Transition } from '@headlessui/react';\r\nimport { DownloadIcon, FilterIcon } from '@heroicons/react/outline';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport ChangePassword from 'components/shared-components/ChangePassword';\r\nimport StudentForm from 'views/app-views/student/form';\r\nimport FormModal from 'components/shared-components/FormModal';\r\nimport { DELETE_STUDENT } from 'graphql/delete';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst { confirm } = Modal\r\n\r\nconst Index = () => {\r\n\r\n    const [excelData, setExelData] = useState([])\r\n    const [searchedColumn, setSearchedColumn] = useState({});\r\n    const history = useHistory()\r\n    const [editData, setEditData] = useState({});\r\n    const modalRef = useRef();\r\n\r\n    const { data, loading, refetch } = useQuery(ALL_STUDENTS_REPORT, {\r\n        onCompleted: res => {\r\n            setExelData(res.allStudentsReport)\r\n        }\r\n    })\r\n    \r\n\tconst [deleteStudent] = useMutation(DELETE_STUDENT, {\r\n\t\tonCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\r\n    function handleSearch(selectedKeys, confirm, dataIndex, dataIndex2) {\r\n        confirm();\r\n        setSearchedColumn(prevData => ({\r\n            ...prevData,\r\n            [dataIndex+dataIndex2]: selectedKeys[0]\r\n        }))\r\n    }\r\n    \r\n    function handleReset(clearFilters, dataIndex, dataIndex2) {\r\n        clearFilters();\r\n        setSearchedColumn(current => {\r\n            const copy = {...current};\r\n            delete copy[dataIndex+dataIndex2];\r\n            return copy;\r\n        });\r\n    }\r\n\r\n    function getColumnSearchProps(dataIndex, dataIndex2) {\r\n\r\n        return ({\r\n            filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n                <div className='p-2'>\r\n                    <Input\r\n                        placeholder={'Хайх'}\r\n                        value={selectedKeys[0]}\r\n                        onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n                        onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex, dataIndex2)}\r\n                        style={{ marginBottom: 8, display: 'block' }}\r\n                    />\r\n                    <Space>\r\n                        <Button\r\n                            type=\"primary\"\r\n                            onClick={() => handleSearch(selectedKeys, confirm, dataIndex, dataIndex2)}\r\n                            icon={<SearchOutlined />}\r\n                            size=\"small\"\r\n                            style={{ width: 90 }}\r\n                        > Хайх </Button>\r\n                        <Button onClick={() => handleReset(clearFilters, dataIndex, dataIndex2)} size=\"small\" style={{ width: 90 }}> Арилгах </Button>\r\n                    </Space>\r\n                </div>\r\n            ),\r\n            filterIcon: filtered => (\r\n                <SearchOutlined \r\n                    className={classNames(\r\n                        filtered ? `text-[#F8B6A8]` : ''\r\n                    )}\r\n                />\r\n            ),\r\n            onFilter: (value, record) => (\r\n                dataIndex2 ? record[dataIndex][dataIndex2].toString().toLowerCase().includes(value.toLowerCase())\r\n                : record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n            ),\r\n            render: text => (\r\n                text\r\n                // searchedColumn[dataIndex+dataIndex2] ? (\r\n                //     <Highlighter\r\n                //         highlightStyle={{ backgroundColor: '#69ffc0', padding: 0 }}\r\n                //         searchWords={[searchedColumn[dataIndex+dataIndex2]]}\r\n                //         autoEscape\r\n                //         textToHighlight={text ? text.toString() : ''}\r\n                //     />\r\n                // ) : (\r\n                //     text\r\n                // )\r\n            ),\r\n        })\r\n    };\r\n\r\n    const [columns, setColumns] = useState([\r\n        {\r\n            title: \"Эцэг /эх/-ийн нэр \",\r\n            dataIndex: 'familyName',\r\n            key: 'familyName',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('familyName'),\r\n        },\r\n        {\r\n            title: \"Нэр\",\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('name'),\r\n        },\r\n        {\r\n            title: \"Иргэншил\",\r\n            dataIndex: 'nationality',\r\n            key: 'nationality',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('nationality'),\r\n        },\r\n        {\r\n            title: \"Үндэс угсаа\",\r\n            dataIndex: 'religion',\r\n            key: 'religion',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('religion'),\r\n        },\r\n        {\r\n            title: \"Суралцагчийн код\",\r\n            dataIndex: 'studentCode',\r\n            key: 'studentCode',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('studentCode'),\r\n        },\r\n        {\r\n            title: \"Салбар сургууль\",\r\n            dataIndex: ['school', 'name'],\r\n            key: 'school',\r\n            width: 200,\r\n            visible: true,\r\n            ...getColumnSearchProps('school', 'name'),\r\n        },\r\n        {\r\n            title: \"Хөтөлбөр\",\r\n            dataIndex: ['program', 'program'],\r\n            key: 'program',\r\n            width: 100,\r\n            visible: true,\r\n            ...getColumnSearchProps('program', 'program'),\r\n        },\r\n        {\r\n            title: \"Анги дамжаа\",\r\n            dataIndex: ['classes', 'classes'],\r\n            key: 'classes',\r\n            width: 100,\r\n            visible: true,\r\n            ...getColumnSearchProps('classes', 'classes'),\r\n        },\r\n        {\r\n            title: \"Бүлэг\",\r\n            dataIndex: ['section', 'section'],\r\n            key: 'section',\r\n            width: 100,\r\n            visible: true,\r\n            ...getColumnSearchProps('section', 'section'),\r\n        },\r\n        {\r\n            title: \"Төрсөн огноо\",\r\n            dataIndex: 'birthdate',\r\n            key: 'birthdate',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('birthdate'),\r\n        },\r\n        {\r\n            title: \"Төрсөн аймаг /хот/\",\r\n            dataIndex: ['birthCity', 'name'],\r\n            key: 'birthCity',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('birthCity', 'name'),\r\n        },\r\n        {\r\n            title: \"Төрсөн сум /дүүрэг/\",\r\n            dataIndex: ['birthDistrict', 'name'],\r\n            key: 'birthDistrict',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('birthDistrict', 'name'),\r\n        },\r\n        {\r\n            title: \"И-мэйл\",\r\n            dataIndex: ['user', 'email'],\r\n            key: 'email',\r\n            width: 100,\r\n            visible: true,\r\n            ...getColumnSearchProps('user', 'email'),\r\n        },\r\n        {\r\n            title: \"Утас\",\r\n            dataIndex: 'phone',\r\n            key: 'phone',\r\n            width: 100,\r\n            visible: true,\r\n            ...getColumnSearchProps('phone'),\r\n        },\r\n        {\r\n            title: \"Яаралтай үед холбогдох дугаар\",\r\n            dataIndex: 'phone2',\r\n            key: 'phone2',\r\n            width: 100,\r\n            visible: true,\r\n            ...getColumnSearchProps('phone2'),\r\n        },\r\n        {\r\n            title: \"Сургуульд элссэн огноо\",\r\n            dataIndex: ['joinSchoolyear', 'schoolyear'],\r\n            key: 'email',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('joinSchoolyear', 'joinSchoolyear'),\r\n        },\r\n        {\r\n            title: \"Суралцагчийн төлөв\",\r\n            dataIndex: ['status', 'name'],\r\n            key: 'status',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('status', 'name'),\r\n        },\r\n        {\r\n            title: \"Суралцагчийн нэмэлт төлөв\",\r\n            dataIndex: ['statusExtra', 'name'],\r\n            key: 'status',\r\n            width: 150,\r\n            visible: true,\r\n            ...getColumnSearchProps('statusExtra', 'name'),\r\n        },\r\n    ])\r\n\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n            title: \"Устгах уу?\",\r\n            okText: \"Устгах\",\r\n            okType: 'danger',\r\n            cancelText: \"Болих\",\r\n            onOk() {\r\n                deleteStudent({ variables: { id: row.id } }); \r\n            },\r\n\t\t});\r\n\t}\r\n\r\n    function onCheckBoxClick(e, dataIndex) {\r\n        const temporaryarray = columns.slice();\r\n        temporaryarray[dataIndex]['visible'] = e.target.checked\r\n        setColumns(temporaryarray)\r\n    }\r\n\r\n    function handleOpen(params) {\r\n        setEditData(params);\r\n        modalRef.current.handleOpen()\r\n    }\r\n    \r\n    function handleCancel() {\r\n        modalRef.current.handleCancel()\r\n    }\r\n\r\n    const permissions = {\r\n        edit: CheckPer('change_student'),\r\n        destroy: CheckPer('delete_student'),\r\n        password: CheckPer('change_user_password')\r\n    }\r\n\r\n    return (\r\n        <div className='bg-white p-2'>\r\n            <FormModal ref={modalRef} formName=\"StudentForm\">\r\n                <StudentForm\r\n                    refetch={refetch}\r\n                    formType={'edit'} \r\n                    editData={editData} \r\n                    setIsModalVisible={handleCancel}\r\n                />\r\n            </FormModal>\r\n            <div className='flex justify-end'>\r\n                <button\r\n                    className='px-4 py-2 hover:bg-gray-50'\r\n                    onClick={() => {\r\n                        const excel = new Excel();\r\n                        excel\r\n                        .addSheet('Суралцагч')\r\n                        .addColumns(columns.filter(col => col.visible))\r\n                        .addDataSource(excelData)\r\n                        .saveAs('Суралцагч.xlsx');\r\n                    }}\r\n                >\r\n                    <DownloadIcon className=\"h-5 w-5 text-emind\" aria-hidden=\"true\" />\r\n                </button>\r\n                <Menu as=\"div\" className=\"relative inline-block text-left\">\r\n                    <div>\r\n                        <Menu.Button className=\"inline-flex w-full justify-center rounded-md px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50\">\r\n                            <FilterIcon className=\"h-5 w-5 text-emind\" aria-hidden=\"true\" />\r\n                        </Menu.Button>\r\n                    </div>\r\n                    <Transition\r\n                        as={Fragment}\r\n                        enter=\"transition ease-out duration-100\"\r\n                        enterFrom=\"transform opacity-0 scale-95\"\r\n                        enterTo=\"transform opacity-100 scale-100\"\r\n                        leave=\"transition ease-in duration-75\"\r\n                        leaveFrom=\"transform opacity-100 scale-100\"\r\n                        leaveTo=\"transform opacity-0 scale-95\"\r\n                    >\r\n                        <Menu.Items className=\"absolute right-0 z-10 mt-2 w-56 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none\">\r\n                        <div className=\"flex flex-col p-1\">\r\n                            { columns.map((item, index) => (\r\n                                <Checkbox \r\n                                    key={index}\r\n                                    onChange={e => onCheckBoxClick(e, index)}\r\n                                    checked={item.visible} \r\n                                    className='ml-1' \r\n                                    value={item.dataIndex} \r\n                                >\r\n                                    {item.title}\r\n                                </Checkbox>\r\n                            ))}\r\n                        </div>\r\n                        </Menu.Items>\r\n                    </Transition>\r\n                </Menu>\r\n            </div>\r\n            <Table\r\n                className='mt-4'\r\n                loading={loading}\r\n                columns={[...columns.filter(col => col.visible), ...[\r\n                    {\r\n                        key: 'actions',\r\n                        title: <IntlMessage id=\"main.action\" />,\r\n                        width: '15vw',\r\n                        dataIndex: 'actions',\r\n                        render: (_, elm) => (\r\n                            <div className=\"text-center\">\r\n                                { permissions.password &&\r\n                                    <ChangePassword user={elm.user.id} />\r\n                                }\r\n                                <Button \r\n                                    size=\"small\" \r\n                                    onClick={() => history.push({pathname: '/app/student/transfer-student', state: {student: elm}})} \r\n                                    type=\"text\" \r\n                                    icon={<SwapOutlined />} \r\n                                > <IntlMessage id=\"transfer-student\" /></Button>\r\n                                { permissions.edit === true &&\r\n                                    <Button size=\"small\" onClick={() => handleOpen(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /></Button>\r\n                                }\r\n                                { permissions.destroy === true &&\r\n                                    <Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /></Button>\r\n                                }\r\n                            </div>\r\n                        )\r\n                    }\r\n                ]]}\r\n                dataSource={data?.allStudentsReport}\r\n                rowKey=\"id\"\r\n                bordered\r\n                size=\"small\"\r\n                onChange={\r\n                    (pagination, filters, sorter, extra) => {\r\n                        setExelData(extra.currentDataSource)\r\n                    } \r\n               } \r\n                pagination={{\r\n                    defaultPageSize: 20\r\n                }}\r\n                scroll={{ x: 2000, y: 500 }}\r\n            />\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Index;","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, message, Spin, Row, Col, Select, DatePicker } from 'antd';\r\nimport { useMutation, useQuery, useLazyQuery } from '@apollo/client';\r\nimport {\r\n    ALL_PROGRAMS, ALL_USERS, ALL_CITYS, ALL_DISTRICTS, ALL_SCHOOLS,\r\n    ALL_CLASSTIME, ALL_SCHOOL_YEAR, SECTION_BY_CLASSES\r\n} from 'graphql/all';\r\nimport { ALL_ACTIVITY, ALL_STUDENT_STATUS, ALL_STUDENT_STATUS_EXTRA, ALL_DEGREES } from 'graphql/core'\r\nimport { CREATE_STUDENT } from 'graphql/create'\r\nimport { UPDATE_STUDENT } from 'graphql/update'\r\nimport moment from 'moment';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { SELECT_CLASSES } from 'graphql/select';\r\n\r\nfunction StudentForm({ editData, formType, setIsModalVisible, refetch }) {\r\n\r\n    const { Option } = Select;\r\n    const [form] = Form.useForm();\r\n    const { TextArea } = Input;\r\n\r\n    const dateFormat = \"YYYY-MM-DD\";\r\n\r\n    const [createStudent, { loading: studentLoading }] = useMutation(CREATE_STUDENT, {\r\n        onCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай хадгаллаа');\r\n            form.resetFields();\r\n            setIsModalVisible(false);\r\n        }\r\n    });\r\n\r\n    const [updateStudent, { loading: editLoading }] = useMutation(UPDATE_STUDENT, {\r\n        onCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай хадгаллаа');\r\n            form.resetFields();\r\n            setIsModalVisible(false);\r\n        }\r\n    })\r\n\r\n    // start useQuery\r\n    const { data: degreesData } = useQuery(ALL_DEGREES);\r\n    const { data: activityData } = useQuery(ALL_ACTIVITY);\r\n    const [allClassess, { data: classessData }] = useLazyQuery(SELECT_CLASSES);\r\n    const { data: programData } = useQuery(ALL_PROGRAMS);\r\n    const { data: citysData } = useQuery(ALL_CITYS);\r\n    const { data: districtsData } = useQuery(ALL_DISTRICTS);\r\n    const { data: schoolsData } = useQuery(ALL_SCHOOLS);\r\n    const { data: statusData } = useQuery(ALL_STUDENT_STATUS);\r\n    const { data: extraStatusData } = useQuery(ALL_STUDENT_STATUS_EXTRA);\r\n    const { data: usersData } = useQuery(ALL_USERS);\r\n    const { data: classtimeData } = useQuery(ALL_CLASSTIME);\r\n    const [fetchSection, { data: sectionData }] = useLazyQuery(SECTION_BY_CLASSES);\r\n    const { data: schoolYearData } = useQuery(ALL_SCHOOL_YEAR);\r\n\r\n    // end useQuery\r\n\r\n    useEffect(() => {\r\n        if (formType === \"edit\") {\r\n            const newData = {\r\n                username: editData.user.username,\r\n                email: editData.user.email,\r\n                studentCode: editData.studentCode,\r\n                familyName: editData.familyName,\r\n                name: editData.name,\r\n                registerNo: editData.registerNo,\r\n                phone: editData.phone,\r\n                phone2: editData.phone2,\r\n                address: editData.address,\r\n                degree: editData.degree.id,\r\n                activity: editData.activity.id,\r\n                joinBefore: editData.joinBefore,\r\n                sex: editData.sex,\r\n                classtime: editData.classtime.id,\r\n                birthCity: editData.birthCity?.id,\r\n                birthDistrict: editData.birthDistrict?.id,\r\n                status: editData.status.id,\r\n                statusExtra: editData.statusExtra.id,\r\n                school: editData.school.id,\r\n                classes: editData.classes.id,\r\n                section: editData.section.id,\r\n                program: editData.program.id,\r\n                joinSchoolyear: editData.joinSchoolyear.id,\r\n                joinDate: editData.joinDate && moment(editData.joinDate),\r\n                birthdate: editData.birthdate && moment(editData.birthdate)\r\n            }\r\n            setDistrict(newData.birthCity)\r\n            allClassess({ variables: { program: newData.program, offset: 1, limit: 1, filter: '' } });\r\n            setClasses(newData.program);\r\n            setJoinDay(moment(newData.joinDate).format(\"YYYY-MM-DD\"))\r\n            setBDay(moment(newData.birthdate).format(\"YYYY-MM-DD\"))\r\n            form.setFieldsValue(newData);\r\n        } else if (formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [allClassess, form, editData, formType])\r\n\r\n    // Change BirthDistrict\r\n\r\n    const [district, setDistrict] = useState(\"\");\r\n\r\n    const onBirthCityChange = (value) => {\r\n        setDistrict(value);\r\n    };\r\n\r\n    let districtType = null;\r\n\r\n    let districtsOption = null;\r\n\r\n    if (district) {\r\n        districtType = district;\r\n    }\r\n\r\n    if (districtType) {\r\n        districtsOption = districtsData?.allDistricts.filter(District => District.cityID.id === districtType).map(filteredDistrict => (\r\n            <Option key={filteredDistrict.id} value={filteredDistrict.id}>{filteredDistrict.name}</Option>\r\n        ))\r\n    }\r\n\r\n    // end change BirthDistrict\r\n\r\n    // Change BirthDistrict\r\n\r\n\r\n    const [classes, setClasses] = useState(\"\");\r\n\r\n    const programOnChange = (value) => {\r\n        allClassess({ variables: { program: value, offset: 1, limit: 1, filter: '' } });\r\n        setClasses(value);\r\n    }\r\n\r\n    let programType = null;\r\n\r\n    let classesOption = null;\r\n\r\n    if (classes) {\r\n        programType = classes;\r\n    }\r\n\r\n    if (programType) {\r\n        classesOption = classessData?.allClassess.map(filteredClass => (\r\n            <Option key={filteredClass.id} value={filteredClass.id}>{filteredClass.classes}</Option>\r\n        ))\r\n    }\r\n\r\n    // end change BirthDistrict\r\n\r\n    function onClassesChange(classes) {\r\n        fetchSection({ variables: { classes: classes } })\r\n        form.setFieldsValue({\r\n            section: ''\r\n        });\r\n    }\r\n\r\n    const [joinDay, setJoinDay] = useState('');\r\n\r\n    function joinDayOnChange(date) {\r\n        setJoinDay(moment(date).format(\"YYYY-MM-DD\"));\r\n    }\r\n\r\n    const [BDay, setBDay] = useState('');\r\n\r\n    function joinBDayOnChange(date) {\r\n        setBDay(moment(date).format(\"YYYY-MM-DD\"));\r\n    }\r\n\r\n    function userExists(username) {\r\n        return usersData?.allUsers.some(function (el) {\r\n            if (formType === \"edit\" && editData.user.username === username) {\r\n                return false;\r\n            } else {\r\n                return el.username === username;\r\n            }\r\n        });\r\n    }\r\n\r\n    const phoneRegEx = new RegExp(/^([7-9][0-9]{3}[0-9]{4})?$/u);\r\n    const registerNumRegEx = new RegExp(/[А-ЯӨҮЁ]{2}(\\d){8}$/u);\r\n\r\n    function onFinish(values) {\r\n        if (formType === 'edit') {\r\n            values.joinDate = joinDay\r\n            values.birthdate = BDay\r\n            values.id = editData.id\r\n            updateStudent({ variables: values })\r\n        } else {\r\n            values.joinDate = joinDay\r\n            values.birthdate = BDay\r\n            createStudent({ variables: values });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Spin spinning={studentLoading || editLoading} tip=\"Ачааллаж байна...\">\r\n            <Form\r\n                id=\"StudentForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n                size=\"small\"\r\n            >\r\n                <Row gutter={[16, 24]}>\r\n                    <Col className=\"gutter-row\" span={12}>\r\n                        {formType === 'create' &&\r\n                            <Form.Item name=\"school\" label={<IntlMessage id=\"school\" />} rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: <IntlMessage id=\"form.required\" />\r\n                                },\r\n                            ]}>\r\n                                <Select>\r\n                                    {schoolsData?.allSchools.map((school, index) => (\r\n                                        <Option key={index} value={school.id}>{school.name}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                        }\r\n                        {formType === 'create' &&\r\n                            <Form.Item name=\"classes\" label={<IntlMessage id=\"classes\" />} rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: <IntlMessage id=\"form.required\" />\r\n                                },\r\n                            ]}>\r\n                                <Select onChange={onClassesChange}>\r\n                                    {classesOption}\r\n                                </Select>\r\n                            </Form.Item>\r\n                        }\r\n                        <Form.Item name=\"familyName\" label={<IntlMessage id=\"familyName\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"birthCity\" label={<IntlMessage id=\"birthCity\" />} >\r\n                            <Select onChange={onBirthCityChange}>\r\n                                {citysData?.allCitys.map((city, index) => (\r\n                                    <Option key={index} value={city.id}>{city.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"birthdate\" label={<IntlMessage id=\"birthdate\" />} >\r\n                            <DatePicker style={{ width: '100%' }} onChange={joinBDayOnChange} format={dateFormat} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"sex\" label={<IntlMessage id=\"sex\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                <Option key=\"0\" value=\"Эрэгтэй\"><IntlMessage id=\"sex.male\" /></Option>\r\n                                <Option key=\"1\" value=\"Эмэгтэй\"><IntlMessage id=\"sex.female\" /></Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"degree\" label={<IntlMessage id=\"degree\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {degreesData?.allDegrees.map((degree, index) => (\r\n                                    <Option key={index} value={degree.id}>{degree.name}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        {formType === 'create' &&\r\n                            <Form.Item name=\"status\" label={<IntlMessage id=\"status\" />} rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: <IntlMessage id=\"form.required\" />\r\n                                },\r\n                            ]}>\r\n                                <Select>\r\n                                    {statusData?.allStudentStatuss.map((status, index) => (\r\n                                        <Option key={index} value={status.id}>{status.name}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                        }\r\n                        <Form.Item name=\"phone\" label={<IntlMessage id=\"phone\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                            {\r\n                                validator(rule, value) {\r\n                                    if (phoneRegEx.test(value)) {\r\n                                        return Promise.resolve();\r\n                                    }\r\n                                    return Promise.reject('Утасны дугаар буруу байна!');\r\n                                },\r\n                            }\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"email\" label={<IntlMessage id=\"email\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                            {\r\n                                type: 'email',\r\n                                message: 'И-мэйл утга буруу байна'\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"username\" label={<IntlMessage id=\"username\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                            {\r\n                                validator(rule, value) {\r\n                                    if (userExists(value)) {\r\n                                        return Promise.reject('Нэвтрэх нэр бүртгэлтэй байна');\r\n                                    }\r\n                                    return Promise.resolve();\r\n                                },\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        {formType === 'create' &&\r\n                            <Form.Item name=\"classtime\" label={<IntlMessage id=\"classtime\" />} rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: <IntlMessage id=\"form.required\" />\r\n                                },\r\n                            ]}>\r\n                                <Select>\r\n                                    {classtimeData?.allClasstimes.map((classtime, index) => (\r\n                                        <Option key={index} value={classtime.id}>{classtime.name}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                        }\r\n                        <Form.Item name=\"address\" label={<IntlMessage id=\"address\" />} >\r\n                            <TextArea rows={2} />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col className=\"gutter-row\" span={12}>\r\n                        {formType === 'create' &&\r\n                            <Form.Item name=\"program\" label={<IntlMessage id=\"program\" />} rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: <IntlMessage id=\"form.required\" />\r\n                                },\r\n                            ]}>\r\n                                <Select onChange={programOnChange}>\r\n                                    {programData?.allPrograms.map((program, index) => (\r\n                                        <Option key={index} value={program.id}>{program.program}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                        }\r\n                        {formType === 'create' &&\r\n                            <Form.Item name=\"section\" label={<IntlMessage id=\"section\" />} rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: <IntlMessage id=\"form.required\" />\r\n                                },\r\n                            ]}>\r\n                                <Select>\r\n                                    {sectionData?.sectionsByClasses.map((section, index) => (\r\n                                        <Option key={index} value={section.id}>{section.section}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                        }\r\n                        <Form.Item name=\"name\" label={<IntlMessage id=\"name\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"birthDistrict\" label={<IntlMessage id=\"birthDistrict\" />} >\r\n                            <Select>\r\n                                {districtsOption}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"registerNo\" label={<IntlMessage id=\"registerNo\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                            {\r\n                                validator(rule, value) {\r\n                                    if (!registerNumRegEx.test(value)) {\r\n                                        return Promise.reject('Регистерийн дугаар буруу байна!');\r\n                                    }\r\n                                    return Promise.resolve();\r\n                                },\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"studentCode\" label={<IntlMessage id=\"studentCode\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"joinBefore\" label={<IntlMessage id=\"joinBefore\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        {formType === 'create' &&\r\n                            <Form.Item name=\"statusExtra\" label={<IntlMessage id=\"student-status-extra\" />} rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: <IntlMessage id=\"form.required\" />\r\n                                },\r\n                            ]}>\r\n                                <Select>\r\n                                    {extraStatusData?.allStudentStatusExtras.map((extra, index) => (\r\n                                        <Option key={index} value={extra.id}>{extra.name}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                        }\r\n                        <Form.Item name=\"phone2\" label={<IntlMessage id=\"phone2\" />} rules={[\r\n                            {\r\n                                validator(rule, value) {\r\n                                    if (phoneRegEx.test(value)) {\r\n                                        return Promise.resolve();\r\n                                    }\r\n                                    return Promise.reject('Утасны дугаар буруу байна!');\r\n                                },\r\n                            }\r\n                        ]}>\r\n                            <Input />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"joinSchoolyear\" label={<IntlMessage id=\"joinSchoolyear\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select>\r\n                                {schoolYearData?.allSchoolyears.map((year, index) => (\r\n                                    <Option key={index} value={year.id}>{year.schoolyear} {year.season}</Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"joinDate\" label={<IntlMessage id=\"joinDate\" />}>\r\n                            <DatePicker style={{ width: '100%' }} onChange={joinDayOnChange} format={dateFormat} />\r\n                        </Form.Item>\r\n                        {\r\n                            formType === 'create' ?\r\n                                <Form.Item name=\"password\" label={<IntlMessage id=\"password\" />} rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: <IntlMessage id=\"form.required\" />\r\n                                    },\r\n                                    {\r\n                                        min: 8,\r\n                                        message: 'Нууц үг 8-аас урттай дээш байх ёстой'\r\n                                    },\r\n                                    ({ getFieldValue }) => ({\r\n                                        validator(rule, value) {\r\n                                            if (!value || getFieldValue('username') === value) {\r\n                                                return Promise.reject('Нэвтрэх нэр нууц үг хоёр ижил байх боломгүй!');\r\n                                            }\r\n                                            return Promise.resolve();\r\n                                        },\r\n                                    }),\r\n                                ]}>\r\n                                    <Input.Password />\r\n                                </Form.Item> :\r\n                                null\r\n                        }\r\n                        {formType === 'create' &&\r\n                            <Form.Item name=\"activity\" label={<IntlMessage id=\"activity\" />} rules={[\r\n                                {\r\n                                    required: true,\r\n                                    message: <IntlMessage id=\"form.required\" />\r\n                                },\r\n                            ]}>\r\n                                <Select>\r\n                                    {activityData?.allActivitys.map((activity, index) => (\r\n                                        <Option key={index} value={activity.id}>{activity.name}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default StudentForm"],"names":["STUDENT_REPORT","gql","STUDENT_REPORT_SECTION","STUDENT_MARK_REPORT","STUDENT_MARK_REPORT_SECTION","STUDENT_SCHOOL_YEAR","STUDENT_MARK","MARK_CON","MARK_CON_QUERY","ALL_STUDENTS_REPORT","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","confirm","Modal","useState","excelData","setExelData","setSearchedColumn","history","useHistory","editData","setEditData","modalRef","useRef","useQuery","onCompleted","res","allStudentsReport","data","loading","refetch","useMutation","DELETE_STUDENT","message","deleteStudent","handleSearch","selectedKeys","dataIndex","dataIndex2","prevData","getColumnSearchProps","filterDropdown","setSelectedKeys","clearFilters","className","placeholder","value","onChange","e","target","onPressEnter","style","marginBottom","display","type","onClick","icon","size","width","current","copy","handleReset","filterIcon","filtered","classNames","onFilter","record","toString","toLowerCase","includes","render","text","title","key","visible","columns","setColumns","permissions","edit","CheckPer","destroy","password","ref","formName","formType","setIsModalVisible","handleCancel","Excel","addSheet","addColumns","filter","col","addDataSource","saveAs","as","Fragment","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","map","item","index","temporaryarray","slice","checked","onCheckBoxClick","id","_","elm","user","push","pathname","state","student","handleOpen","twoToneColor","row","okText","okType","cancelText","onOk","variables","dataSource","rowKey","bordered","pagination","filters","sorter","extra","currentDataSource","defaultPageSize","scroll","x","y","Option","Select","Form","form","TextArea","Input","dateFormat","CREATE_STUDENT","resetFields","createStudent","studentLoading","UPDATE_STUDENT","updateStudent","editLoading","degreesData","ALL_DEGREES","activityData","ALL_ACTIVITY","useLazyQuery","allClassess","classessData","programData","ALL_PROGRAMS","citysData","ALL_CITYS","districtsData","ALL_DISTRICTS","schoolsData","ALL_SCHOOLS","statusData","ALL_STUDENT_STATUS","extraStatusData","ALL_STUDENT_STATUS_EXTRA","usersData","ALL_USERS","classtimeData","ALL_CLASSTIME","SECTION_BY_CLASSES","fetchSection","sectionData","schoolYearData","ALL_SCHOOL_YEAR","useEffect","newData","username","email","studentCode","familyName","name","registerNo","phone","phone2","address","degree","activity","joinBefore","sex","classtime","birthCity","birthDistrict","status","statusExtra","school","classes","section","program","joinSchoolyear","joinDate","moment","birthdate","setDistrict","offset","limit","setClasses","setJoinDay","format","setBDay","setFieldsValue","district","districtType","districtsOption","allDistricts","District","cityID","filteredDistrict","programType","classesOption","filteredClass","joinDay","BDay","phoneRegEx","RegExp","registerNumRegEx","spinning","tip","layout","onFinish","values","gutter","span","label","rules","required","allSchools","allCitys","city","date","allDegrees","allStudentStatuss","validator","rule","test","Promise","resolve","reject","allUsers","some","el","allClasstimes","rows","allPrograms","sectionsByClasses","allStudentStatusExtras","allSchoolyears","year","schoolyear","season","min","getFieldValue","allActivitys"],"sourceRoot":""}