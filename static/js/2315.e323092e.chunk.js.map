{"version":3,"file":"static/js/2315.e323092e.chunk.js","mappings":"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","sources":["components/shared-components/AsyncTable/index.js","components/shared-components/Flex/index.js","graphql/select.js","graphql/update.js","views/app-views/parent/form.js","views/app-views/parent/table.js","views/app-views/parent/index.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Card, Input, Pagination, Table } from 'antd'\r\nimport { PlusCircleOutlined, SearchOutlined } from '@ant-design/icons';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport Flex from '../Flex';\r\n\r\nconst AsyncTable = ({ fetchData, loading, columns, data, permissions, showModal }) => {\r\n\r\n    const [filter, setFilter] = useState('');\r\n\r\n    const triggerFetch = (page, pageSize) => {\r\n        var start = 0;\r\n        var end = pageSize;\r\n        if (page !== 1) {\r\n            start = (page * pageSize) - pageSize\r\n            end = pageSize * page\r\n        }\r\n        fetchData({ variables: { offset: start, limit: end, filter: filter, program: 0 } })\r\n    }\r\n\r\n    const onPageChange = (page, pageSize) => {\r\n        triggerFetch(page, pageSize);\r\n    }\r\n\r\n    const onSearch = e => {\r\n        const value = e.currentTarget.value\r\n        fetchData({ variables: { offset: 0, limit: 10000000, filter: value, program: 0 } })\r\n        setFilter(value)\r\n    }\r\n\r\n    return (\r\n\t\t<Card>\r\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n                <Flex className=\"mb-1\" mobileFlex={false}>\r\n                    <div className=\"mr-md-3 mb-3\">\r\n                        <Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n                    </div>\r\n                </Flex>\r\n                { permissions.create === true &&\r\n                    <div className=\"mr-md-3 mb-3\">\r\n                        <Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\r\n                    </div>\r\n                }\r\n            </Flex>\r\n            <div className=\"table-responsive\">\r\n                <Table \r\n                    // pagination={false}\r\n                    size=\"small\"\r\n                    columns={columns} \r\n                    dataSource={data}\r\n                    rowKey='id' \r\n                    bordered\r\n                    loading={loading}\r\n                />\r\n                {/* <Pagination \r\n                    className='text-right mt-4' \r\n                    total={count} \r\n                    onChange={onPageChange}\r\n                /> */}\r\n            </div>\r\n        </Card>    \r\n    )\r\n}\r\n\r\nexport default AsyncTable","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n            classesNumeric\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql `\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject \r\n            subjectCode\r\n            credit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n            programNumeric\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client'\r\n\r\nexport const UPDATE_SUBJECT = gql `\r\n    mutation updateSubject ($credit: String, $part: String, $id: ID, $school: Int, $subSchool: Int, $subject: String, $subjectCode: String, $subjectMgl: String) {\r\n        updateSubject (credit: $credit id: $id, part: $part, school: $school, subSchool: $subSchool, subject: $subject, subjectCode: $subjectCode, subjectMgl: $subjectMgl) {\r\n            subject {\r\n                subject\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_SCHOOL = gql `\r\n    mutation updateSchool($id: ID, $name: String, $nameMgl: String){\r\n        updateSchool (id: $id, name: $name, nameMgl: $nameMgl){\r\n            school {\r\n                name\r\n                nameMgl\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_SUB_SCHOOL = gql `\r\n    mutation updateSubSchool($id: ID, $name: String, $nameMgl: String, $school: Int) {\r\n        updateSubSchool (id: $id, name: $name, nameMgl: $nameMgl, school: $school) {\r\n            subSchool {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_PROGRAM = gql `\r\n    mutation updateProgram ($id: ID, $program: String, $programMgl: String, $programNumeric: String, $status: String, $maxStudentNum: Int, $degree: Int, \r\n                            $school: Int, $subSchool: Int) {\r\n        updateProgram (id: $id, program: $program, programMgl: $programMgl, programNumeric: $programNumeric, status: $status, maxStudentNum: $maxStudentNum, \r\n                        degree: $degree, school: $school, subSchool: $subSchool) {\r\n            program {\r\n                program\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_CLASSES = gql `\r\n    mutation updateClasses($id: ID, $activity: Int, $classes: String, $classesMgl: String, $classesNumeric: String, $course: String, $degree: Int, $endCourse: String,\r\n                          $maxStudentNum: Int, $program: Int, $school: Int, $status: String, $subSchool: Int, $teacher: Int) {\r\n        updateClasses(id: $id, activity: $activity, classes: $classes, classesMgl: $classesMgl, classesNumeric: $classesNumeric, course: $course, degree: $degree,\r\n                    endCourse: $endCourse, maxStudentNum: $maxStudentNum, program: $program, school: $school, status: $status, subSchool: $subSchool, teacher: $teacher) {\r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_SECTION = gql `\r\n    mutation updateSection($id: ID, $classes: Int, $program: Int, $school: Int, $subSchool: Int, $section: String) {\r\n        updateSection (id: $id, classes: $classes, program: $program, school: $school, subSchool: $subSchool, section: $section) {\r\n            section {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_TEACHER = gql `\r\n    mutation updateTeacher ($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, \r\n                            $familyName: String, $id: ID!, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String, $registerNo: String, \r\n                            $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String, $username: String, $email: String) {\r\n        updateTeacher (address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate,\r\n                        familyName: $familyName, id: $id, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \r\n                        registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \r\n                        teacherCode: $teacherCode, username: $username, email: $email) {\r\n            teacher {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_EMPLOYEES = gql `\r\n    mutation updateEmployee ($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $employeeCode: String, $sex: String, $status: Int, \r\n                             $familyName: String, $group: Int, $id: Int, $name: String, $phone: String, $phone2: String, $registerNo: String, $compartment: Int,\r\n                             $username: String, $email: String) {\r\n        updateEmployee (address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, employeeCode: $employeeCode, sex: $sex, status: $status,\r\n                        familyName: $familyName, group: $group, id: $id, name: $name, phone: $phone, phone2: $phone2, registerNo: $registerNo, compartment: $compartment,\r\n                        username: $username, email: $email) {\r\n                            employee{\r\n                                id\r\n                            }\r\n                        }\r\n                    }\r\n`\r\n\r\nexport const UPDATE_PARENT = gql `\r\n    mutation updateParent ($address: String, $addressLive: String, $familyName: String, $id: ID, $name: String, $phone: String, $profession: String, $student: Int) {\r\n        updateParent (address: $address, addressLive: $addressLive, familyName: $familyName, id: $id, name: $name, phone: $phone, profession: $profession, student: $student) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TRANSFER_STUDENT = gql `\r\n    mutation transferStudent ($activity: Int, $classes: Int, $classtime: Int, $description: String, $docDate: String, $docNum: String, $program: Int, $school: Int, \r\n                                $section: Int, $status: Int, $statusExtra: Int, $student: Int) {\r\n        transferStudent (activity: $activity, classes: $classes, classtime: $classtime, description: $description, docDate: $docDate, docNum: $docNum, program: $program, \r\n                        school: $school, section: $section, status: $status, statusExtra: $statusExtra, student: $student) {\r\n            transfer {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_STUDENT = gql `\r\n    mutation updateStudent (\r\n        $address: String\r\n        $birthCity: Int\r\n        $birthDistrict: Int\r\n        $birthdate: String\r\n        $degree: Int\r\n        $email: String\r\n        $familyName: String\r\n        $id: ID\r\n        $joinBefore: String\r\n        $joinDate: String\r\n        $joinSchoolyear: String\r\n        $name: String\r\n        $phone: String\r\n        $phone2: String\r\n        $registerNo: String\r\n        $sex: String\r\n        $studentCode: String\r\n        $username: String\r\n    ) {\r\n        updateStudent (\r\n            address: $address\r\n            birthCity: $birthCity\r\n            birthDistrict: $birthDistrict\r\n            birthdate: $birthdate\r\n            degree: $degree\r\n            email: $email\r\n            familyName: $familyName\r\n            id: $id\r\n            joinBefore: $joinBefore\r\n            joinDate: $joinDate\r\n            joinSchoolyear: $joinSchoolyear\r\n            name: $name\r\n            phone: $phone\r\n            phone2: $phone2\r\n            registerNo: $registerNo\r\n            sex: $sex\r\n            studentCode: $studentCode\r\n            username: $username\r\n        ) {\r\n            student {\r\n                id\r\n            }\r\n        }    \r\n    }\r\n`;\r\n\r\nexport const UPDATE_EVENT_TYPE = gql `\r\n    mutation updateEventType ($color: String, $id: ID, $name: String) {\r\n        updateEventType (color: $color, id: $id, name: $name) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_EVENT = gql `\r\n    mutation updateEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $id: ID, $startAt: String, $title: String) {\r\n        updateEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, id: $id, startAt: $startAt, title: $title) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Form, Input, message, Spin, Row, Col, Select, Empty } from 'antd';\r\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\r\nimport { ALL_USERS, ALL_PARENTS } from 'graphql/all';\r\nimport { CREATE_PARENT } from 'graphql/create';\r\nimport { UPDATE_PARENT } from 'graphql/update';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { SELECT_STUDENT } from 'graphql/select';\r\nimport Loading from 'components/shared-components/Loading';\r\n\r\nconst { Option } = Select;\r\n\r\nfunction StudentForm ({ editData, formType, setIsModalVisible, setTableLoading }) {\r\n\r\n    const [form] = Form.useForm();\r\n    const { TextArea } = Input;\r\n\r\n    const [studentData, setStudentData] = useState([]);\r\n\r\n    const [fetchStudent, { loading: studentLoading }] = useLazyQuery(SELECT_STUDENT, {\r\n        onCompleted: data => {\r\n            setStudentData(data.allStudents)\r\n        }\r\n    });\r\n    const { data: allUsers } = useQuery(ALL_USERS);\r\n\r\n    const [createParent, { loading: createLoading }] = useMutation(CREATE_PARENT, {\r\n        refetchQueries: [ALL_PARENTS],\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            form.resetFields();\r\n            setIsModalVisible(false);\r\n            setTableLoading(true);\r\n\t\t}\r\n\t});\r\n\r\n    const [updateParent, { loading: editLoading }] = useMutation(UPDATE_PARENT, {\r\n        refetchQueries: [ALL_PARENTS],\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            form.resetFields();\r\n            setIsModalVisible(false);\r\n            setTableLoading(true);\r\n\t\t}\r\n    })\r\n\r\n    useEffect(() => {\r\n        \r\n        if (formType === 'edit') {\r\n            const newData ={\r\n                name: editData.name,\r\n\t\t\t\tfamilyName: editData.familyName,\r\n\t\t\t\tusername: editData.user.username,\r\n\t\t\t\temail: editData.user.email,\r\n\t\t\t\taddress: editData.address,\r\n\t\t\t\taddressLive: editData.addressLive,\r\n\t\t\t\tphone: editData.phone,\r\n\t\t\t\tprofession: editData.profession,\r\n\t\t\t\tstudent: editData.student.id,\r\n\t\t\t}\r\n            form.setFieldsValue(newData);\r\n        }\r\n    }, [editData, formType, form, fetchStudent])\r\n\r\n    function userExists(username) {\r\n        return allUsers?.allUsers.some(function(el) {\r\n            if (formType === \"edit\" && editData.user.username === username) {\r\n                return false;\r\n            } else {\r\n                return el.username === username;\r\n            }\r\n        }); \r\n    }\r\n\r\n    const phoneRegEx = new RegExp(/^[7-9][0-9]{3}[0-9]{4}$/u);\r\n\r\n    function onFinish (values) {\r\n        if (formType === 'edit') {\r\n            values.id = editData.id\r\n            updateParent({ variables: values})\r\n        } else {\r\n            createParent({ variables: values});\r\n        }\r\n    };\r\n\r\n    const onSearch = value => {\r\n        if (value !== '') {\r\n            fetchStudent({ variables: { offset: 0, limit: 99999999, filter: value } })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Spin spinning={createLoading || editLoading} tip=\"Ачааллаж байна...\">\r\n            <Form  \r\n                id=\"StudentForm\"\r\n                layout={'vertical'}\r\n                form={form}\r\n                name=\"control-hooks\"\r\n                onFinish={onFinish}\r\n            >\r\n                <Row gutter={[16, 24]}>\r\n                    <Col className=\"gutter-row\" span={12}>\r\n                        <Form.Item name=\"familyName\" label={<IntlMessage id=\"familyName\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input/>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"profession\" label={<IntlMessage id=\"profession\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input/>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"address\" label={<IntlMessage id=\"address\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <TextArea rows={2}/>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"email\" label={<IntlMessage id=\"email\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                            {\r\n                                type: 'email',\r\n                                message: 'И-мэйл утга буруу байна'\r\n                            },\r\n                        ]}>\r\n                            <Input/>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"username\" label={<IntlMessage id=\"username\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                            {\r\n                                validator(rule, value) {\r\n                                  if (userExists(value)) {\r\n                                    return Promise.reject('Нэвтрэх нэр бүртгэлтэй байна');\r\n                                  }\r\n                                  return Promise.resolve();\r\n                                },\r\n                            },\r\n                        ]}>\r\n                            <Input/>\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col className=\"gutter-row\" span={12}>\r\n                        <Form.Item name=\"name\" label={<IntlMessage id=\"name\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Input/>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"student\" label={<IntlMessage id=\"student\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <Select\r\n                                showSearch\r\n                                filterOption={false}\r\n                                notFoundContent={\r\n                                    studentLoading ? <Loading cover='content' /> \r\n                                    : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                                }\r\n                                onSearch={onSearch}\r\n                            >\r\n                                { studentData.map((item, index) => (\r\n                                    <Option value={item.id} key={index} > {item.familyName} {item.name} / {item.studentCode} </Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"addressLive\" label={<IntlMessage id=\"addressLive\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                        ]}>\r\n                            <TextArea rows={2}/>\r\n                        </Form.Item>\r\n                        <Form.Item name=\"phone\" label={<IntlMessage id=\"phone\" />} rules={[\r\n                            {\r\n                                required: true,\r\n                                message: <IntlMessage id=\"form.required\" />\r\n                            },\r\n                            {\r\n                                validator(rule, value) {\r\n                                    if (phoneRegEx.test(value)) {\r\n                                        return Promise.resolve();\r\n                                    }\r\n                                    return Promise.reject('Утасны дугаар буруу байна!');\r\n                                },\r\n                            }\r\n                        ]}>\r\n                            <Input/>\r\n                        </Form.Item>\r\n                        {\r\n                            formType === 'create' ?\r\n                                <Form.Item name=\"password\" label={<IntlMessage id=\"password\" />} rules={[\r\n                                    {\r\n                                        required: true,\r\n                                        message: <IntlMessage id=\"form.required\" />\r\n                                    },\r\n                                    {\r\n                                        min: 8,\r\n                                        message: 'Нууц үг 8-аас урттай дээш байх ёстой'\r\n                                    },\r\n                                    ({ getFieldValue }) => ({\r\n                                        validator(rule, value) {\r\n                                        if (!value || getFieldValue('username') === value) {\r\n                                            return Promise.reject('Нэвтрэх нэр нууц үг хоёр ижил байх боломгүй!');\r\n                                        }\r\n                                        return Promise.resolve();\r\n                                        },\r\n                                    }),\r\n                                ]}>\r\n                                    <Input.Password/>\r\n                                </Form.Item> \r\n                            :\r\n                                null\r\n                        }\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default StudentForm","import React, { useState, useEffect } from 'react'\r\nimport { Modal, message, Button } from 'antd';\r\nimport { DeleteTwoTone, EditTwoTone } from '@ant-design/icons';\r\nimport utils from 'utils'\r\nimport ParentForm from './form'\r\nimport { useLazyQuery, useMutation } from '@apollo/client';\r\nimport { DELETE_PARENT } from 'graphql/delete';\r\nimport { ALL_PARENTS } from 'graphql/all';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport AsyncTable from 'components/shared-components/AsyncTable';\r\n\r\nfunction  StudentsTable (props) {\r\n\r\n    const [count, setCount] = useState(1);\r\n    \r\n\tconst [list, setList] = useState([])\r\n\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\tconst [editData, setEditData] = useState([]);\r\n\tconst [formType, setFormType] = useState(\"\");\r\n\r\n\tconst [fetchData, { loading, refetch }] = useLazyQuery(ALL_PARENTS, {\r\n        fetchPolicy: 'network-only',\r\n        onCompleted: data => {\r\n            setCount(data.count.count);\r\n            setList(data.allParents);\r\n        }\r\n\t});\r\n\r\n    useEffect(() => {\r\n        fetchData({ variables: { offset: 0, limit: 9, filter: ''} })\r\n    }, [fetchData])\r\n\r\n    const showModal = () => {\r\n\t\tsetFormType(\"create\");\r\n      \tsetIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n      setIsModalVisible(false);\r\n    };\r\n\r\n\tconst editRow = row => {\r\n\t\tsetEditData(row);\r\n\t\tsetFormType(\"edit\");\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n\tconst { confirm } = Modal;\r\n\r\n\tconst [deleteStudent] = useMutation(DELETE_PARENT, {\r\n\t\trefetchQueries: [ALL_PARENTS],\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n            title: \"Устгах уу?\",\r\n            okText: \"Устгах\",\r\n            okType: 'danger',\r\n            cancelText: \"Болих\",\r\n            onOk() {\r\n                deleteStudent({ variables: { id: row.id } }); \r\n            },\r\n\t\t});\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'familyName',\r\n\t\t\ttitle: <IntlMessage id=\"familyName\" />,\r\n\t\t\tdataIndex: 'familyName',\r\n\t\t\twidth: '10vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'familyName')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'name',\r\n\t\t\ttitle: <IntlMessage id=\"name\" />,\r\n\t\t\tdataIndex: 'name',\r\n\t\t\twidth: '10vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'name')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'profession',\r\n\t\t\ttitle: <IntlMessage id=\"profession\" />,\r\n\t\t\tdataIndex: 'profession',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'profession')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'phone',\r\n\t\t\ttitle: <IntlMessage id=\"phone\" />,\r\n\t\t\tdataIndex: 'phone',\r\n\t\t\twidth: '10vw',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'phone'),\r\n\t\t\trender: text => <span>{text.substr(0, 4) + `-` + text.substr(4, 9)}</span>,\r\n\t\t},\r\n\t\t{\r\n            title: <IntlMessage id=\"student\" />,\r\n            children: [\r\n                {\r\n                    key: 'student',\r\n                    title: <IntlMessage id=\"student\" />,\r\n                    dataIndex: 'student',\r\n                    width: '10vw',\r\n                    sorter: (a, b) => utils.antdTableSorter(a, b, 'student'),\r\n                    render: text => <span>{text.familyName} {text.name}</span>,\r\n                },\r\n                {\r\n                    key: 'studentCode',\r\n                    title: <IntlMessage id=\"studentCode\" />,\r\n                    dataIndex: ['student', 'studentCode'],\r\n                    width: '10vw',\r\n                    sorter: (a, b) => utils.antdTableSorter(a, b, 'studentCode'),\r\n                }\r\n            ]\r\n\t\t},\r\n\t];\r\n\r\n\tif (props.permissions.edit === true || props.permissions.destroy === true) {\r\n\t\ttableColumns.push(\r\n\t\t\t{\r\n\t\t\t\tkey: 'actions',\r\n\t\t\t\ttitle: <IntlMessage id=\"main.action\" />,\r\n\t\t\t\twidth: '15vw',\r\n\t\t\t\tdataIndex: 'actions',\r\n\t\t\t\trender: (_, elm) => (\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{ props.permissions.edit === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id=\"edit\" /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{ props.permissions.destroy === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Modal \r\n                title={ formType === `create` ? <IntlMessage id=\"add_new\" /> : <IntlMessage id=\"edit\" />}\r\n                visible={isModalVisible} \r\n\t\t\t\twidth={'80vw'}\r\n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\r\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tokButtonProps={{form:'StudentForm', key: 'submit', htmlType: 'submit'}}\r\n            >\r\n                <ParentForm \r\n\t\t\t\t\trefetch={refetch}\r\n\t\t\t\t\tformType={formType} \r\n\t\t\t\t\teditData={editData} \r\n\t\t\t\t\tsetIsModalVisible={setIsModalVisible}\r\n\t\t\t\t/>\r\n            </Modal>\r\n\t\t\t<AsyncTable \r\n                fetchData={fetchData}\r\n                loading={loading}\r\n                columns={tableColumns}\r\n                data={list}\r\n                count={count}\r\n                permissions={props.permissions}\r\n                showModal={showModal}\r\n           />\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default StudentsTable\r\n","import React from \"react\";\r\nimport ParentsTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nconst Index = (props) => {\r\n\r\n    const create = CheckPer('add_parent');\r\n    const edit = CheckPer('change_parent');\r\n    const destroy = CheckPer('delete_parent');\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    return (\r\n        <ParentsTable title={props.title} permissions={permissions} />\r\n    )\r\n}\r\n\r\nexport default Index;\r\n"],"names":["fetchData","loading","columns","data","permissions","showModal","useState","setFilter","alignItems","justifyContent","mobileFlex","className","placeholder","prefix","onChange","e","value","currentTarget","variables","offset","limit","filter","program","onSearch","create","onClick","type","icon","block","id","size","dataSource","rowKey","bordered","Flex","props","children","flexDirection","defaultProps","SELECT_STUDENT","gql","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","UPDATE_SUBJECT","UPDATE_SCHOOL","UPDATE_SUB_SCHOOL","UPDATE_PROGRAM","UPDATE_CLASSES","UPDATE_SECTION","UPDATE_TEACHER","UPDATE_EMPLOYEES","UPDATE_PARENT","TRANSFER_STUDENT","UPDATE_STUDENT","UPDATE_EVENT_TYPE","UPDATE_EVENT","Option","Select","editData","formType","setIsModalVisible","setTableLoading","Form","form","TextArea","Input","studentData","setStudentData","useLazyQuery","onCompleted","allStudents","fetchStudent","studentLoading","allUsers","useQuery","ALL_USERS","useMutation","CREATE_PARENT","refetchQueries","ALL_PARENTS","message","resetFields","createParent","createLoading","updateParent","editLoading","useEffect","newData","name","familyName","username","user","email","address","addressLive","phone","profession","student","setFieldsValue","phoneRegEx","RegExp","spinning","tip","layout","onFinish","values","gutter","span","label","IntlMessage","rules","required","rows","validator","rule","some","el","Promise","reject","resolve","showSearch","filterOption","notFoundContent","Loading","cover","image","Empty","map","item","index","studentCode","test","min","getFieldValue","count","setCount","list","setList","isModalVisible","setEditData","setFormType","fetchPolicy","allParents","refetch","confirm","Modal","DELETE_PARENT","deleteStudent","tableColumns","key","title","dataIndex","width","sorter","a","b","utils","render","text","substr","edit","destroy","push","_","elm","row","editRow","EditTwoTone","twoToneColor","okText","okType","cancelText","onOk","deleteRow","DeleteTwoTone","visible","onCancel","okButtonProps","htmlType","AsyncTable","CheckPer","Object","indexOf"],"sourceRoot":""}