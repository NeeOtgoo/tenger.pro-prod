{"version":3,"file":"static/js/9712.0c5f0fff.chunk.js","mappings":"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","sources":["components/shared-components/Flex/index.js","components/shared-components/StudentSelect/index.js","graphql/lesson.js","graphql/select.js","views/app-views/online-lesson/students.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import React, { useState } from 'react';\r\nimport { useLazyQuery, useQuery } from '@apollo/client';\r\nimport { Button, Card, Col, Empty, Form, Row, Select, Skeleton } from 'antd'\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { SECTIONS_BY_PROGRAM, SELECT_PROGRAM, SELECT_STUDENT } from 'graphql/select';\r\nimport Loading from '../Loading';\r\n\r\nconst { Option } = Select;\r\n\r\nconst StudentSelect = ({ submitData, mutationData, loading }) => {\r\n\r\n    const [formSection] = Form.useForm();\r\n    const [formStudent] = Form.useForm();\r\n\r\n    const [programs, setPrograms] = useState([]);\r\n    const [sections, setSections] = useState([]);\r\n    const [students, setStudents] = useState([]);\r\n\r\n    const { loading: programLoading } = useQuery(SELECT_PROGRAM, {\r\n        onCompleted: data => {\r\n            setPrograms(data.allPrograms);\r\n        }\r\n    })\r\n\r\n    const [fetchSection, { loading: sectionLoading}] = useLazyQuery(SECTIONS_BY_PROGRAM, {\r\n        onCompleted: data => {\r\n            setSections(data.sectionsByProgram);\r\n        }\r\n    })\r\n\r\n    const [fetchStudent, { loading: studentLoading }] = useLazyQuery(SELECT_STUDENT, {\r\n        onCompleted: data => {\r\n            setStudents(data.allStudents)\r\n        }\r\n    })\r\n\r\n    const onFinish = (values) => {\r\n        const variables = Object.assign(values, mutationData)\r\n        submitData({ variables: variables });\r\n    }\r\n\r\n    const onProgramSelect = (program) => {\r\n        formSection.setFieldsValue({\r\n            section: \"\",\r\n        });\r\n        fetchSection({ variables: { program: program } })\r\n    }\r\n\r\n    const onStudentSearch = (value) => {\r\n        if (value === '') {\r\n            setStudents([]);\r\n        } else {\r\n            fetchStudent({ variables: { offset: 0, limit: 99999999, filter: value } });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Skeleton active loading={programLoading} >\r\n            <Row gutter={16}>\r\n                <Col xs={24} xl={12}>\r\n                    <Card \r\n                        className='mt-4'\r\n                        title={<IntlMessage id=\"by-section\" />}\r\n                    >\r\n                        <Form  \r\n                            id=\"section\"\r\n                            layout={'vertical'}\r\n                            form={formSection}\r\n                            name=\"control-hooks\" \r\n                            onFinish={onFinish}\r\n                        >\r\n                            <Form.Item \r\n                                name=\"program\" \r\n                                label={<IntlMessage id=\"program\" />} \r\n                                rules={[\r\n                                    { \r\n                                        required: true,\r\n                                         message: <IntlMessage id=\"form.required\" /> \r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Select\r\n                                    onSelect={onProgramSelect}\r\n                                    allowClear\r\n                                    showSearch\r\n                                    optionFilterProp=\"children\"\r\n                                    filterOption={(input, option) =>\r\n                                        option.children.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                    }\r\n                                >\r\n                                    { programs.map((program, index) => (\r\n                                        <Option value={program.id} key={index}>{program.program} / {program.programNumeric}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item \r\n                                name=\"section\" \r\n                                label={<IntlMessage id=\"section\" />} \r\n                                rules={[\r\n                                    { \r\n                                        required: true,\r\n                                         message: <IntlMessage id=\"form.required\" /> \r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Select\r\n                                    allowClear\r\n                                    notFoundContent={\r\n                                        sectionLoading ? <Loading cover='content' /> \r\n                                        : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                                    }\r\n                                >\r\n                                    { sections.map((section, index) => (\r\n                                        <Option value={section.id} key={index}>{section.classes.classes} / {section.section}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item className='text-right'>\r\n                                <Button className=\"mr-2\" type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n                                    <IntlMessage id=\"main.okText\" />\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Card>\r\n                </Col>\r\n                <Col xs={24} xl={12}>\r\n                    <Card \r\n                        className='mt-4'\r\n                        title={<IntlMessage id=\"by-student-code\" />}\r\n                    >\r\n                        <Form  \r\n                            id=\"student\"\r\n                            layout={'vertical'}\r\n                            form={formStudent}\r\n                            name=\"control-hooks\" \r\n                            onFinish={onFinish}\r\n                        >\r\n                            <Form.Item \r\n                                name=\"studentCode\" \r\n                                label={<IntlMessage id=\"studentCode\" />} \r\n                                rules={[\r\n                                    { \r\n                                        required: true,\r\n                                        message: <IntlMessage id=\"form.required\" /> \r\n                                    }\r\n                                ]}\r\n                            >\r\n                                <Select\r\n                                    showSearch\r\n                                    filterOption={false}\r\n                                    notFoundContent={\r\n                                        studentLoading ? <Loading cover='content' /> \r\n                                        : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                                    }\r\n                                    onSearch={onStudentSearch}\r\n                                >\r\n                                    { students.map((student, index) => (\r\n                                        <Option value={student.studentCode} key={index}> {student.familyName} {student.name} / {student.studentCode}</Option>\r\n                                    ))}\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item className='text-right'>\r\n                                <Button className=\"mr-2\" type=\"primary\" htmlType=\"submit\" loading={loading}>\r\n                                    <IntlMessage id=\"main.okText\" />\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </Skeleton>\r\n    )\r\n}\r\n\r\nexport default StudentSelect","import { gql } from '@apollo/client';\r\n\r\nexport const ALL_ONLINE_TYPE = gql `\r\n    query allOnlineTypes {\r\n        allOnlineTypes {\r\n            id\r\n            name\r\n        }\r\n    }\r\n\r\n`;\r\n\r\nexport const ALL_ONLINE_FILE = gql `\r\n    query allOnlineFiles ($folder: Int){\r\n        allOnlineFiles (folder: $folder){\r\n            id\r\n            file\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_FOLDERS = gql `\r\n    query allFolders ($folder: Int){\r\n        allFolders(folder: $folder){\r\n            id\r\n            name\r\n        }\r\n    }\r\n    `\r\n\r\nexport const CREATE_ONLINE_FILE = gql `\r\n    mutation createOnlineFile($file: Upload!, $folder: Int) {\r\n        createOnlineFile(file: $file, folder: $folder) {\r\n            onlineFile {\r\n                id\r\n                file\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_ONLINE_FILE_FOLDER = gql `\r\n    mutation createOnlineFileFolder($name: String, $subFolder: Int){\r\n        createOnlineFileFolder(name: $name, subFolder: $subFolder){\r\n            onlineFileFolder{\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ONLINE_FILE = gql `\r\n    mutation deleteOnlineFile ($id: ID) {\r\n        deleteOnlineFile (id: $id) {\r\n            onlineFile {\r\n                file\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ONLINE_FILE_FOLDER = gql`\r\n    mutation deleteOnlineFileFolder ($id: Int){\r\n        deleteOnlineFileFolder (id: $id){\r\n            onlineFileFolder {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const CREATE_ONLINE_LESSON = gql`\r\n    mutation createOnlineLesson ($content: String, $description: String, $schoolyear: Int, $status: String, $subject: Int) {\r\n        createOnlineLesson (content: $content, description: $description, schoolyear: $schoolyear, status: $status, subject: $subject) {\r\n            onlineLesson {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_ONLINE_LESSON = gql`\r\n    mutation updateOnlineLesson ($content: String, $description: String, $id: ID, $schoolyear: Int, $status: String, $subject: Int) {\r\n        updateOnlineLesson (content: $content, description: $description, id: $id, schoolyear: $schoolyear, status: $status, subject: $subject) {\r\n            onlineLesson {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_ONLINE_LESSON = gql`\r\n    query allOnlineLessons ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"online_lesson\", modelName: \"Online_lesson\", filter: $filter) {\r\n            count\r\n        }\r\n        allOnlineLessons (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            schoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n            subject {\r\n                id\r\n                subject\r\n            }\r\n            description\r\n            content\r\n            status\r\n            createUserid {\r\n                isTeacher\r\n                teacher {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const LESSON_BY_ID = gql `\r\n    query onlineLessonById ($id: Int!) {\r\n        onlineLessonById (id: $id) {\r\n            id\r\n            schoolyear {\r\n                schoolyear\r\n                id\r\n            }\r\n            subject {\r\n                subject\r\n                id\r\n            }\r\n            description\r\n            content\r\n            status\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ONLINE_LESSON = gql `\r\n    mutation deleteOnlineLesson ($id: ID) {\r\n        deleteOnlineLesson (id: $id) {\r\n            onlineLesson {\r\n                status\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_SUB_LESSON_BY_LESSON = gql `\r\n    query allOnlineSubByLesson ($onlineLesson: Int!) {\r\n        allOnlineSubByLesson (onlineLesson: $onlineLesson) {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            createUserid {\r\n                isTeacher\r\n                teacher {\r\n                    name\r\n                }\r\n            }\r\n            onlineType {\r\n                id\r\n                name\r\n            }\r\n            onlineSubFileSet {\r\n                id\r\n                onlineFile {\r\n                    id\r\n                    file\r\n                }\r\n            }\r\n            status\r\n            createdAt\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_SUB_LESSON = gql`\r\n    mutation createOnlineSub ($content: String, $description: String, $onlineLesson: Int, $status: String, $title: String, $onlineType: Int) {\r\n        createOnlineSub (content: $content, description: $description, onlineLesson: $onlineLesson, status: $status, title: $title, onlineType: $onlineType) {\r\n            onlineSub {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_SUB_LESSON = gql `\r\n    mutation updateOnlineSub ($content: String, $description: String, $id: ID, $onlineLesson: Int, $status: String, $title: String, $onlineType: Int) {\r\n        updateOnlineSub (content: $content, description: $description, id: $id, onlineLesson: $onlineLesson, status: $status, title: $title, onlineType: $onlineType) {\r\n            onlineSub {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_SUB_LESSON = gql `\r\n    mutation deleteOnlineSub ($id: ID) {\r\n        deleteOnlineSub (id: $id) {\r\n            onlineSub {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SUB_BY_ID = gql `\r\n    query onlineSubById ($id: Int!) {\r\n        onlineSubById (id: $id) {\r\n            title\r\n            description\r\n            content\r\n            onlineLesson {\r\n                subject {\r\n                    subject\r\n                }\r\n            }\r\n            onlineSubFileSet {\r\n                id\r\n                onlineFile {\r\n                    id\r\n                    file\r\n                }\r\n            }\r\n            onlineType {\r\n                id\r\n                name\r\n            }\r\n            onlineAttendanceSet {\r\n                student {\r\n                    id\r\n                    studentCode\r\n                    name\r\n                    familyName\r\n                }\r\n            }\r\n            status\r\n            createdAt\r\n        }\r\n    } \r\n`;\r\n\r\nexport const CREATE_ONLINE_STUDENT = gql `\r\n    mutation createOnlineStudent ($onlineLesson: Int, $studentCode: String = \"\", $section: Int = 0) {\r\n        createOnlineStudent (onlineLesson: $onlineLesson, studentCode: $studentCode, section: $section) {\r\n            onlineStudent {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_ONLINE_STUDENT = gql `\r\n    mutation deleteOnlineStudent ($id: ID) {\r\n        deleteOnlineStudent (id: $id) {\r\n            onlineStudent {\r\n                student {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_ONLINE_STUDENT_BY_LESSON = gql `\r\n    query allOnlineStudentByLesson ($onlineLesson: Int!) {\r\n        allOnlineStudentByLesson (onlineLesson: $onlineLesson) {\r\n            id\r\n            student {\r\n                id\r\n                familyName\r\n                name\r\n                studentCode\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_ONLINE_SUB_FILES = gql`\r\n    query allOnlineSubFiles ($onlineSub: Int) {\r\n        allOnlineSubFiles (onlineSub: $onlineSub) {\r\n            id\r\n            onlineFile {\r\n                id\r\n                file\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const CREATE_ONLINE_SUB_FILE = gql`\r\n    mutation createOnlineSubFile ($onlineFile: Int, $onlineSub: Int) {\r\n        createOnlineSubFile (onlineFile: $onlineFile, onlineSub: $onlineSub) {\r\n            onlineSubFile {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_ONLINE_SUB_FILE = gql`\r\n    mutation deleteOnlineSubFile ($id: Int) {\r\n        deleteOnlineSubFile (id: $id) {\r\n            onlineSubFile {\r\n                onlineSub {\r\n                    id\r\n                }\r\n            }\r\n        }\r\n    }\r\n`","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n            classesNumeric\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql `\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject \r\n            subjectCode\r\n            credit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n            programNumeric\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;","import React from 'react';\r\nimport { Card, Table, Button, message, Modal, Empty } from 'antd';\r\nimport { DeleteTwoTone, RollbackOutlined } from '@ant-design/icons'\r\nimport { useQuery, useMutation } from '@apollo/client';\r\nimport Loading from 'components/shared-components/Loading';\r\nimport { CREATE_ONLINE_STUDENT, ALL_ONLINE_STUDENT_BY_LESSON, DELETE_ONLINE_STUDENT } from 'graphql/lesson';\r\nimport Flex from 'components/shared-components/Flex';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport StudentSelect from 'components/shared-components/StudentSelect';\r\n\r\nconst { confirm } = Modal;\r\n\r\nconst Students = (props) => {\r\n\r\n    const history = useHistory();\r\n    const { lesson } = useParams();\r\n\r\n    const { data, loading, refetch } = useQuery(ALL_ONLINE_STUDENT_BY_LESSON, {\r\n        variables: { onlineLesson: lesson }\r\n    });\r\n\r\n    const [create, { loading: createLoading }] = useMutation(CREATE_ONLINE_STUDENT, {\r\n        onCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай хадгаллаа!');\r\n        }\r\n    });\r\n    const [destroy, { loading: destroyLoading }] = useMutation(DELETE_ONLINE_STUDENT, {\r\n        onCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай устлаа!');\r\n        }\r\n    });\r\n\r\n    const handleDestroy = (value) => {\r\n        confirm({\r\n            title: 'Устгах уу?',\r\n            okText: 'Устгах',\r\n            okType: 'danger',\r\n            cancelText: 'Болих',\r\n            onOk() {\r\n                destroy({ variables: { id: value } }); \r\n            },\r\n          });\r\n    }\r\n\r\n    const participant_colums = [\r\n        {\r\n            title: <IntlMessage id=\"studentCode\" />,\r\n            dataIndex: ['student', 'studentCode'],\r\n            key: 'studentCode',\r\n        },\r\n        {\r\n            title: <IntlMessage id=\"familyName\" />,\r\n            dataIndex: ['student', 'familyName'],\r\n            key: 'familyName',\r\n        },\r\n        {\r\n            title: <IntlMessage id=\"name\" />,\r\n            dataIndex: ['student', 'name'],\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: <IntlMessage id=\"main.action\" />,\r\n            dataIndex: 'id',\r\n            key: 'id',\r\n            width: '30px',\r\n            render: (_, elm) => (\r\n                <div className=\"text-center\">\r\n                    <Button loading={destroyLoading} size=\"small\" onClick={() => handleDestroy(elm.id)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id=\"delete\" /></Button>\r\n                </div>\r\n            )\r\n        },\r\n    ]\r\n\r\n    if (loading) {\r\n        return (\r\n            <Loading cover=\"content\" />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n                <Flex mobileFlex={false}>\r\n                    <div className='text-right' >\r\n                        <Button onClick={() => history.goBack()} type=\"default\" icon={<RollbackOutlined />} block> {<IntlMessage id=\"back\" />}</Button>\r\n                    </div>\r\n                </Flex>\r\n            </Flex>\r\n            <StudentSelect \r\n                submitData={create}\r\n                loading={createLoading}\r\n                mutationData={{ onlineLesson: lesson }}\r\n            />\r\n            <Card \r\n                className='mt-4'\r\n                title={<IntlMessage id=\"student\" />}\r\n            >\r\n                <Table\r\n                    className='mt-2'\r\n                    columns={participant_colums} \r\n                    rowKey='id'\r\n                    bordered\r\n                    pagination={false}\r\n                    dataSource={data.allOnlineStudentByLesson} \r\n                />\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Students"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","Option","Select","submitData","mutationData","loading","Form","formSection","formStudent","useState","programs","setPrograms","sections","setSections","students","setStudents","programLoading","useQuery","SELECT_PROGRAM","onCompleted","data","allPrograms","useLazyQuery","SECTIONS_BY_PROGRAM","sectionsByProgram","fetchSection","sectionLoading","SELECT_STUDENT","allStudents","fetchStudent","studentLoading","onFinish","values","variables","Object","assign","active","gutter","xs","xl","title","id","layout","form","name","label","rules","required","message","onSelect","program","setFieldsValue","section","allowClear","showSearch","optionFilterProp","filterOption","input","option","toString","toLowerCase","indexOf","map","index","value","programNumeric","notFoundContent","cover","image","Empty","classes","type","htmlType","onSearch","offset","limit","filter","student","studentCode","familyName","ALL_ONLINE_TYPE","gql","ALL_ONLINE_FILE","ALL_FOLDERS","CREATE_ONLINE_FILE","CREATE_ONLINE_FILE_FOLDER","DELETE_ONLINE_FILE","DELETE_ONLINE_FILE_FOLDER","CREATE_ONLINE_LESSON","UPDATE_ONLINE_LESSON","ALL_ONLINE_LESSON","LESSON_BY_ID","DELETE_ONLINE_LESSON","ALL_SUB_LESSON_BY_LESSON","CREATE_SUB_LESSON","UPDATE_SUB_LESSON","DELETE_SUB_LESSON","SUB_BY_ID","CREATE_ONLINE_STUDENT","DELETE_ONLINE_STUDENT","ALL_ONLINE_STUDENT_BY_LESSON","CREATE_ONLINE_SUB_FILE","DELETE_ONLINE_SUB_FILE","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","confirm","Modal","history","useHistory","lesson","useParams","onlineLesson","refetch","useMutation","create","createLoading","destroy","destroyLoading","participant_colums","dataIndex","key","width","render","_","elm","size","onClick","okText","okType","cancelText","onOk","icon","twoToneColor","goBack","block","columns","rowKey","bordered","pagination","dataSource","allOnlineStudentByLesson"],"sourceRoot":""}