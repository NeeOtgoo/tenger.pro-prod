{"version":3,"file":"static/js/510.c6462b5b.chunk.js","mappings":"4HAGMA,EAAO,SAAAC,GACZ,IAAQC,EAA+ED,EAA/EC,SAAUC,EAAqEF,EAArEE,UAAWC,EAA0DH,EAA1DG,WAAYC,EAA8CJ,EAA9CI,eAAgBC,EAA8BL,EAA9BK,WAAYC,EAAkBN,EAAlBM,cAErE,OACC,gBAAKJ,UAAS,UAFiBG,EAAa,SAAW,YAEjB,YAAIH,EAAS,YAAII,EAAe,QAAUA,EAAgB,GAAE,YAAIH,EAAY,eAAiBA,EAAY,GAAE,YAAIC,EAAgB,mBAAqBA,EAAgB,IAAM,SAC9MH,GAGJ,EAUAF,EAAKQ,aAAe,CACnBF,YAAY,EACZC,cAAe,MACfJ,UAAW,IAIZ,K,4YC1BaM,GAAiBC,EAAAA,EAAAA,IAAG,4bAUpBC,GAAgBD,EAAAA,EAAAA,IAAG,qQAWnBE,GAAoBF,EAAAA,EAAAA,IAAG,sRAUvBG,GAAiBH,EAAAA,EAAAA,IAAG,qjBAYpBI,GAAiBJ,EAAAA,EAAAA,IAAG,iuBAYpBK,GAAiBL,EAAAA,EAAAA,IAAG,8VAUpBM,GAAiBN,EAAAA,EAAAA,IAAG,2+BAepBO,GAAmBP,EAAAA,EAAAA,IAAG,m9BActBQ,GAAgBR,EAAAA,EAAAA,IAAG,6bAUnBS,GAAmBT,EAAAA,EAAAA,IAAG,upBAYtBU,GAAiBV,EAAAA,EAAAA,IAAG,otCAgDpBW,GAAoBX,EAAAA,EAAAA,IAAG,kPAUvBY,GAAeZ,EAAAA,EAAAA,IAAG,4Y,qUC1F/B,MA9EA,SAAoB,GAAuD,IAApDa,EAAQ,EAARA,SAAUC,EAAQ,EAARA,SAAUC,EAAiB,EAAjBA,kBAAmBC,EAAS,EAATA,UAE1D,EAAeC,EAAAA,EAAAA,UAARC,GAAsB,YAAlB,GAEX,GAAoDC,EAAAA,EAAAA,GAAYC,EAAAA,GAAgB,CAC5EC,eAAgB,CACZ,CACIC,MAAOC,EAAAA,GACPC,UAAW,CAAEC,QAAUT,EAAUS,WAG/CC,YAAa,SAAAC,GACHC,EAAAA,GAAAA,QAAgB,iHAChBb,GAAkB,EAC5B,IACC,eAXQc,EAAa,KAAaC,EAAa,KAAtBC,QAaxB,GAAoDZ,EAAAA,EAAAA,GAAYd,EAAAA,GAAgB,CAC5EgB,eAAgB,CACZ,CACIC,MAAOC,EAAAA,GACPC,UAAW,CAAEC,QAAUT,EAAUS,WAGzCC,YAAa,SAAAC,GACTC,EAAAA,GAAAA,QAAgB,iHAChBb,GAAkB,EACtB,IACF,eAXKiB,EAAa,KAAaC,EAAa,KAAtBF,QAuCxB,OAxBAG,EAAAA,EAAAA,YAAU,WACU,SAAbpB,EACCI,EAAKiB,eAAe,CAC5BC,QAASvB,EAASuB,QAClBC,GAAIxB,EAASwB,KAEc,WAAbvB,GACNI,EAAKoB,aAEb,GAAG,CAACzB,EAAUK,EAAMJ,KAgBhB,SAAC,IAAI,CAACyB,SAAUT,GAAiBG,EAAeO,IAAI,qFAAmB,UACnE,SAAC,IAAI,CACDH,GAAG,cACaI,OAAQ,WACxBvB,KAAMA,EACNwB,KAAK,gBACLC,SAlBK,SAAAC,GACb,GAAiB,SAAb9B,EAAqB,CACrB8B,EAAOP,GAAKxB,EAASwB,GACrB,IAAMQ,EAAcC,OAAOC,OAAOH,EAAQ5B,GAC1CgB,EAAc,CAAER,UAAWqB,GAC/B,KAAO,CACH,IAAMA,EAAcC,OAAOC,OAAOH,EAAQ5B,GAC1Ca,EAAc,CAAEL,UAAWqB,GAC/B,CACJ,EAS+B,UAEnB,SAAC,SAAS,CAACH,KAAK,UAAUM,OAAO,SAACC,EAAA,EAAW,CAACZ,GAAG,SAAWa,MAAO,CAC/D,CACIC,UAAU,EACVvB,SAAS,SAACqB,EAAA,EAAW,CAACZ,GAAG,oBAE/B,UACE,SAAC,IAAK,SAK1B,E,iCC8GA,MAtLA,SAAwB9C,GAEpB,IAAM6D,GAAUC,EAAAA,EAAAA,MAEnB,GAAwBC,EAAAA,EAAAA,UAAS,IAAG,eAA7BC,EAAI,KAAEC,EAAO,KAEjB,GAA0BC,EAAAA,EAAAA,GAASlC,EAAAA,GAAoB,CACnDC,UAAW,CAAEC,QAASlC,EAAMkC,QAAQY,MADhCN,EAAO,EAAPA,QAASJ,EAAI,EAAJA,KAIpB,GAA4C2B,EAAAA,EAAAA,WAAS,GAAM,eAApDI,EAAc,KAAE3C,EAAiB,KACxC,GAAgCuC,EAAAA,EAAAA,UAAS,IAAG,eAArCzC,EAAQ,KAAE8C,EAAW,KAC5B,GAAgCL,EAAAA,EAAAA,UAAS,IAAG,eAArCxC,EAAQ,KAAE8C,EAAW,MAiBzB1B,EAAAA,EAAAA,YAAU,YACU,IAAZH,GAAqBJ,GACrB6B,EAAQ7B,EAAKkC,kBAErB,GAAG,CAAClC,EAAMI,IAGb,IAAQ+B,EAAYC,EAAAA,EAAAA,QAEpB,GAAwB5C,EAAAA,EAAAA,GAAY6C,EAAAA,GAAgB,CACnD3C,eAAgB,CACN,CACIC,MAAOC,EAAAA,GACPC,UAAW,CAAEC,QAAUlC,EAAMkC,QAAQY,MAGnDX,YAAa,SAAAC,GACHC,EAAAA,GAAAA,QAAgB,8FAC1B,IATMqC,GAUL,YAVkB,GAwBdC,EAAe,CACpB,CACCC,IAAK,UACLC,OAAO,SAACnB,EAAA,EAAW,CAACZ,GAAG,YACvBgC,UAAW,UACXC,OAAQ,SAACC,EAAGC,GAAC,OAAKC,EAAAA,GAAAA,gBAAsBF,EAAGC,EAAG,UAAU,GAEzD,CACCL,IAAK,SACLC,OAAO,SAACnB,EAAA,EAAW,CAACZ,GAAG,WACvBgC,UAAW,CAAC,SAAU,QACtBC,OAAQ,SAACC,EAAGC,GAAC,OAAKC,EAAAA,GAAAA,gBAAsBF,EAAGC,EAAG,SAAS,GAExD,CACCL,IAAK,YACLC,OAAO,SAACnB,EAAA,EAAW,CAACZ,GAAG,eACvBgC,UAAW,CAAC,YAAa,QACzBC,OAAQ,SAACC,EAAGC,GAAC,OAAKC,EAAAA,GAAAA,gBAAsBF,EAAGC,EAAG,YAAY,GAE3D,CACCL,IAAK,UACLC,OAAO,SAACnB,EAAA,EAAW,CAACZ,GAAG,YACvBgC,UAAW,CAAC,UAAW,WACvBC,OAAQ,SAACC,EAAGC,GAAC,OAAKC,EAAAA,GAAAA,gBAAsBF,EAAGC,EAAG,UAAU,GAEzD,CACCL,IAAK,UACLC,OAAO,SAACnB,EAAA,EAAW,CAACZ,GAAG,YACvBgC,UAAW,CAAC,UAAW,WACvBC,OAAQ,SAACC,EAAGC,GAAC,OAAKC,EAAAA,GAAAA,gBAAsBF,EAAGC,EAAG,UAAU,IAgC1D,OA5B+B,IAA3BjF,EAAMmF,YAAYC,OAA+C,IAA9BpF,EAAMmF,YAAYE,SACxDV,EAAaW,KACZ,CACCV,IAAK,UACLC,OAAO,SAACnB,EAAA,EAAW,CAACZ,GAAG,gBACvByC,MAAO,OACPT,UAAW,UACXU,OAAQ,SAACC,EAAGC,GAAG,OACd,iBAAKxF,UAAU,cAAa,WACE,IAA3BF,EAAMmF,YAAYC,OACnB,UAAC,IAAM,CAACO,KAAK,QAAQC,QAAS,kBAlFpBC,EAkFkCH,EAjFjDrB,EAAY,QACZD,EAAYyB,QACZrE,GAAkB,GAHH,IAAAqE,CAkFsC,EAAEC,KAAK,OAAOC,MAAM,SAACC,EAAA,EAAW,CAACC,aAAa,YAAY,eAAG,SAACvC,EAAA,EAAW,CAACZ,GAAG,aAE9F,IAA9B9C,EAAMmF,YAAYE,UACnB,UAAC,IAAM,CAACM,KAAK,QAAQC,QAAS,kBA1DjBC,EA0DiCH,OAzDnDnB,EAAQ,CACNM,MAAO,qDACPqB,OAAQ,uCACRC,OAAQ,SACRC,WAAY,iCACZC,KAAI,WACL3B,EAAc,CAAEzC,UAAW,CAAEa,GAAI+C,EAAI/C,KACpC,IARH,IAAmB+C,CA0DqC,EAAEC,KAAK,OAAOC,MAAM,SAACO,EAAA,EAAa,CAACL,aAAa,YAAY,eAAG,SAACvC,EAAA,EAAW,CAACZ,GAAG,gBAE7H,KAcT,iCACC,SAAC,IAAK,CACO+B,MAAqB,WAAbtD,GAAwB,SAACmC,EAAA,EAAW,CAACZ,GAAG,aAAgB,SAACY,EAAA,EAAW,CAACZ,GAAG,SAChFyD,QAASpC,EACrB+B,QAAQ,SAACxC,EAAA,EAAW,CAACZ,GAAG,gBACxBsD,YAAY,SAAC1C,EAAA,EAAW,CAACZ,GAAG,oBAC5B0D,SA/GqB,WACnBhF,GAAkB,EACpB,EA8GAiF,cAAe,CAAC9E,KAAK,cAAeiD,IAAK,SAAU8B,SAAU,UAAU,UAE3D,SAAC,EAAW,CACvBnF,SAAUA,EACVD,SAAUA,EACVE,kBAAmBA,EACJC,UAAW,CACPkF,OAAQ3G,EAAMkC,QAAQyE,OAAO7D,GAC7B8D,UAAW5G,EAAMkC,QAAQ0E,UAAU9D,GACnC+D,QAAS7G,EAAMkC,QAAQ2E,QAAQ/D,GAC/BZ,QAASlC,EAAMkC,QAAQY,IAE3BZ,QAASlC,EAAMkC,aAGvB,SAACnC,EAAA,EAAI,CAACI,WAAW,SAASC,eAAe,UAAUC,YAAY,EAAM,UACjE,SAACN,EAAA,EAAI,CAACM,YAAY,EAAM,UACpB,gBAAKH,UAAU,aAAY,UACvB,UAAC,IAAM,CAAC0F,QAAS,kBAAM/B,EAAQiD,QAAQ,EAAEhB,KAAK,UAAUC,MAAM,SAACgB,EAAA,EAAgB,IAAKC,OAAK,iBAAE,SAACtD,EAAA,EAAW,CAACZ,GAAG,mBAIhI,UAAC,IAAI,CAAC5C,UAAU,OAAM,WACrB,UAACH,EAAA,EAAI,CAACI,WAAW,SAASC,eAAe,UAAUC,YAAY,EAAM,WACpE,SAACN,EAAA,EAAI,CAACG,UAAU,OAAOG,YAAY,EAAM,UACxC,gBAAKH,UAAU,eAAc,UAC5B,SAAC,IAAK,CAAC+G,YAAa,2BAAQC,QAAQ,SAACC,EAAA,EAAc,IAAKC,SAAU,SAAAC,GAAC,OAzCxD,SAAAA,GAChB,IAAMC,EAAQD,EAAEE,cAAcD,MACxBE,EAAcxD,EACdyD,EAAQvC,EAAAA,GAAAA,eAAqBsC,EAAaF,GAChDrD,EAAQwD,EACT,CAoC6EC,CAASL,EAAE,SAGrD,IAA7BrH,EAAMmF,YAAYwC,SACnB,gBAAKzH,UAAU,eAAc,UAC5B,UAAC,IAAM,CAAC0F,QApJO,WACpBvB,EAAY,UACR7C,GAAkB,EACpB,EAiJ+BsE,KAAK,UAAUC,MAAM,SAAC6B,EAAA,EAAkB,IAAKZ,OAAK,iBAAE,SAACtD,EAAA,EAAW,CAACZ,GAAG,qBAInG,gBAAK5C,UAAU,mBAAkB,UAChC,SAAC,IAAK,CACL2H,QAASlD,EACTmD,WAAY9D,EACZ2B,KAAK,QACLoC,OAAO,KACWvF,QAASA,EAC3BwF,UAAQ,WAOd,E,sBC5JA,EA9Bc,SAAChI,GAAW,IAAD,EAEf6D,GAAUC,EAAAA,EAAAA,MAEV6D,GAASM,EAAAA,EAAAA,GAAS,eAClB7C,GAAO6C,EAAAA,EAAAA,GAAS,kBAChB5C,GAAU4C,EAAAA,EAAAA,GAAS,kBAEzB,GAAkBlE,EAAAA,EAAAA,UAA6B,QAArB,EAAC/D,EAAMkI,SAASC,aAAK,aAApB,EAAsB9F,SAA1CH,GAAkD,YAA3C,GAERiD,EAAc,CAChBwC,OAAQA,EACRvC,KAAMA,EACNC,QAASA,GAGb,OAAI9B,OAAOF,OAAO8B,GAAaiD,QAAQ,YAAc,GAC1C,SAACC,EAAA,EAAO,CAACC,MAAM,iBAGGC,IAAzBvI,EAAMkI,SAASC,OACftE,EAAQyB,KAAK,aACN,OAIP,SAAC,EAAY,CAACT,MAAO7E,EAAM6E,MAAOM,YAAaA,EAAajD,QAASA,GAE7E,C","sources":["components/shared-components/Flex/index.js","graphql/update.js","views/app-views/section/form.js","views/app-views/section/table.js","views/app-views/section/index.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from '@apollo/client'\r\n\r\nexport const UPDATE_SUBJECT = gql `\r\n    mutation updateSubject ($credit: String, $part: String, $id: ID, $school: Int, $subSchool: Int, $subject: String, $subjectCode: String, $subjectMgl: String) {\r\n        updateSubject (credit: $credit id: $id, part: $part, school: $school, subSchool: $subSchool, subject: $subject, subjectCode: $subjectCode, subjectMgl: $subjectMgl) {\r\n            subject {\r\n                subject\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_SCHOOL = gql `\r\n    mutation updateSchool($id: ID, $name: String, $nameMgl: String){\r\n        updateSchool (id: $id, name: $name, nameMgl: $nameMgl){\r\n            school {\r\n                name\r\n                nameMgl\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_SUB_SCHOOL = gql `\r\n    mutation updateSubSchool($id: ID, $name: String, $nameMgl: String, $school: Int) {\r\n        updateSubSchool (id: $id, name: $name, nameMgl: $nameMgl, school: $school) {\r\n            subSchool {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_PROGRAM = gql `\r\n    mutation updateProgram ($id: ID, $program: String, $programMgl: String, $programNumeric: String, $status: String, $maxStudentNum: Int, $degree: Int, \r\n                            $school: Int, $subSchool: Int) {\r\n        updateProgram (id: $id, program: $program, programMgl: $programMgl, programNumeric: $programNumeric, status: $status, maxStudentNum: $maxStudentNum, \r\n                        degree: $degree, school: $school, subSchool: $subSchool) {\r\n            program {\r\n                program\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_CLASSES = gql `\r\n    mutation updateClasses($id: ID, $activity: Int, $classes: String, $classesMgl: String, $classesNumeric: String, $course: String, $degree: Int, $endCourse: String,\r\n                          $maxStudentNum: Int, $program: Int, $school: Int, $status: String, $subSchool: Int, $teacher: Int) {\r\n        updateClasses(id: $id, activity: $activity, classes: $classes, classesMgl: $classesMgl, classesNumeric: $classesNumeric, course: $course, degree: $degree,\r\n                    endCourse: $endCourse, maxStudentNum: $maxStudentNum, program: $program, school: $school, status: $status, subSchool: $subSchool, teacher: $teacher) {\r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_SECTION = gql `\r\n    mutation updateSection($id: ID, $classes: Int, $program: Int, $school: Int, $subSchool: Int, $section: String) {\r\n        updateSection (id: $id, classes: $classes, program: $program, school: $school, subSchool: $subSchool, section: $section) {\r\n            section {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const UPDATE_TEACHER = gql `\r\n    mutation updateTeacher ($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, \r\n                            $familyName: String, $id: ID!, $joinBefore: String, $joinDate: String, $name: String, $phone: String, $phone2: String, $registerNo: String, \r\n                            $school: Int, $sex: String, $status: Int, $subSchool: Int, $teacherCode: String, $username: String, $email: String) {\r\n        updateTeacher (address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate,\r\n                        familyName: $familyName, id: $id, joinBefore: $joinBefore, joinDate: $joinDate, name: $name, phone: $phone, phone2: $phone2, \r\n                        registerNo: $registerNo, school: $school, sex: $sex, status: $status, subSchool: $subSchool, \r\n                        teacherCode: $teacherCode, username: $username, email: $email) {\r\n            teacher {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_EMPLOYEES = gql `\r\n    mutation updateEmployee ($address: String, $birthCity: Int, $birthDistrict: Int, $birthdate: String, $employeeCode: String, $sex: String, $status: Int, \r\n                             $familyName: String, $group: Int, $id: Int, $name: String, $phone: String, $phone2: String, $registerNo: String, $compartment: Int,\r\n                             $username: String, $email: String) {\r\n        updateEmployee (address: $address, birthCity: $birthCity, birthDistrict: $birthDistrict, birthdate: $birthdate, employeeCode: $employeeCode, sex: $sex, status: $status,\r\n                        familyName: $familyName, group: $group, id: $id, name: $name, phone: $phone, phone2: $phone2, registerNo: $registerNo, compartment: $compartment,\r\n                        username: $username, email: $email) {\r\n                            employee{\r\n                                id\r\n                            }\r\n                        }\r\n                    }\r\n`\r\n\r\nexport const UPDATE_PARENT = gql `\r\n    mutation updateParent ($address: String, $addressLive: String, $familyName: String, $id: ID, $name: String, $phone: String, $profession: String, $student: Int) {\r\n        updateParent (address: $address, addressLive: $addressLive, familyName: $familyName, id: $id, name: $name, phone: $phone, profession: $profession, student: $student) {\r\n            parent {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TRANSFER_STUDENT = gql `\r\n    mutation transferStudent ($activity: Int, $classes: Int, $classtime: Int, $description: String, $docDate: String, $docNum: String, $program: Int, $school: Int, \r\n                                $section: Int, $status: Int, $statusExtra: Int, $student: Int) {\r\n        transferStudent (activity: $activity, classes: $classes, classtime: $classtime, description: $description, docDate: $docDate, docNum: $docNum, program: $program, \r\n                        school: $school, section: $section, status: $status, statusExtra: $statusExtra, student: $student) {\r\n            transfer {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_STUDENT = gql `\r\n    mutation updateStudent (\r\n        $address: String\r\n        $birthCity: Int\r\n        $birthDistrict: Int\r\n        $birthdate: String\r\n        $degree: Int\r\n        $email: String\r\n        $familyName: String\r\n        $id: ID\r\n        $joinBefore: String\r\n        $joinDate: String\r\n        $joinSchoolyear: String\r\n        $name: String\r\n        $phone: String\r\n        $phone2: String\r\n        $registerNo: String\r\n        $sex: String\r\n        $studentCode: String\r\n        $username: String\r\n    ) {\r\n        updateStudent (\r\n            address: $address\r\n            birthCity: $birthCity\r\n            birthDistrict: $birthDistrict\r\n            birthdate: $birthdate\r\n            degree: $degree\r\n            email: $email\r\n            familyName: $familyName\r\n            id: $id\r\n            joinBefore: $joinBefore\r\n            joinDate: $joinDate\r\n            joinSchoolyear: $joinSchoolyear\r\n            name: $name\r\n            phone: $phone\r\n            phone2: $phone2\r\n            registerNo: $registerNo\r\n            sex: $sex\r\n            studentCode: $studentCode\r\n            username: $username\r\n        ) {\r\n            student {\r\n                id\r\n            }\r\n        }    \r\n    }\r\n`;\r\n\r\nexport const UPDATE_EVENT_TYPE = gql `\r\n    mutation updateEventType ($color: String, $id: ID, $name: String) {\r\n        updateEventType (color: $color, id: $id, name: $name) {\r\n            eventType {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_EVENT = gql `\r\n    mutation updateEvent ($content: String, $description: String, $endAt: String, $eventType: Int, $id: ID, $startAt: String, $title: String) {\r\n        updateEvent (content: $content, description: $description, endAt: $endAt, eventType: $eventType, id: $id, startAt: $startAt, title: $title) {\r\n            event {\r\n                title\r\n            }\r\n        }\r\n    }\r\n`;","import React, { useEffect } from 'react';\r\nimport { Form, Input, message, Spin } from 'antd';\r\nimport { useMutation } from '@apollo/client';\r\nimport { SECTION_BY_CLASSES } from 'graphql/all';\r\nimport { CREATE_SECTION } from 'graphql/create'\r\nimport { UPDATE_SECTION } from 'graphql/update'\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\n\r\nfunction SectionForm ({editData, formType, setIsModalVisible, classData}) {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const [createSection, { loading: createLoading }] = useMutation(CREATE_SECTION, {\r\n        refetchQueries: [\r\n            {\r\n                query: SECTION_BY_CLASSES,\r\n                variables: { classes:  classData.classes}\r\n            }\r\n        ],\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n\t\t}\r\n\t});\r\n\r\n    const [updateSection, { loading: updateLoading }] = useMutation(UPDATE_SECTION, {\r\n        refetchQueries: [\r\n            {\r\n                query: SECTION_BY_CLASSES,\r\n                variables: { classes:  classData.classes}\r\n            }\r\n        ],\r\n        onCompleted: data => {\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n        }\r\n    })\r\n\r\n    // end useQuery\r\n\r\n    useEffect(() => {\r\n        if(formType === \"edit\") {\r\n            form.setFieldsValue({\r\n\t\t\t\tsection: editData.section,\r\n\t\t\t\tid: editData.id,\r\n\t\t\t});\r\n        } else if(formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [editData, form, formType]);\r\n\r\n    \r\n\r\n    const onFinish = values => {\r\n        if (formType === \"edit\") {\r\n            values.id = editData.id;\r\n            const finalResult = Object.assign(values, classData);\r\n            updateSection({ variables: finalResult});\r\n        } else {\r\n            const finalResult = Object.assign(values, classData);\r\n            createSection({ variables: finalResult});\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\r\n            <Form  \r\n                id=\"SectionForm\"\r\n                                layout={'vertical'}\r\n                form={form}\r\n                name=\"control-hooks\" \r\n                onFinish={onFinish}\r\n            >\r\n                <Form.Item name=\"section\" label={<IntlMessage id=\"name\" />} rules={[\r\n                    {\r\n                        required: true,\r\n                        message: <IntlMessage id=\"form.required\" />\r\n                    },\r\n                ]}>\r\n                    <Input/>\r\n                </Form.Item>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default SectionForm","import React, { useEffect, useState } from 'react'\r\nimport { Card, Table, Input, Modal, message, Button } from 'antd';\r\nimport { DeleteTwoTone, SearchOutlined, EditTwoTone, PlusCircleOutlined, RollbackOutlined } from '@ant-design/icons';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport utils from 'utils'\r\nimport SectionForm from './form'\r\nimport { useMutation, useQuery } from '@apollo/client';\r\nimport { DELETE_SECTION } from 'graphql/delete';\r\nimport { SECTION_BY_CLASSES } from 'graphql/all';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction  SectionTable (props) {\r\n\r\n    const history = useHistory();\r\n\r\n\tconst [list, setList] = useState([])\r\n\r\n    const { loading, data } = useQuery(SECTION_BY_CLASSES, {\r\n        variables: { classes: props.classes.id },\r\n    })\r\n\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\tconst [editData, setEditData] = useState([]);\r\n\tconst [formType, setFormType] = useState([]);\r\n\r\n    const showModal = () => {\r\n\t\tsetFormType(\"create\");\r\n      setIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n      setIsModalVisible(false);\r\n    };\r\n\r\n\tconst editRow = row => {\r\n\t\tsetFormType(\"edit\");\r\n\t\tsetEditData(row);\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n    useEffect(() => {\r\n        if (loading === false && data) {\r\n            setList(data.sectionsByClasses)\r\n        }\r\n    }, [data, loading])\r\n    \r\n\r\n\tconst { confirm } = Modal;\r\n\r\n\tconst [deleteSection] = useMutation(DELETE_SECTION, {\r\n\t\trefetchQueries: [\r\n            {\r\n                query: SECTION_BY_CLASSES,\r\n                variables: { classes:  props.classes.id}\r\n            }\r\n        ],\r\n\t\tonCompleted: data => {\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n\t\t  title: 'Устгах уу?',\r\n\t\t  okText: 'Устгах',\r\n\t\t  okType: 'danger',\r\n\t\t  cancelText: 'Болих',\r\n\t\t  onOk() {\r\n\t\t\tdeleteSection({ variables: { id: row.id } }); \r\n\t\t  },\r\n\t\t});\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'section',\r\n\t\t\ttitle: <IntlMessage id=\"section\" />,\r\n\t\t\tdataIndex: 'section',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'section')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'school',\r\n\t\t\ttitle: <IntlMessage id=\"school\" />,\r\n\t\t\tdataIndex: ['school', 'name'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'school')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'subSchool',\r\n\t\t\ttitle: <IntlMessage id=\"sub-school\" />,\r\n\t\t\tdataIndex: ['subSchool', 'name'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subSchool')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'program',\r\n\t\t\ttitle: <IntlMessage id='program' />,\r\n\t\t\tdataIndex: ['program', 'program'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'program')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'classes',\r\n\t\t\ttitle: <IntlMessage id='classes' />,\r\n\t\t\tdataIndex: ['classes', 'classes'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'classes')\r\n\t\t}\r\n\t];\r\n\r\n\tif (props.permissions.edit === true || props.permissions.destroy === true) {\r\n\t\ttableColumns.push(\r\n\t\t\t{\r\n\t\t\t\tkey: 'actions',\r\n\t\t\t\ttitle: <IntlMessage id='main.action' />,\r\n\t\t\t\twidth: '15vw',\r\n\t\t\t\tdataIndex: 'actions',\r\n\t\t\t\trender: (_, elm) => (\r\n\t\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t\t{ props.permissions.edit === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => editRow(elm)} type=\"text\" icon={<EditTwoTone twoToneColor=\"#ffdb00\"/>} > <IntlMessage id='edit' /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{ props.permissions.destroy === true &&\r\n\t\t\t\t\t\t\t<Button size=\"small\" onClick={() => deleteRow(elm)} type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f42f2f\"/>} > <IntlMessage id='delete' /></Button>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\tconst onSearch = e => {\r\n\t\tconst value = e.currentTarget.value\r\n\t\tconst searchArray = list\r\n\t\tconst datas = utils.wildCardSearch(searchArray, value)\r\n\t\tsetList(datas)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Modal \r\n                title= {formType === 'create' ? <IntlMessage id=\"add_new\" />  : <IntlMessage id=\"edit\" />}\r\n                visible={isModalVisible}\r\n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\r\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tokButtonProps={{form:'SectionForm', key: 'submit', htmlType: 'submit'}}\r\n            >\r\n                <SectionForm\r\n\t\t\t\t\tformType={formType} \r\n\t\t\t\t\teditData={editData} \r\n\t\t\t\t\tsetIsModalVisible={setIsModalVisible} \r\n                    classData={{ \r\n                        school: props.classes.school.id,\r\n                        subSchool: props.classes.subSchool.id,\r\n                        program: props.classes.program.id,\r\n                        classes: props.classes.id\r\n                    }}\r\n                    classes={props.classes}\r\n\t\t\t\t/>\r\n            </Modal>\r\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n                <Flex mobileFlex={false}>\r\n                    <div className='text-right' >\r\n                        <Button onClick={() => history.goBack()} type=\"default\" icon={<RollbackOutlined />} block> <IntlMessage id=\"back\" /></Button>\r\n                    </div>\r\n                </Flex>\r\n            </Flex>\r\n\t\t\t<Card className='mt-4'>\r\n\t\t\t\t<Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n\t\t\t\t\t<Flex className=\"mb-1\" mobileFlex={false}>\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Flex>\r\n\t\t\t\t\t{ props.permissions.create === true &&\r\n\t\t\t\t\t\t<div className=\"mr-md-3 mb-3\">\r\n\t\t\t\t\t\t\t<Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</Flex>\r\n\t\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t\t<Table \r\n\t\t\t\t\t\tcolumns={tableColumns} \r\n\t\t\t\t\t\tdataSource={list}\r\n\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t\trowKey='id'\r\n                        loading={loading}\r\n\t\t\t\t\t\tbordered\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</Card>\r\n\t\t</>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default SectionTable\r\n","import React, { useState } from \"react\";\r\nimport SectionTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Index = (props) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const create = CheckPer('add_section');\r\n    const edit = CheckPer('change_section');\r\n    const destroy = CheckPer('delete_section');\r\n    \r\n    const [classes] = useState(props.location.state?.message);\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    if (props.location.state === undefined) {\r\n        history.push('/app/home');\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <SectionTable title={props.title} permissions={permissions} classes={classes} />\r\n    )\r\n}\r\n\r\nexport default Index;"],"names":["Flex","props","children","className","alignItems","justifyContent","mobileFlex","flexDirection","defaultProps","UPDATE_SUBJECT","gql","UPDATE_SCHOOL","UPDATE_SUB_SCHOOL","UPDATE_PROGRAM","UPDATE_CLASSES","UPDATE_SECTION","UPDATE_TEACHER","UPDATE_EMPLOYEES","UPDATE_PARENT","TRANSFER_STUDENT","UPDATE_STUDENT","UPDATE_EVENT_TYPE","UPDATE_EVENT","editData","formType","setIsModalVisible","classData","Form","form","useMutation","CREATE_SECTION","refetchQueries","query","SECTION_BY_CLASSES","variables","classes","onCompleted","data","message","createSection","createLoading","loading","updateSection","updateLoading","useEffect","setFieldsValue","section","id","resetFields","spinning","tip","layout","name","onFinish","values","finalResult","Object","assign","label","IntlMessage","rules","required","history","useHistory","useState","list","setList","useQuery","isModalVisible","setEditData","setFormType","sectionsByClasses","confirm","Modal","DELETE_SECTION","deleteSection","tableColumns","key","title","dataIndex","sorter","a","b","utils","permissions","edit","destroy","push","width","render","_","elm","size","onClick","row","type","icon","EditTwoTone","twoToneColor","okText","okType","cancelText","onOk","DeleteTwoTone","visible","onCancel","okButtonProps","htmlType","school","subSchool","program","goBack","RollbackOutlined","block","placeholder","prefix","SearchOutlined","onChange","e","value","currentTarget","searchArray","datas","onSearch","create","PlusCircleOutlined","columns","dataSource","rowKey","bordered","CheckPer","location","state","indexOf","Loading","cover","undefined"],"sourceRoot":""}