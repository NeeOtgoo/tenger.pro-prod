{"version":3,"file":"static/js/9231.e3e16d38.chunk.js","mappings":"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","sources":["components/shared-components/AsyncTable/index.js","components/shared-components/Flex/index.js","graphql/all.js","graphql/mark.js","graphql/select.js","views/app-views/mark-board/form.js","views/app-views/mark-board/table.js","views/app-views/mark-board/index.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Card, Input, Pagination, Table } from 'antd'\r\nimport { PlusCircleOutlined, SearchOutlined } from '@ant-design/icons';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport Flex from '../Flex';\r\n\r\nconst AsyncTable = ({ fetchData, loading, columns, data, permissions, showModal }) => {\r\n\r\n    const [filter, setFilter] = useState('');\r\n\r\n    const triggerFetch = (page, pageSize) => {\r\n        var start = 0;\r\n        var end = pageSize;\r\n        if (page !== 1) {\r\n            start = (page * pageSize) - pageSize\r\n            end = pageSize * page\r\n        }\r\n        fetchData({ variables: { offset: start, limit: end, filter: filter, program: 0 } })\r\n    }\r\n\r\n    const onPageChange = (page, pageSize) => {\r\n        triggerFetch(page, pageSize);\r\n    }\r\n\r\n    const onSearch = e => {\r\n        const value = e.currentTarget.value\r\n        fetchData({ variables: { offset: 0, limit: 10000000, filter: value, program: 0 } })\r\n        setFilter(value)\r\n    }\r\n\r\n    return (\r\n\t\t<Card>\r\n            <Flex alignItems=\"center\" justifyContent=\"between\" mobileFlex={false}>\r\n                <Flex className=\"mb-1\" mobileFlex={false}>\r\n                    <div className=\"mr-md-3 mb-3\">\r\n                        <Input placeholder={'Хайх'} prefix={<SearchOutlined />} onChange={e => onSearch(e)}/>\r\n                    </div>\r\n                </Flex>\r\n                { permissions.create === true &&\r\n                    <div className=\"mr-md-3 mb-3\">\r\n                        <Button onClick={showModal} type=\"primary\" icon={<PlusCircleOutlined />} block> <IntlMessage id=\"add_new\" /></Button>\r\n                    </div>\r\n                }\r\n            </Flex>\r\n            <div className=\"table-responsive\">\r\n                <Table \r\n                    // pagination={false}\r\n                    size=\"small\"\r\n                    columns={columns} \r\n                    dataSource={data}\r\n                    rowKey='id' \r\n                    bordered\r\n                    loading={loading}\r\n                />\r\n                {/* <Pagination \r\n                    className='text-right mt-4' \r\n                    total={count} \r\n                    onChange={onPageChange}\r\n                /> */}\r\n            </div>\r\n        </Card>    \r\n    )\r\n}\r\n\r\nexport default AsyncTable","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Flex = props => {\r\n\tconst { children, className, alignItems, justifyContent, mobileFlex, flexDirection } = props\r\n\tconst getFlexResponsive = () => mobileFlex ? 'd-flex' : 'd-md-flex'\r\n\treturn (\r\n\t\t<div className={`${getFlexResponsive()} ${className} ${flexDirection?('flex-' + flexDirection): ''} ${alignItems?('align-items-' + alignItems):''} ${justifyContent?('justify-content-' + justifyContent):''}` }>\r\n\t\t\t{children}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nFlex.propTypes = {\r\n\tclassName: PropTypes.string,\r\n\talignItems: PropTypes.string,\r\n\tflexDirection: PropTypes.string,\r\n\tjustifyContent: PropTypes.string,\r\n\tmobileFlex: PropTypes.bool\r\n}\r\n\r\nFlex.defaultProps = {\r\n\tmobileFlex: true,\r\n\tflexDirection: 'row',\r\n\tclassName: ''\r\n};\r\n\r\n\r\nexport default Flex\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const ALL_SUBJECTS = gql `\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            part\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            subject \r\n            subjectMgl\r\n            subjectCode\r\n            credit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TEACHER_STATUS = gql `\r\n    query allTeacherStatuss {\r\n        allTeacherStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_STATUS = gql `\r\n    query allStudentStatuss {\r\n        allStudentStatuss {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const STUDENT_STATUS_EXTRA = gql `\r\n    query allStudentStatusExtras {\r\n        allStudentStatusExtras {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_USERS = gql `\r\n    query allUsers {\r\n        allUsers {\r\n            id\r\n            username\r\n            email\r\n        }\r\n    }\r\n`;\r\n\r\nexport const USER_BY_USERNAME = gql `\r\n    query userByUsername($username: String!) {\r\n        userByUsername(username: $username) {\r\n            id\r\n            username\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EMPLOYEES_ATTANDANCE_BY_RANGE = gql`\r\n    query employeesAttandanceByRange ($startDate: DateTime!, $endDate: DateTime!) {\r\n        employeesAttandanceByRange (startDate: $startDate, endDate: $endDate) {\r\n            id\r\n            isIn\r\n            isOut\r\n            timeIn\r\n            timeOut\r\n            user {\r\n                id\r\n                isTeacher\r\n                isEmployee\r\n                teacher {\r\n                    familyName\r\n                    name\r\n                    teacherCode\r\n                }\r\n                employee {\r\n                    familyName\r\n                    name\r\n                    employeeCode\r\n                }\r\n                groups {\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_TEACHER_AND_EMPLOYESS = gql`\r\n    query allAttendaceEmployees {\r\n        allAttendaceEmployees {\r\n            username\r\n            email\r\n            isTeacher\r\n            isEmployee\r\n            teacher {\r\n                teacherCode\r\n                familyName\r\n                name\r\n            }\r\n            employee {\r\n                employeeCode\r\n                familyName\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EMPLOYEES_COMPARTMENT = gql`\r\n    query allEmployeesCompartment {\r\n        allEmployeesCompartment {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_EMPLOYEES = gql`\r\n    query allEmployees ($filter: String) {\r\n        allEmployees (filter: $filter) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n                groups {\r\n                    name\r\n                }\r\n            }\r\n            compartment {\r\n                id\r\n                name\r\n            }\r\n            employeeCode\r\n            familyName\r\n            name\r\n            registerNo\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            sex\r\n            birthdate\r\n            birthCity {\r\n                id\r\n            }\r\n            birthDistrict {\r\n                id\r\n            }\r\n            status {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_TEACHERS = gql`\r\n  \tquery allTeachers ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allTeachers (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            teacherCode\r\n            familyName\r\n            name\r\n            registerNo\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            joinDate\r\n            joinBefore\r\n            sex\r\n            birthdate\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_STUDENTS = gql`\r\n  \tquery allStudents ($filter: String, $program: Int, $classes: Int) {\r\n        allStudents (filter: $filter, program: $program, classes: $classes) {\r\n            id\r\n            user {\r\n                id\r\n                username\r\n                email\r\n            }\r\n            studentCode\r\n            familyName\r\n            name\r\n            photo\r\n            phone\r\n            phone2\r\n            address\r\n            registerNo\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            joinDate\r\n            joinBefore\r\n            sex\r\n            birthdate\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            birthCity {\r\n                id\r\n                name\r\n            }\r\n            birthDistrict {\r\n                id\r\n                name\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            joinSchoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_CITYS = gql`\r\n  \tquery allCitys{\r\n        allCitys {\r\n            id\r\n            name\r\n            code\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_DISTRICTS = gql `\r\n    query allDistricts {\r\n        allDistricts {\r\n            id\r\n            code\r\n            name\r\n            cityID {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_PROGRAMS = gql`\r\n  \tquery allPrograms{\r\n        allPrograms {\r\n            id\r\n            program\r\n            programMgl\r\n            programNumeric\r\n            maxStudentNum\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            status\r\n            createdAt\r\n            updatedAt\r\n        }\r\n\t  }\r\n`;\r\n\r\nexport const ALL_SCHOOLS = gql`\r\n  \tquery allSchools {\r\n        allSchools {\r\n            id\r\n            name\r\n            nameMgl\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const ALL_SUB_SCHOOLS = gql`\r\n  \tquery allSubSchools{\r\n        allSubSchools {\r\n            id\r\n            name\r\n            nameMgl\r\n            school {\r\n                id\r\n                name\r\n            }\r\n\t\t}\r\n\t}\r\n`;\r\n\r\nexport const ALL_SECTIONS = gql `\r\n    query allSections {\r\n        allSections {\r\n            id\r\n            section\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_CLASSESS = gql `\r\n    query allClassess ($program: Int!, $offset: Int!, $limit: Int!, $filter: String) {\r\n        allClassess (program: $program, offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            classes\r\n            classesMgl\r\n            classesNumeric\r\n            degree {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            maxStudentNum\r\n            teacher {\r\n                id\r\n                name\r\n                teacherCode\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            status\r\n            course\r\n            endCourse\r\n            sectionSet {\r\n                id\r\n                section\r\n                classes {\r\n                    id\r\n                    classes\r\n                }\r\n                program {\r\n                    id\r\n                    program\r\n                }\r\n                subSchool {\r\n                    id\r\n                    name\r\n                }\r\n                school {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\nexport const ALL_CLASSTIME = gql `\r\n    query allClasstimes {\r\n        allClasstimes {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\nexport const ALL_SCHOOL_YEAR = gql `\r\n    query allSchoolyears {\r\n        allSchoolyears {\r\n            id\r\n            schoolyear\r\n            season\r\n            semesterCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_PARENTS = gql `\r\n    query allParents ($offset: Int!, $limit: Int!, $filter: String) {\r\n        allParents (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            user {\r\n                username\r\n                email\r\n            }\r\n            familyName\r\n            name\r\n            photo\r\n            profession\r\n            phone\r\n            address\r\n            addressLive\r\n            student {\r\n                id\r\n                studentCode\r\n                familyName\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTION_BY_CLASSES = gql `\r\n    query sectionsByClasses ($classes: Int!) {\r\n        sectionsByClasses (classes: $classes) {\r\n            id\r\n            section\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            subSchool {\r\n                id\r\n                name\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const TRANSFER_BY_STUDENT = gql`\r\n    query transfersByStudent ($student: Int!) {\r\n        transfersByStudent (student: $student) {\r\n            id\r\n            student {\r\n                familyName\r\n                name\r\n                photo\r\n                studentCode\r\n            }\r\n            school {\r\n                id\r\n                name\r\n            }\r\n            program {\r\n                id\r\n                program\r\n            }\r\n            classes {\r\n                id\r\n                classes\r\n            }\r\n            section {\r\n                id\r\n                section\r\n            }\r\n            status {\r\n                id\r\n                name\r\n            }\r\n            statusExtra {\r\n                id\r\n                name\r\n            }\r\n            classtime {\r\n                id\r\n                name\r\n            }\r\n            activity {\r\n                id\r\n                name\r\n            }\r\n            docDate\r\n            docNum\r\n            description\r\n            oldData\r\n        }\r\n    }\r\n`;  \r\n\r\nexport const ALL_EVENT_TYPES = gql`\r\n    query allEventTypes {\r\n        allEventTypes {\r\n            id\r\n            name\r\n            color\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_EVENTS = gql `\r\n    query allEvents {\r\n        allEvents {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType {\r\n                id\r\n                name\r\n                color\r\n            }\r\n        }\r\n    } \r\n`;\r\n\r\nexport const ALL_EVENTS_BY_DATE = gql `\r\n    query allEventsByDate ($date: Date) {\r\n        allEventsByDate (date: $date) {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType {\r\n                id\r\n                name\r\n                color\r\n            }\r\n        }\r\n    } \r\n`;\r\n\r\nexport const ALL_EVENTS_BY_TYPE = gql`\r\n    query allEventsByType ($id: Int!) {\r\n        allEventsByType (id: $id) {\r\n            id\r\n            title\r\n            description\r\n            content\r\n            startAt\r\n            endAt\r\n            eventType\r\n        }\r\n    }\r\n`;","import { gql } from '@apollo/client';\r\n\r\nexport const ALL_MARK = gql `\r\n    query allMarks ($markBoard: Int!) {\r\n        allMarks (markBoard: $markBoard) {\r\n            id\r\n            student {\r\n                id\r\n                familyName\r\n                name\r\n                studentCode\r\n                classes {\r\n                    classes\r\n                }\r\n                section {\r\n                    section\r\n                }\r\n            }\r\n            markRelSet {\r\n                markVal\r\n                markSetting {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n            markBoard {\r\n                subject {\r\n                    subject\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK = gql `\r\n    mutation createMark ($section: Int = 0, $studentCode: String, $markBoard: Int) {\r\n        createMark (section: $section, studentCode: $studentCode, markBoard: $markBoard) {\r\n            mark {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK = gql`\r\n    mutation deleteMark ($id: ID) {\r\n        deleteMark (id: $id) {\r\n            mark {\r\n                student {\r\n                    id\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_REL = gql `\r\n    mutation createMarkRel ($mark: Int, $markSetting: Int, $markVal: String) {\r\n        createMarkRel (mark: $mark, markSetting: $markSetting, markVal: $markVal) {\r\n            markRel {\r\n                id\r\n                markVal\r\n                markSetting {\r\n                    id\r\n                    name\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_MARK_RELS = gql `\r\n    query allMarkRels ($mark: Int!) {\r\n        allMarkRels (mark: $mark) {\r\n            mark {\r\n                student {\r\n                    id\r\n                    studentCode\r\n                }\r\n            }\r\n            markSetting {\r\n                name\r\n                percentage\r\n            }\r\n            markVal\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_MARK_PERCENTAGE = gql `\r\n    query allMarkPercentages {\r\n        allMarkPercentages {\r\n            id\r\n            type\r\n            percentage\r\n            diam\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_PERCENTAGE = gql `\r\n    mutation createMarkPercentage ($diam: String, $percentage: Int, $type: String) {\r\n        createMarkPercentage (diam: $diam, percentage: $percentage, type: $type) {\r\n            markPercentage {\r\n                type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_MARK_PERCENTAGE = gql `\r\n    mutation updateMarkPercentage ($diam: String, $percentage: Int, $type: String, $id: ID) {\r\n        updateMarkPercentage (diam: $diam, percentage: $percentage, type: $type, id: $id) {\r\n            markPercentage {\r\n                type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK_PERCENTAGE = gql `\r\n    mutation deleteMarkPercentage ($id: ID) {\r\n        deleteMarkPercentage (id: $id) {\r\n            markPercentage {\r\n                type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_BOARD_BY_ID = gql `\r\n    query markBoardById ($id: Int!) {\r\n        markBoardById (id: $id) {\r\n            id\r\n            schoolyear {\r\n                id\r\n                schoolyear\r\n            }\r\n            subject {\r\n                id\r\n                part\r\n                subject\r\n            }\r\n            teacher {\r\n                id\r\n                name\r\n            }\r\n            startAt \r\n            endAt\r\n            status\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`\r\n\r\nexport const ALL_MARK_BOARD = gql `\r\n    query allMarkBoards ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"mark\", modelName: \"Mark_board\", filter: $filter) {\r\n            count\r\n        }\r\n        allMarkBoards (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            schoolyear {\r\n                id\r\n                schoolyear\r\n                season\r\n            }\r\n            subject {\r\n                id\r\n                subject\r\n            }\r\n            teacher {\r\n                id\r\n                name\r\n            }\r\n            startAt \r\n            endAt\r\n            status\r\n            createdAt\r\n            updatedAt\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_BOARD_FROM_ROUTINE = gql `\r\n    mutation createMarkBoardFromRoutine ($endAt: String, $routine: Int, $startAt: String, $status: String) {\r\n        createMarkBoardFromRoutine (endAt: $endAt, routine: $routine, startAt: $startAt, status: $status) {\r\n            markBoard {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_MARK_BOARD = gql `\r\n    mutation createMarkBoard ($endAt: String, $schoolyear: Int, $startAt: String, $status: String, $subject: Int, $teacher: Int) {\r\n        createMarkBoard (endAt: $endAt, schoolyear: $schoolyear, startAt: $startAt, status: $status, subject: $subject, teacher: $teacher) {\r\n            markBoard {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_MARK_BOARD = gql `\r\n    mutation updateMarkBoard ($endAt: String, $schoolyear: Int, $startAt: String, $status: String, $subject: Int, $teacher: Int, $id: ID) {\r\n        updateMarkBoard (endAt: $endAt, schoolyear: $schoolyear, startAt: $startAt, status: $status, subject: $subject, teacher: $teacher, id: $id) {\r\n            markBoard {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK_BOARD = gql `\r\n    mutation deleteMarkBoard ($id: ID) {\r\n        deleteMarkBoard (id: $id) {\r\n            markBoard {\r\n                startAt\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const ALL_MARK_SETTING = gql `\r\n    query allMarkSettings {\r\n        allMarkSettings {\r\n            id\r\n            name\r\n            part\r\n            passVal\r\n            percentage\r\n        }\r\n    }\r\n`;\r\n\r\nexport const MARK_SETTINGS_BY_PART = gql`\r\n    query markSettingsByPart ($part: String!) {\r\n        markSettingsByPart (part: $part) {\r\n            id\r\n            name\r\n            part\r\n            passVal\r\n            percentage\r\n        }\r\n    }\r\n`\r\n\r\nexport const CREATE_MARK_SETTING = gql `\r\n    mutation createMarkSetting ($name: String, $percentage: Int, $part: String, $passVal: Int) {\r\n        createMarkSetting (name: $name, percentage: $percentage, part: $part, passVal: $passVal) {\r\n            markSetting {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const UPDATE_MARK_SETTING = gql `\r\n    mutation updateMarkSetting ($name: String, $percentage: Int, $id: ID, $part: String, $passVal: Int) {\r\n        updateMarkSetting (name: $name, percentage: $percentage, id: $id, part: $part, passVal: $passVal) {\r\n            markSetting {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const DELETE_MARK_SETTING = gql `\r\n    mutation deleteMarkSetting($id: ID) {\r\n        deleteMarkSetting (id: $id) {\r\n            markSetting {\r\n                name\r\n            }\r\n        }\r\n    }\r\n`","import { gql } from '@apollo/client';\r\n\r\nexport const SELECT_STUDENT = gql`\r\n    query allStudents ($filter: String) {\r\n        allStudents (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            studentCode\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_TEACHER = gql`\r\n    query allTeachers ($filter: String) {\r\n        allTeachers (filter: $filter) {\r\n            id\r\n            familyName\r\n            name\r\n            teacherCode\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_CLASSES = gql`\r\n    query allClassess ($filter: String, $program: Int) {\r\n        allClassess (filter: $filter, program: $program) {\r\n            id\r\n            classes\r\n            classesNumeric\r\n        }\r\n\t}\r\n`;\r\n\r\nexport const SELECT_SUBJECT = gql `\r\n    query allSubjects ($offset: Int!, $limit: Int!, $filter: String) {\r\n        count (appName: \"subject\", modelName: \"Subject\", filter: $filter) {\r\n            count\r\n        }\r\n        allSubjects (offset: $offset, limit: $limit, filter: $filter) {\r\n            id\r\n            subject \r\n            subjectCode\r\n            credit\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SELECT_PROGRAM = gql`\r\n    query selectProgram {\r\n        allPrograms {\r\n            id\r\n            program\r\n            programNumeric\r\n        }\r\n    }\r\n`;\r\n\r\nexport const SECTIONS_BY_PROGRAM = gql`\r\n    query sectionsByProgram ($program: Int!) {\r\n        sectionsByProgram (program: $program) {\r\n            id\r\n            section \r\n            classes {\r\n                classes\r\n            }\r\n        }\r\n    }\r\n`;","import React, { useState, useEffect } from 'react';\r\nimport { Form, message, Spin, Row, Col, Select, DatePicker, Empty } from 'antd';\r\nimport { useLazyQuery, useMutation, useQuery } from '@apollo/client';\r\nimport { ALL_SCHOOL_YEAR } from 'graphql/all';\r\nimport { CREATE_MARK_BOARD, UPDATE_MARK_BOARD } from 'graphql/mark';\r\nimport moment from 'moment';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { SELECT_SUBJECT, SELECT_TEACHER } from 'graphql/select';\r\nimport Loading from 'components/shared-components/Loading';\r\n\r\nfunction MarkBoardForm ({formType, editData, setIsModalVisible, refetch}) {\r\n\r\n    const [form] = Form.useForm();\r\n    const { Option } = Select;\r\n    const { RangePicker } = DatePicker;\r\n\r\n    const [createMarkBoard, { loading: createLoading }] = useMutation(CREATE_MARK_BOARD, {\r\n\t\tonCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n\t\t}\r\n\t});\r\n\r\n    const [updateMarkBoard, { loading: updateLoading }] = useMutation(UPDATE_MARK_BOARD, {\r\n\t\tonCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай хадгаллаа');\r\n            setIsModalVisible(false);\r\n\t\t}\r\n    })\r\n\r\n    const { data: schoolYearData } = useQuery(ALL_SCHOOL_YEAR, {\r\n    });\r\n\r\n    const [teachers, setTeachers] = useState ([]);\r\n    const [fetchTeacher, { loading: loadingTeacher }] = useLazyQuery(SELECT_TEACHER, {\r\n        onCompleted: data => {\r\n            setTeachers(data.allTeachers)\r\n        }\r\n    });\r\n\r\n    const [subjects, setSubjects] = useState([]);\r\n    const [fetchSubject, { loading: loadingSubject }] = useLazyQuery(SELECT_SUBJECT, {\r\n        onCompleted: data => {\r\n            setSubjects(data.allSubjects);\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        if(formType === \"edit\") {\r\n            const formData = {\r\n                date: [moment(editData.startAt), moment(editData.endAt)],\r\n                schoolyear: editData.schoolyear.id,\r\n                subject: editData.subject.id,\r\n                teacher: editData.teacher.id,\r\n                status: editData.status,\r\n            }\r\n            fetchTeacher({ variables: { offset: 0, limit: 99999999, filter: editData.teacher.name } });\r\n            fetchSubject({ variables: { offset: 0, limit: 99999999, filter: editData.subject.subject } });\r\n            form.setFieldsValue(formData);\r\n        } else if(formType === \"create\") {\r\n            form.resetFields();\r\n        }\r\n    }, [editData, fetchTeacher, fetchSubject, form, formType]);\r\n\r\n    const onFinish = values => {\r\n        if (formType === 'create') {\r\n            values.date.map(function (date, index) {\r\n                if (index === 0) {\r\n                    values.startAt = moment(date).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                } else {\r\n                    values.endAt = moment(date).format(\"YYYY-MM-DD HH:mm:ss\") \r\n                }\r\n                return null\r\n            })\r\n    \r\n            if (values.hasOwnProperty('endAt')) {\r\n                createMarkBoard({ variables: values})\r\n            }\r\n        } else {\r\n            values.id = editData.id;\r\n            values.date.map(function (date, index) {\r\n                if (index === 0) {\r\n                    values.startAt = moment(date).format(\"YYYY-MM-DD HH:mm:ss\")\r\n                } else {\r\n                    values.endAt = moment(date).format(\"YYYY-MM-DD HH:mm:ss\") \r\n                }\r\n                return null\r\n            })\r\n            if (values.hasOwnProperty('endAt')) {\r\n                updateMarkBoard({ variables: values})\r\n            }\r\n        }\r\n    };\r\n    \r\n    const onTeacherSearch = value => {\r\n        if (value === '') {\r\n            setTeachers([]);\r\n        } else {\r\n            fetchTeacher({ variables: { offset: 0, limit: 99999999, filter: value } });\r\n        }\r\n    }\r\n\r\n    const onSubjectSearch = value => {\r\n        if (value === '') {\r\n            setSubjects([]);\r\n        } else {\r\n            fetchSubject({ variables: { offset: 0, limit: 99999999, filter: value } });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Spin spinning={createLoading || updateLoading} tip=\"Ачааллаж байна...\">\r\n            <Form  \r\n                id=\"MarkBoardForm\"\r\n                layout='vertical'\r\n                form={form}\r\n                name=\"control-hooks\" \r\n                onFinish={onFinish}\r\n            >\r\n                <Row gutter={[16, 16]}>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            name=\"schoolyear\"\r\n                            label={<IntlMessage id=\"schoolyear\" />}\r\n                            rules={[\r\n                                { \r\n                                    required: true,\r\n                                    message: \"Хоосон орхих боломжгүй\"\r\n                                }\r\n                            ]}\r\n                        >\r\n                            <Select>\r\n                                {schoolYearData?.allSchoolyears.map((schoolYear, index) => (\r\n                                    <Option key={index} value={schoolYear.id}>{schoolYear.schoolyear} / {schoolYear.season} </Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"teacher\"\r\n                            label={<IntlMessage id=\"teacher\" />}\r\n                            rules={[\r\n                                { \r\n                                    required: true,\r\n                                    message: \"Хоосон орхих боломжгүй\"\r\n                                }\r\n                            ]}\r\n                        >\r\n                            <Select\r\n                                showSearch\r\n                                filterOption={false}\r\n                                notFoundContent={\r\n                                    loadingTeacher ? <Loading cover='content' /> \r\n                                    : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                                }\r\n                                onSearch={onTeacherSearch}\r\n                            >\r\n                                { teachers.map((item, index) => (\r\n                                    <Option value={item.id} key={index} >{item.familyName} {item.name} / {item.teacherCode} </Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"date\"\r\n                            label={<IntlMessage id=\"date\" />}\r\n                            rules={[\r\n                                { \r\n                                    required: true,\r\n                                    message: \"Хоосон орхих боломжгүй\"\r\n                                }\r\n                            ]}\r\n                        >\r\n                            <RangePicker\r\n                                showTime \r\n                                placeholder={['Эхлэх хугацаа', 'Дуусах хугацаа']}\r\n                            />\r\n                        </Form.Item>\r\n                    </Col>\r\n                    <Col span={12}>\r\n                        <Form.Item\r\n                            name=\"subject\"\r\n                            label={<IntlMessage id=\"subject\" />}\r\n                            rules={[\r\n                                { \r\n                                    required: true,\r\n                                    message: \"Хоосон орхих боломжгүй\"\r\n                                }\r\n                            ]}\r\n                        >\r\n                            <Select\r\n                                showSearch\r\n                                filterOption={false}\r\n                                notFoundContent={\r\n                                    loadingSubject ? <Loading cover='content' /> \r\n                                    : <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                                }\r\n                                onSearch={onSubjectSearch}\r\n                            >\r\n                                { subjects.map((item, index) => (\r\n                                    <Option value={item.id} key={index} > {item.subject} {`(${Math.floor(item.credit)})`} / {item.subjectCode} </Option>\r\n                                ))}\r\n                            </Select>\r\n                        </Form.Item>\r\n                        <Form.Item\r\n                            name=\"status\"\r\n                            label={<IntlMessage id=\"status\" />}\r\n                            rules={[\r\n                                { \r\n                                    required: true,\r\n                                    message: \"Хоосон орхих боломжгүй\"\r\n                                }\r\n                            ]}\r\n                        >\r\n                            <Select>\r\n                                <Option key={0} value=\"OPEN\"><IntlMessage id=\"status.open\" /></Option>\r\n                                <Option key={1} value=\"CLOSED\"><IntlMessage id=\"status.closed\" /></Option>\r\n                            </Select>\r\n                        </Form.Item>\r\n                    </Col>\r\n                </Row>\r\n            </Form>\r\n        </Spin>\r\n    );\r\n};\r\n\r\nexport default MarkBoardForm","import React, { useState, useEffect } from 'react'\r\nimport { Modal, message, Button } from 'antd';\r\nimport { DeleteTwoTone, EditTwoTone, EyeTwoTone } from '@ant-design/icons';\r\nimport utils from 'utils';\r\nimport MarkBoardForm from './form';\r\nimport { useLazyQuery, useMutation } from '@apollo/client';\r\nimport { ALL_MARK_BOARD, DELETE_MARK_BOARD } from 'graphql/mark'\r\nimport moment from 'moment';\r\nimport IntlMessage from 'components/util-components/IntlMessage';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { APP_PREFIX_PATH } from 'configs/AppConfig';\r\nimport AsyncTable from 'components/shared-components/AsyncTable';\r\n\r\nfunction  MarkBoardTable (props) {\r\n\r\n\tconst [list, setList] = useState([]);\r\n    const [count, setCount] = useState(1);\r\n\r\n\tconst [fetchData, { loading, refetch }] = useLazyQuery(ALL_MARK_BOARD, {\r\n        fetchPolicy: 'network-only',\r\n        onCompleted: data => {\r\n            setCount(data.count.count);\r\n            setList(data.allMarkBoards);\r\n        }\r\n    });\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        fetchData({ variables: { offset: 0, limit: 10000000, filter: \"\" } })\r\n    }, [fetchData])\r\n\r\n\tconst [isModalVisible, setIsModalVisible] = useState(false);\r\n\tconst [editData, setEditData] = useState([]);\r\n\r\n\tconst [formType, setFormType] = useState(\"\");\r\n\r\n    const showModal = () => {\r\n\t\tsetFormType(\"create\");\r\n      \tsetIsModalVisible(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n      \tsetIsModalVisible(false);\r\n    };\r\n\r\n\tconst editRow = row => {\r\n\t\tsetFormType(\"edit\");\r\n\t\tsetEditData(row);\r\n\t\tsetIsModalVisible(true);\r\n\t};\r\n\r\n\tconst { confirm } = Modal;\r\n\r\n\tconst [deleteBoard] = useMutation(DELETE_MARK_BOARD, {\r\n\t\tonCompleted: data => {\r\n            refetch();\r\n            message.success('Амжилттай устлаа');\r\n\t\t}\r\n\t});\r\n\t\r\n\tfunction deleteRow(row) {\r\n\t\tconfirm({\r\n\t\t  title: 'Устгах уу?',\r\n\t\t  okText: 'Устгах',\r\n\t\t  okType: 'danger',\r\n\t\t  cancelText: 'Болих',\r\n\t\t  onOk() {\r\n\t\t\tdeleteBoard({ variables: { id: row.id} }); \r\n\t\t  },\r\n\t\t});\r\n\t}\r\n\r\n\tconst tableColumns = [\r\n\t\t{\r\n\t\t\tkey: 'schoolyear',\r\n\t\t\ttitle: <IntlMessage id=\"schoolyear\" />,\r\n\t\t\tdataIndex: 'schoolyear',\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'schoolyear'),\r\n\t\t\trender: (text) => (\r\n\t\t\t\t<span>{text.schoolyear} / {text.season}</span>\r\n\t\t\t\t// moment(text).format(\"YYYY-MM-DD\")\r\n\t\t\t\t\r\n\t\t\t),\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'subject',\r\n\t\t\ttitle: <IntlMessage id=\"subject\" />,\r\n\t\t\tdataIndex: ['subject', 'subject'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'subject')\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'teacher',\r\n\t\t\ttitle: <IntlMessage id=\"teacher\" />,\r\n\t\t\tdataIndex: ['teacher', 'name'],\r\n\t\t\tsorter: (a, b) => utils.antdTableSorter(a, b, 'teacher')\r\n\t\t},\r\n\t\t{\r\n\t\t\ttitle: <IntlMessage id=\"start_end_date\" />,\r\n            children: [\r\n                {\r\n                    key: 'startAt',\r\n                    title: <IntlMessage id=\"startAt\" />,\r\n                    dataIndex: 'startAt',\r\n                    render: (text) => (\r\n                        moment(text).format(\"YYYY-MM-DD\")\r\n                    ),\r\n                    sorter: (a, b) => utils.antdTableSorter(a, b, 'startAt')\r\n                },\r\n                {\r\n                    key: 'endAt',\r\n                    title: <IntlMessage id=\"endAt\" />,\r\n                    dataIndex: 'endAt',\r\n                    render: (text) => (\r\n                        moment(text).format(\"YYYY-MM-DD\")\r\n                    ),\r\n                    sorter: (a, b) => utils.antdTableSorter(a, b, 'endAt')\r\n                },\r\n            ]\r\n\t\t},\r\n\t\t{\r\n\t\t\tkey: 'actions',\r\n\t\t\ttitle: <IntlMessage id=\"main.action\" />,\r\n\t\t\twidth: `20vw`,\r\n\t\t\tdataIndex: 'actions',\r\n\t\t\trender: (_, elm) => (\r\n\t\t\t\t<div className=\"text-center\">\r\n\t\t\t\t\t<Link to={`${APP_PREFIX_PATH}/mark-board/${elm.id}`}>\r\n\t\t\t\t\t\t<Button size=\"small\" type='text' key=\"0\">\r\n\t\t\t\t\t\t\t<EyeTwoTone />\r\n\t\t\t\t\t\t\t<span className=\"ml-2\"> <IntlMessage id=\"show\" /></span>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t\t{ props.permissions.edit === true &&\r\n\t\t\t\t\t\t<Button size=\"small\" type='text' key=\"2\" onClick={() => editRow(elm)}>\r\n\t\t\t\t\t\t\t<EditTwoTone twoToneColor=\"#ffdb00\"/>\r\n\t\t\t\t\t\t\t<span className=\"ml-2\"> <IntlMessage id=\"edit\" /></span>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t}\r\n\t\t\t\t\t{ props.permissions.destroy === true &&\r\n\t\t\t\t\t\t<Button size=\"small\" type='text' key=\"3\" onClick={() => deleteRow(elm)}>\r\n\t\t\t\t\t\t\t<DeleteTwoTone twoToneColor=\"#f42f2f\"/>\r\n\t\t\t\t\t\t\t<span className=\"ml-2\"> <IntlMessage id=\"delete\" /></span>\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t];\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Modal \r\n                title={formType === 'create'  ? <IntlMessage id=\"add_new\" /> : <IntlMessage id=\"edit\" /> }\r\n                visible={isModalVisible} \r\n\t\t\t\tokText={<IntlMessage id=\"main.okText\" />}\r\n\t\t\t\tcancelText={<IntlMessage id=\"main.cancelText\" />}\r\n\t\t\t\twidth={'80vw'}\r\n\t\t\t\tonCancel={handleCancel}\r\n\t\t\t\tokButtonProps={{form:'MarkBoardForm', key: 'submit', htmlType: 'submit'}}\r\n            >\r\n                <MarkBoardForm \r\n                    refetch={refetch}\r\n\t\t\t\t\teditData={editData} \r\n\t\t\t\t\tformType={formType} \r\n\t\t\t\t\tsetIsModalVisible={setIsModalVisible}\r\n\t\t\t\t/>\r\n            </Modal>\r\n            <AsyncTable \r\n                fetchData={fetchData}\r\n                loading={loading}\r\n                columns={tableColumns}\r\n                data={list}\r\n                count={count}\r\n                permissions={props.permissions}\r\n                showModal={showModal}\r\n           />\r\n\t\t</>\r\n\t\t\r\n\t)\r\n}\r\n\r\nexport default MarkBoardTable\r\n","import React from \"react\";\r\nimport MarkBoardTable from './table';\r\nimport { CheckPer } from 'hooks/checkPermission';\r\nimport Loading from \"components/shared-components/Loading\";\r\n\r\nconst Index = (props) => {\r\n\r\n    const create = CheckPer('add_mark_board');\r\n    const edit = CheckPer('change_mark_board');\r\n    const destroy = CheckPer('delete_mark_board');\r\n\r\n    const permissions = {\r\n        create: create,\r\n        edit: edit,\r\n        destroy: destroy\r\n    }\r\n\r\n    if (Object.values(permissions).indexOf('loading') > -1) {\r\n        return <Loading cover=\"content\" />\r\n    }\r\n\r\n    return (\r\n        <MarkBoardTable title={props.title} permissions={permissions} />\r\n    )\r\n}\r\n\r\nexport default Index;\r\n"],"names":["fetchData","loading","columns","data","permissions","showModal","useState","setFilter","alignItems","justifyContent","mobileFlex","className","placeholder","prefix","onChange","e","value","currentTarget","variables","offset","limit","filter","program","onSearch","create","onClick","type","icon","block","id","size","dataSource","rowKey","bordered","Flex","props","children","flexDirection","defaultProps","ALL_SUBJECTS","gql","ALL_USERS","ALL_EMPLOYEES_ATTANDANCE_BY_RANGE","ALL_EMPLOYEES_COMPARTMENT","ALL_EMPLOYEES","ALL_TEACHERS","ALL_STUDENTS","ALL_CITYS","ALL_DISTRICTS","ALL_PROGRAMS","ALL_SCHOOLS","ALL_SUB_SCHOOLS","ALL_SECTIONS","ALL_CLASSESS","ALL_CLASSTIME","ALL_SCHOOL_YEAR","ALL_PARENTS","SECTION_BY_CLASSES","TRANSFER_BY_STUDENT","ALL_EVENT_TYPES","ALL_EVENTS","ALL_EVENTS_BY_DATE","ALL_MARK","CREATE_MARK","DELETE_MARK","CREATE_MARK_REL","ALL_MARK_PERCENTAGE","CREATE_MARK_PERCENTAGE","UPDATE_MARK_PERCENTAGE","DELETE_MARK_PERCENTAGE","MARK_BOARD_BY_ID","ALL_MARK_BOARD","CREATE_MARK_BOARD_FROM_ROUTINE","CREATE_MARK_BOARD","UPDATE_MARK_BOARD","DELETE_MARK_BOARD","ALL_MARK_SETTING","MARK_SETTINGS_BY_PART","CREATE_MARK_SETTING","UPDATE_MARK_SETTING","DELETE_MARK_SETTING","SELECT_STUDENT","SELECT_TEACHER","SELECT_CLASSES","SELECT_SUBJECT","SELECT_PROGRAM","SECTIONS_BY_PROGRAM","formType","editData","setIsModalVisible","refetch","Form","form","Option","Select","RangePicker","DatePicker","useMutation","onCompleted","message","createMarkBoard","createLoading","updateMarkBoard","updateLoading","schoolYearData","useQuery","teachers","setTeachers","useLazyQuery","allTeachers","fetchTeacher","loadingTeacher","subjects","setSubjects","allSubjects","fetchSubject","loadingSubject","useEffect","formData","date","moment","startAt","endAt","schoolyear","subject","teacher","status","name","setFieldsValue","resetFields","spinning","tip","layout","onFinish","values","map","index","format","hasOwnProperty","gutter","span","label","IntlMessage","rules","required","allSchoolyears","schoolYear","season","showSearch","filterOption","notFoundContent","Loading","cover","image","Empty","item","familyName","teacherCode","showTime","Math","floor","credit","subjectCode","list","setList","count","setCount","fetchPolicy","allMarkBoards","useHistory","isModalVisible","setEditData","setFormType","confirm","Modal","deleteBoard","tableColumns","key","title","dataIndex","sorter","a","b","utils","render","text","width","_","elm","to","APP_PREFIX_PATH","EyeTwoTone","edit","row","editRow","EditTwoTone","twoToneColor","destroy","okText","okType","cancelText","onOk","deleteRow","DeleteTwoTone","visible","onCancel","okButtonProps","htmlType","AsyncTable","CheckPer","Object","indexOf"],"sourceRoot":""}